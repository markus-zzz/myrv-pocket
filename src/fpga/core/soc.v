/* Generated by Amaranth Yosys 0.40 (PyPI ver 0.40.0.0.post98, git sha1 a1bb0255d) */

(* top =  1  *)
(* src = "rtl/soc.py:101" *)
(* generator = "Amaranth" *)
module top(i_rxd, i_sd_spi_miso, i_SDRAM_DQ, clk, rst, o_ebreak, o_txd, o_sd_spi_cs, o_sd_spi_sclk, o_sd_spi_mosi, o_SDRAM_CKE, o_SDRAM_WEn, o_SDRAM_CASn, o_SDRAM_RASn, o_SDRAM_A, o_SDRAM_BA, o_SDRAM_DQM, o_SDRAM_DQ, o_SDRAM_DQ_OE, i_gpio);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire \$1 ;
  reg \$10 ;
  reg [9:0] \$11 ;
  reg \$12 ;
  reg \$13 ;
  reg [5:0] \$14 ;
  reg \$15 ;
  wire [2:0] \$16 ;
  wire \$2 ;
  wire \$3 ;
  wire [10:0] \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "rtl/soc.py:183" *)
  reg cpu_ack = 1'h0;
  (* init = 1'h0 *)
  (* src = "rtl/soc.py:162" *)
  wire ebreak;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:47" *)
  input [15:0] i_SDRAM_DQ;
  wire [15:0] i_SDRAM_DQ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:47" *)
  wire [15:0] \i_SDRAM_DQ$48 ;
  (* src = "rtl/soc.py:33" *)
  reg [5:0] i_clkdiv = 6'h00;
  (* src = "rtl/soc.py:34" *)
  wire [7:0] i_data;
  (* src = "rtl/soc.py:36" *)
  reg i_en;
  (* src = "rtl/soc.py:82" *)
  input [7:0] i_gpio;
  wire [7:0] i_gpio;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:954" *)
  wire i_irq_timer;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:113" *)
  input i_rxd;
  wire i_rxd;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:113" *)
  wire \i_rxd$33 ;
  (* src = "rtl/soc.py:41" *)
  input i_sd_spi_miso;
  wire i_sd_spi_miso;
  (* src = "rtl/soc.py:41" *)
  wire i_spi_miso;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:964" *)
  reg i_wb_ack;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:18" *)
  wire [31:0] i_wb_adr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:103" *)
  wire [31:0] \i_wb_adr$29 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:30" *)
  wire [31:0] \i_wb_adr$35 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:19" *)
  wire [31:0] i_wb_dat;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:104" *)
  wire [31:0] \i_wb_dat$30 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:31" *)
  wire [31:0] \i_wb_dat$36 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:958" *)
  reg [31:0] \i_wb_dat$73 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:23" *)
  reg i_wb_stb;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:108" *)
  reg \i_wb_stb$32 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:35" *)
  reg \i_wb_stb$38 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:22" *)
  wire i_wb_we;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:107" *)
  wire \i_wb_we$31 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:34" *)
  wire \i_wb_we$37 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:44" *)
  output [12:0] o_SDRAM_A;
  wire [12:0] o_SDRAM_A;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:44" *)
  wire [12:0] \o_SDRAM_A$43 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:45" *)
  output [1:0] o_SDRAM_BA;
  wire [1:0] o_SDRAM_BA;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:45" *)
  wire [1:0] \o_SDRAM_BA$44 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:42" *)
  output o_SDRAM_CASn;
  wire o_SDRAM_CASn;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:42" *)
  wire \o_SDRAM_CASn$41 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:40" *)
  output o_SDRAM_CKE;
  wire o_SDRAM_CKE;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:40" *)
  wire \o_SDRAM_CKE$39 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:48" *)
  output [15:0] o_SDRAM_DQ;
  wire [15:0] o_SDRAM_DQ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:48" *)
  wire [15:0] \o_SDRAM_DQ$46 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:46" *)
  output [1:0] o_SDRAM_DQM;
  wire [1:0] o_SDRAM_DQM;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:46" *)
  wire [1:0] \o_SDRAM_DQM$45 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:49" *)
  output o_SDRAM_DQ_OE;
  wire o_SDRAM_DQ_OE;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:49" *)
  wire \o_SDRAM_DQ_OE$47 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:43" *)
  output o_SDRAM_RASn;
  wire o_SDRAM_RASn;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:43" *)
  wire \o_SDRAM_RASn$42 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:41" *)
  output o_SDRAM_WEn;
  wire o_SDRAM_WEn;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:41" *)
  wire \o_SDRAM_WEn$40 ;
  (* src = "rtl/soc.py:37" *)
  wire o_busy;
  (* src = "rtl/soc.py:35" *)
  wire [7:0] o_data;
  (* src = "rtl/soc.py:162" *)
  output o_ebreak;
  reg o_ebreak = 1'h0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:953" *)
  wire \o_ebreak$86 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:28" *)
  wire o_irq_timer;
  (* src = "rtl/soc.py:84" *)
  output o_sd_spi_cs;
  wire o_sd_spi_cs;
  (* src = "rtl/soc.py:40" *)
  output o_sd_spi_mosi;
  wire o_sd_spi_mosi;
  (* src = "rtl/soc.py:39" *)
  output o_sd_spi_sclk;
  wire o_sd_spi_sclk;
  (* src = "rtl/soc.py:40" *)
  wire o_spi_mosi;
  (* src = "rtl/soc.py:39" *)
  wire o_spi_sclk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:966" *)
  wire [31:0] o_trace_pc;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:967" *)
  wire o_trace_valid;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:114" *)
  output o_txd;
  wire o_txd;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:114" *)
  wire \o_txd$34 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:26" *)
  wire o_wb_ack;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:111" *)
  wire \o_wb_ack$80 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:38" *)
  wire \o_wb_ack$85 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:956" *)
  wire [31:0] o_wb_adr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:957" *)
  wire [31:0] o_wb_dat;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:25" *)
  wire [31:0] \o_wb_dat$77 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:110" *)
  wire [31:0] \o_wb_dat$79 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:37" *)
  wire [31:0] \o_wb_dat$84 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:962" *)
  wire o_wb_stb;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:961" *)
  wire o_wb_we;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* init = 6'h00 *)
  (* src = "rtl/soc.py:152" *)
  wire [5:0] sd_spi_clkdiv_reg;
  (* src = "rtl/soc.py:151" *)
  reg sd_spi_cs_reg = 1'h0;
  (* src = "rtl/soc.py:174" *)
  reg tram_en = 1'h0;
  (* init = 10'h000 *)
  (* src = "rtl/soc.py:173" *)
  wire [9:0] tram_wr_idx;
  (* src = "rtl/soc.py:108" *)
  wire [9:0] u_ram_r_addr;
  (* src = "rtl/soc.py:108" *)
  wire [31:0] u_ram_r_data;
  (* src = "rtl/soc.py:109" *)
  wire [9:0] u_ram_w_addr;
  (* src = "rtl/soc.py:109" *)
  wire [31:0] u_ram_w_data;
  (* src = "rtl/soc.py:109" *)
  reg u_ram_w_en;
  (* src = "rtl/soc.py:106" *)
  wire [9:0] u_rom_r_addr;
  (* src = "rtl/soc.py:106" *)
  wire [31:0] u_rom_r_data;
  (* src = "rtl/soc.py:116" *)
  wire [9:0] u_tram_r_addr;
  (* src = "rtl/soc.py:116" *)
  wire [31:0] u_tram_r_data;
  (* src = "rtl/soc.py:117" *)
  reg [9:0] u_tram_w_addr = 10'h000;
  (* src = "rtl/soc.py:117" *)
  wire [31:0] u_tram_w_data;
  (* src = "rtl/soc.py:117" *)
  reg u_tram_w_en;
  (* src = "rtl/soc.py:107" *)
  reg [31:0] u_ram_rd [1023:0];
  initial begin
    u_ram_rd[0] = 32'd0;
    u_ram_rd[1] = 32'd0;
    u_ram_rd[2] = 32'd0;
    u_ram_rd[3] = 32'd0;
    u_ram_rd[4] = 32'd0;
    u_ram_rd[5] = 32'd0;
    u_ram_rd[6] = 32'd0;
    u_ram_rd[7] = 32'd0;
    u_ram_rd[8] = 32'd0;
    u_ram_rd[9] = 32'd0;
    u_ram_rd[10] = 32'd0;
    u_ram_rd[11] = 32'd0;
    u_ram_rd[12] = 32'd0;
    u_ram_rd[13] = 32'd0;
    u_ram_rd[14] = 32'd0;
    u_ram_rd[15] = 32'd0;
    u_ram_rd[16] = 32'd0;
    u_ram_rd[17] = 32'd0;
    u_ram_rd[18] = 32'd0;
    u_ram_rd[19] = 32'd0;
    u_ram_rd[20] = 32'd0;
    u_ram_rd[21] = 32'd0;
    u_ram_rd[22] = 32'd0;
    u_ram_rd[23] = 32'd0;
    u_ram_rd[24] = 32'd0;
    u_ram_rd[25] = 32'd0;
    u_ram_rd[26] = 32'd0;
    u_ram_rd[27] = 32'd0;
    u_ram_rd[28] = 32'd0;
    u_ram_rd[29] = 32'd0;
    u_ram_rd[30] = 32'd0;
    u_ram_rd[31] = 32'd0;
    u_ram_rd[32] = 32'd0;
    u_ram_rd[33] = 32'd0;
    u_ram_rd[34] = 32'd0;
    u_ram_rd[35] = 32'd0;
    u_ram_rd[36] = 32'd0;
    u_ram_rd[37] = 32'd0;
    u_ram_rd[38] = 32'd0;
    u_ram_rd[39] = 32'd0;
    u_ram_rd[40] = 32'd0;
    u_ram_rd[41] = 32'd0;
    u_ram_rd[42] = 32'd0;
    u_ram_rd[43] = 32'd0;
    u_ram_rd[44] = 32'd0;
    u_ram_rd[45] = 32'd0;
    u_ram_rd[46] = 32'd0;
    u_ram_rd[47] = 32'd0;
    u_ram_rd[48] = 32'd0;
    u_ram_rd[49] = 32'd0;
    u_ram_rd[50] = 32'd0;
    u_ram_rd[51] = 32'd0;
    u_ram_rd[52] = 32'd0;
    u_ram_rd[53] = 32'd0;
    u_ram_rd[54] = 32'd0;
    u_ram_rd[55] = 32'd0;
    u_ram_rd[56] = 32'd0;
    u_ram_rd[57] = 32'd0;
    u_ram_rd[58] = 32'd0;
    u_ram_rd[59] = 32'd0;
    u_ram_rd[60] = 32'd0;
    u_ram_rd[61] = 32'd0;
    u_ram_rd[62] = 32'd0;
    u_ram_rd[63] = 32'd0;
    u_ram_rd[64] = 32'd0;
    u_ram_rd[65] = 32'd0;
    u_ram_rd[66] = 32'd0;
    u_ram_rd[67] = 32'd0;
    u_ram_rd[68] = 32'd0;
    u_ram_rd[69] = 32'd0;
    u_ram_rd[70] = 32'd0;
    u_ram_rd[71] = 32'd0;
    u_ram_rd[72] = 32'd0;
    u_ram_rd[73] = 32'd0;
    u_ram_rd[74] = 32'd0;
    u_ram_rd[75] = 32'd0;
    u_ram_rd[76] = 32'd0;
    u_ram_rd[77] = 32'd0;
    u_ram_rd[78] = 32'd0;
    u_ram_rd[79] = 32'd0;
    u_ram_rd[80] = 32'd0;
    u_ram_rd[81] = 32'd0;
    u_ram_rd[82] = 32'd0;
    u_ram_rd[83] = 32'd0;
    u_ram_rd[84] = 32'd0;
    u_ram_rd[85] = 32'd0;
    u_ram_rd[86] = 32'd0;
    u_ram_rd[87] = 32'd0;
    u_ram_rd[88] = 32'd0;
    u_ram_rd[89] = 32'd0;
    u_ram_rd[90] = 32'd0;
    u_ram_rd[91] = 32'd0;
    u_ram_rd[92] = 32'd0;
    u_ram_rd[93] = 32'd0;
    u_ram_rd[94] = 32'd0;
    u_ram_rd[95] = 32'd0;
    u_ram_rd[96] = 32'd0;
    u_ram_rd[97] = 32'd0;
    u_ram_rd[98] = 32'd0;
    u_ram_rd[99] = 32'd0;
    u_ram_rd[100] = 32'd0;
    u_ram_rd[101] = 32'd0;
    u_ram_rd[102] = 32'd0;
    u_ram_rd[103] = 32'd0;
    u_ram_rd[104] = 32'd0;
    u_ram_rd[105] = 32'd0;
    u_ram_rd[106] = 32'd0;
    u_ram_rd[107] = 32'd0;
    u_ram_rd[108] = 32'd0;
    u_ram_rd[109] = 32'd0;
    u_ram_rd[110] = 32'd0;
    u_ram_rd[111] = 32'd0;
    u_ram_rd[112] = 32'd0;
    u_ram_rd[113] = 32'd0;
    u_ram_rd[114] = 32'd0;
    u_ram_rd[115] = 32'd0;
    u_ram_rd[116] = 32'd0;
    u_ram_rd[117] = 32'd0;
    u_ram_rd[118] = 32'd0;
    u_ram_rd[119] = 32'd0;
    u_ram_rd[120] = 32'd0;
    u_ram_rd[121] = 32'd0;
    u_ram_rd[122] = 32'd0;
    u_ram_rd[123] = 32'd0;
    u_ram_rd[124] = 32'd0;
    u_ram_rd[125] = 32'd0;
    u_ram_rd[126] = 32'd0;
    u_ram_rd[127] = 32'd0;
    u_ram_rd[128] = 32'd0;
    u_ram_rd[129] = 32'd0;
    u_ram_rd[130] = 32'd0;
    u_ram_rd[131] = 32'd0;
    u_ram_rd[132] = 32'd0;
    u_ram_rd[133] = 32'd0;
    u_ram_rd[134] = 32'd0;
    u_ram_rd[135] = 32'd0;
    u_ram_rd[136] = 32'd0;
    u_ram_rd[137] = 32'd0;
    u_ram_rd[138] = 32'd0;
    u_ram_rd[139] = 32'd0;
    u_ram_rd[140] = 32'd0;
    u_ram_rd[141] = 32'd0;
    u_ram_rd[142] = 32'd0;
    u_ram_rd[143] = 32'd0;
    u_ram_rd[144] = 32'd0;
    u_ram_rd[145] = 32'd0;
    u_ram_rd[146] = 32'd0;
    u_ram_rd[147] = 32'd0;
    u_ram_rd[148] = 32'd0;
    u_ram_rd[149] = 32'd0;
    u_ram_rd[150] = 32'd0;
    u_ram_rd[151] = 32'd0;
    u_ram_rd[152] = 32'd0;
    u_ram_rd[153] = 32'd0;
    u_ram_rd[154] = 32'd0;
    u_ram_rd[155] = 32'd0;
    u_ram_rd[156] = 32'd0;
    u_ram_rd[157] = 32'd0;
    u_ram_rd[158] = 32'd0;
    u_ram_rd[159] = 32'd0;
    u_ram_rd[160] = 32'd0;
    u_ram_rd[161] = 32'd0;
    u_ram_rd[162] = 32'd0;
    u_ram_rd[163] = 32'd0;
    u_ram_rd[164] = 32'd0;
    u_ram_rd[165] = 32'd0;
    u_ram_rd[166] = 32'd0;
    u_ram_rd[167] = 32'd0;
    u_ram_rd[168] = 32'd0;
    u_ram_rd[169] = 32'd0;
    u_ram_rd[170] = 32'd0;
    u_ram_rd[171] = 32'd0;
    u_ram_rd[172] = 32'd0;
    u_ram_rd[173] = 32'd0;
    u_ram_rd[174] = 32'd0;
    u_ram_rd[175] = 32'd0;
    u_ram_rd[176] = 32'd0;
    u_ram_rd[177] = 32'd0;
    u_ram_rd[178] = 32'd0;
    u_ram_rd[179] = 32'd0;
    u_ram_rd[180] = 32'd0;
    u_ram_rd[181] = 32'd0;
    u_ram_rd[182] = 32'd0;
    u_ram_rd[183] = 32'd0;
    u_ram_rd[184] = 32'd0;
    u_ram_rd[185] = 32'd0;
    u_ram_rd[186] = 32'd0;
    u_ram_rd[187] = 32'd0;
    u_ram_rd[188] = 32'd0;
    u_ram_rd[189] = 32'd0;
    u_ram_rd[190] = 32'd0;
    u_ram_rd[191] = 32'd0;
    u_ram_rd[192] = 32'd0;
    u_ram_rd[193] = 32'd0;
    u_ram_rd[194] = 32'd0;
    u_ram_rd[195] = 32'd0;
    u_ram_rd[196] = 32'd0;
    u_ram_rd[197] = 32'd0;
    u_ram_rd[198] = 32'd0;
    u_ram_rd[199] = 32'd0;
    u_ram_rd[200] = 32'd0;
    u_ram_rd[201] = 32'd0;
    u_ram_rd[202] = 32'd0;
    u_ram_rd[203] = 32'd0;
    u_ram_rd[204] = 32'd0;
    u_ram_rd[205] = 32'd0;
    u_ram_rd[206] = 32'd0;
    u_ram_rd[207] = 32'd0;
    u_ram_rd[208] = 32'd0;
    u_ram_rd[209] = 32'd0;
    u_ram_rd[210] = 32'd0;
    u_ram_rd[211] = 32'd0;
    u_ram_rd[212] = 32'd0;
    u_ram_rd[213] = 32'd0;
    u_ram_rd[214] = 32'd0;
    u_ram_rd[215] = 32'd0;
    u_ram_rd[216] = 32'd0;
    u_ram_rd[217] = 32'd0;
    u_ram_rd[218] = 32'd0;
    u_ram_rd[219] = 32'd0;
    u_ram_rd[220] = 32'd0;
    u_ram_rd[221] = 32'd0;
    u_ram_rd[222] = 32'd0;
    u_ram_rd[223] = 32'd0;
    u_ram_rd[224] = 32'd0;
    u_ram_rd[225] = 32'd0;
    u_ram_rd[226] = 32'd0;
    u_ram_rd[227] = 32'd0;
    u_ram_rd[228] = 32'd0;
    u_ram_rd[229] = 32'd0;
    u_ram_rd[230] = 32'd0;
    u_ram_rd[231] = 32'd0;
    u_ram_rd[232] = 32'd0;
    u_ram_rd[233] = 32'd0;
    u_ram_rd[234] = 32'd0;
    u_ram_rd[235] = 32'd0;
    u_ram_rd[236] = 32'd0;
    u_ram_rd[237] = 32'd0;
    u_ram_rd[238] = 32'd0;
    u_ram_rd[239] = 32'd0;
    u_ram_rd[240] = 32'd0;
    u_ram_rd[241] = 32'd0;
    u_ram_rd[242] = 32'd0;
    u_ram_rd[243] = 32'd0;
    u_ram_rd[244] = 32'd0;
    u_ram_rd[245] = 32'd0;
    u_ram_rd[246] = 32'd0;
    u_ram_rd[247] = 32'd0;
    u_ram_rd[248] = 32'd0;
    u_ram_rd[249] = 32'd0;
    u_ram_rd[250] = 32'd0;
    u_ram_rd[251] = 32'd0;
    u_ram_rd[252] = 32'd0;
    u_ram_rd[253] = 32'd0;
    u_ram_rd[254] = 32'd0;
    u_ram_rd[255] = 32'd0;
    u_ram_rd[256] = 32'd0;
    u_ram_rd[257] = 32'd0;
    u_ram_rd[258] = 32'd0;
    u_ram_rd[259] = 32'd0;
    u_ram_rd[260] = 32'd0;
    u_ram_rd[261] = 32'd0;
    u_ram_rd[262] = 32'd0;
    u_ram_rd[263] = 32'd0;
    u_ram_rd[264] = 32'd0;
    u_ram_rd[265] = 32'd0;
    u_ram_rd[266] = 32'd0;
    u_ram_rd[267] = 32'd0;
    u_ram_rd[268] = 32'd0;
    u_ram_rd[269] = 32'd0;
    u_ram_rd[270] = 32'd0;
    u_ram_rd[271] = 32'd0;
    u_ram_rd[272] = 32'd0;
    u_ram_rd[273] = 32'd0;
    u_ram_rd[274] = 32'd0;
    u_ram_rd[275] = 32'd0;
    u_ram_rd[276] = 32'd0;
    u_ram_rd[277] = 32'd0;
    u_ram_rd[278] = 32'd0;
    u_ram_rd[279] = 32'd0;
    u_ram_rd[280] = 32'd0;
    u_ram_rd[281] = 32'd0;
    u_ram_rd[282] = 32'd0;
    u_ram_rd[283] = 32'd0;
    u_ram_rd[284] = 32'd0;
    u_ram_rd[285] = 32'd0;
    u_ram_rd[286] = 32'd0;
    u_ram_rd[287] = 32'd0;
    u_ram_rd[288] = 32'd0;
    u_ram_rd[289] = 32'd0;
    u_ram_rd[290] = 32'd0;
    u_ram_rd[291] = 32'd0;
    u_ram_rd[292] = 32'd0;
    u_ram_rd[293] = 32'd0;
    u_ram_rd[294] = 32'd0;
    u_ram_rd[295] = 32'd0;
    u_ram_rd[296] = 32'd0;
    u_ram_rd[297] = 32'd0;
    u_ram_rd[298] = 32'd0;
    u_ram_rd[299] = 32'd0;
    u_ram_rd[300] = 32'd0;
    u_ram_rd[301] = 32'd0;
    u_ram_rd[302] = 32'd0;
    u_ram_rd[303] = 32'd0;
    u_ram_rd[304] = 32'd0;
    u_ram_rd[305] = 32'd0;
    u_ram_rd[306] = 32'd0;
    u_ram_rd[307] = 32'd0;
    u_ram_rd[308] = 32'd0;
    u_ram_rd[309] = 32'd0;
    u_ram_rd[310] = 32'd0;
    u_ram_rd[311] = 32'd0;
    u_ram_rd[312] = 32'd0;
    u_ram_rd[313] = 32'd0;
    u_ram_rd[314] = 32'd0;
    u_ram_rd[315] = 32'd0;
    u_ram_rd[316] = 32'd0;
    u_ram_rd[317] = 32'd0;
    u_ram_rd[318] = 32'd0;
    u_ram_rd[319] = 32'd0;
    u_ram_rd[320] = 32'd0;
    u_ram_rd[321] = 32'd0;
    u_ram_rd[322] = 32'd0;
    u_ram_rd[323] = 32'd0;
    u_ram_rd[324] = 32'd0;
    u_ram_rd[325] = 32'd0;
    u_ram_rd[326] = 32'd0;
    u_ram_rd[327] = 32'd0;
    u_ram_rd[328] = 32'd0;
    u_ram_rd[329] = 32'd0;
    u_ram_rd[330] = 32'd0;
    u_ram_rd[331] = 32'd0;
    u_ram_rd[332] = 32'd0;
    u_ram_rd[333] = 32'd0;
    u_ram_rd[334] = 32'd0;
    u_ram_rd[335] = 32'd0;
    u_ram_rd[336] = 32'd0;
    u_ram_rd[337] = 32'd0;
    u_ram_rd[338] = 32'd0;
    u_ram_rd[339] = 32'd0;
    u_ram_rd[340] = 32'd0;
    u_ram_rd[341] = 32'd0;
    u_ram_rd[342] = 32'd0;
    u_ram_rd[343] = 32'd0;
    u_ram_rd[344] = 32'd0;
    u_ram_rd[345] = 32'd0;
    u_ram_rd[346] = 32'd0;
    u_ram_rd[347] = 32'd0;
    u_ram_rd[348] = 32'd0;
    u_ram_rd[349] = 32'd0;
    u_ram_rd[350] = 32'd0;
    u_ram_rd[351] = 32'd0;
    u_ram_rd[352] = 32'd0;
    u_ram_rd[353] = 32'd0;
    u_ram_rd[354] = 32'd0;
    u_ram_rd[355] = 32'd0;
    u_ram_rd[356] = 32'd0;
    u_ram_rd[357] = 32'd0;
    u_ram_rd[358] = 32'd0;
    u_ram_rd[359] = 32'd0;
    u_ram_rd[360] = 32'd0;
    u_ram_rd[361] = 32'd0;
    u_ram_rd[362] = 32'd0;
    u_ram_rd[363] = 32'd0;
    u_ram_rd[364] = 32'd0;
    u_ram_rd[365] = 32'd0;
    u_ram_rd[366] = 32'd0;
    u_ram_rd[367] = 32'd0;
    u_ram_rd[368] = 32'd0;
    u_ram_rd[369] = 32'd0;
    u_ram_rd[370] = 32'd0;
    u_ram_rd[371] = 32'd0;
    u_ram_rd[372] = 32'd0;
    u_ram_rd[373] = 32'd0;
    u_ram_rd[374] = 32'd0;
    u_ram_rd[375] = 32'd0;
    u_ram_rd[376] = 32'd0;
    u_ram_rd[377] = 32'd0;
    u_ram_rd[378] = 32'd0;
    u_ram_rd[379] = 32'd0;
    u_ram_rd[380] = 32'd0;
    u_ram_rd[381] = 32'd0;
    u_ram_rd[382] = 32'd0;
    u_ram_rd[383] = 32'd0;
    u_ram_rd[384] = 32'd0;
    u_ram_rd[385] = 32'd0;
    u_ram_rd[386] = 32'd0;
    u_ram_rd[387] = 32'd0;
    u_ram_rd[388] = 32'd0;
    u_ram_rd[389] = 32'd0;
    u_ram_rd[390] = 32'd0;
    u_ram_rd[391] = 32'd0;
    u_ram_rd[392] = 32'd0;
    u_ram_rd[393] = 32'd0;
    u_ram_rd[394] = 32'd0;
    u_ram_rd[395] = 32'd0;
    u_ram_rd[396] = 32'd0;
    u_ram_rd[397] = 32'd0;
    u_ram_rd[398] = 32'd0;
    u_ram_rd[399] = 32'd0;
    u_ram_rd[400] = 32'd0;
    u_ram_rd[401] = 32'd0;
    u_ram_rd[402] = 32'd0;
    u_ram_rd[403] = 32'd0;
    u_ram_rd[404] = 32'd0;
    u_ram_rd[405] = 32'd0;
    u_ram_rd[406] = 32'd0;
    u_ram_rd[407] = 32'd0;
    u_ram_rd[408] = 32'd0;
    u_ram_rd[409] = 32'd0;
    u_ram_rd[410] = 32'd0;
    u_ram_rd[411] = 32'd0;
    u_ram_rd[412] = 32'd0;
    u_ram_rd[413] = 32'd0;
    u_ram_rd[414] = 32'd0;
    u_ram_rd[415] = 32'd0;
    u_ram_rd[416] = 32'd0;
    u_ram_rd[417] = 32'd0;
    u_ram_rd[418] = 32'd0;
    u_ram_rd[419] = 32'd0;
    u_ram_rd[420] = 32'd0;
    u_ram_rd[421] = 32'd0;
    u_ram_rd[422] = 32'd0;
    u_ram_rd[423] = 32'd0;
    u_ram_rd[424] = 32'd0;
    u_ram_rd[425] = 32'd0;
    u_ram_rd[426] = 32'd0;
    u_ram_rd[427] = 32'd0;
    u_ram_rd[428] = 32'd0;
    u_ram_rd[429] = 32'd0;
    u_ram_rd[430] = 32'd0;
    u_ram_rd[431] = 32'd0;
    u_ram_rd[432] = 32'd0;
    u_ram_rd[433] = 32'd0;
    u_ram_rd[434] = 32'd0;
    u_ram_rd[435] = 32'd0;
    u_ram_rd[436] = 32'd0;
    u_ram_rd[437] = 32'd0;
    u_ram_rd[438] = 32'd0;
    u_ram_rd[439] = 32'd0;
    u_ram_rd[440] = 32'd0;
    u_ram_rd[441] = 32'd0;
    u_ram_rd[442] = 32'd0;
    u_ram_rd[443] = 32'd0;
    u_ram_rd[444] = 32'd0;
    u_ram_rd[445] = 32'd0;
    u_ram_rd[446] = 32'd0;
    u_ram_rd[447] = 32'd0;
    u_ram_rd[448] = 32'd0;
    u_ram_rd[449] = 32'd0;
    u_ram_rd[450] = 32'd0;
    u_ram_rd[451] = 32'd0;
    u_ram_rd[452] = 32'd0;
    u_ram_rd[453] = 32'd0;
    u_ram_rd[454] = 32'd0;
    u_ram_rd[455] = 32'd0;
    u_ram_rd[456] = 32'd0;
    u_ram_rd[457] = 32'd0;
    u_ram_rd[458] = 32'd0;
    u_ram_rd[459] = 32'd0;
    u_ram_rd[460] = 32'd0;
    u_ram_rd[461] = 32'd0;
    u_ram_rd[462] = 32'd0;
    u_ram_rd[463] = 32'd0;
    u_ram_rd[464] = 32'd0;
    u_ram_rd[465] = 32'd0;
    u_ram_rd[466] = 32'd0;
    u_ram_rd[467] = 32'd0;
    u_ram_rd[468] = 32'd0;
    u_ram_rd[469] = 32'd0;
    u_ram_rd[470] = 32'd0;
    u_ram_rd[471] = 32'd0;
    u_ram_rd[472] = 32'd0;
    u_ram_rd[473] = 32'd0;
    u_ram_rd[474] = 32'd0;
    u_ram_rd[475] = 32'd0;
    u_ram_rd[476] = 32'd0;
    u_ram_rd[477] = 32'd0;
    u_ram_rd[478] = 32'd0;
    u_ram_rd[479] = 32'd0;
    u_ram_rd[480] = 32'd0;
    u_ram_rd[481] = 32'd0;
    u_ram_rd[482] = 32'd0;
    u_ram_rd[483] = 32'd0;
    u_ram_rd[484] = 32'd0;
    u_ram_rd[485] = 32'd0;
    u_ram_rd[486] = 32'd0;
    u_ram_rd[487] = 32'd0;
    u_ram_rd[488] = 32'd0;
    u_ram_rd[489] = 32'd0;
    u_ram_rd[490] = 32'd0;
    u_ram_rd[491] = 32'd0;
    u_ram_rd[492] = 32'd0;
    u_ram_rd[493] = 32'd0;
    u_ram_rd[494] = 32'd0;
    u_ram_rd[495] = 32'd0;
    u_ram_rd[496] = 32'd0;
    u_ram_rd[497] = 32'd0;
    u_ram_rd[498] = 32'd0;
    u_ram_rd[499] = 32'd0;
    u_ram_rd[500] = 32'd0;
    u_ram_rd[501] = 32'd0;
    u_ram_rd[502] = 32'd0;
    u_ram_rd[503] = 32'd0;
    u_ram_rd[504] = 32'd0;
    u_ram_rd[505] = 32'd0;
    u_ram_rd[506] = 32'd0;
    u_ram_rd[507] = 32'd0;
    u_ram_rd[508] = 32'd0;
    u_ram_rd[509] = 32'd0;
    u_ram_rd[510] = 32'd0;
    u_ram_rd[511] = 32'd0;
    u_ram_rd[512] = 32'd0;
    u_ram_rd[513] = 32'd0;
    u_ram_rd[514] = 32'd0;
    u_ram_rd[515] = 32'd0;
    u_ram_rd[516] = 32'd0;
    u_ram_rd[517] = 32'd0;
    u_ram_rd[518] = 32'd0;
    u_ram_rd[519] = 32'd0;
    u_ram_rd[520] = 32'd0;
    u_ram_rd[521] = 32'd0;
    u_ram_rd[522] = 32'd0;
    u_ram_rd[523] = 32'd0;
    u_ram_rd[524] = 32'd0;
    u_ram_rd[525] = 32'd0;
    u_ram_rd[526] = 32'd0;
    u_ram_rd[527] = 32'd0;
    u_ram_rd[528] = 32'd0;
    u_ram_rd[529] = 32'd0;
    u_ram_rd[530] = 32'd0;
    u_ram_rd[531] = 32'd0;
    u_ram_rd[532] = 32'd0;
    u_ram_rd[533] = 32'd0;
    u_ram_rd[534] = 32'd0;
    u_ram_rd[535] = 32'd0;
    u_ram_rd[536] = 32'd0;
    u_ram_rd[537] = 32'd0;
    u_ram_rd[538] = 32'd0;
    u_ram_rd[539] = 32'd0;
    u_ram_rd[540] = 32'd0;
    u_ram_rd[541] = 32'd0;
    u_ram_rd[542] = 32'd0;
    u_ram_rd[543] = 32'd0;
    u_ram_rd[544] = 32'd0;
    u_ram_rd[545] = 32'd0;
    u_ram_rd[546] = 32'd0;
    u_ram_rd[547] = 32'd0;
    u_ram_rd[548] = 32'd0;
    u_ram_rd[549] = 32'd0;
    u_ram_rd[550] = 32'd0;
    u_ram_rd[551] = 32'd0;
    u_ram_rd[552] = 32'd0;
    u_ram_rd[553] = 32'd0;
    u_ram_rd[554] = 32'd0;
    u_ram_rd[555] = 32'd0;
    u_ram_rd[556] = 32'd0;
    u_ram_rd[557] = 32'd0;
    u_ram_rd[558] = 32'd0;
    u_ram_rd[559] = 32'd0;
    u_ram_rd[560] = 32'd0;
    u_ram_rd[561] = 32'd0;
    u_ram_rd[562] = 32'd0;
    u_ram_rd[563] = 32'd0;
    u_ram_rd[564] = 32'd0;
    u_ram_rd[565] = 32'd0;
    u_ram_rd[566] = 32'd0;
    u_ram_rd[567] = 32'd0;
    u_ram_rd[568] = 32'd0;
    u_ram_rd[569] = 32'd0;
    u_ram_rd[570] = 32'd0;
    u_ram_rd[571] = 32'd0;
    u_ram_rd[572] = 32'd0;
    u_ram_rd[573] = 32'd0;
    u_ram_rd[574] = 32'd0;
    u_ram_rd[575] = 32'd0;
    u_ram_rd[576] = 32'd0;
    u_ram_rd[577] = 32'd0;
    u_ram_rd[578] = 32'd0;
    u_ram_rd[579] = 32'd0;
    u_ram_rd[580] = 32'd0;
    u_ram_rd[581] = 32'd0;
    u_ram_rd[582] = 32'd0;
    u_ram_rd[583] = 32'd0;
    u_ram_rd[584] = 32'd0;
    u_ram_rd[585] = 32'd0;
    u_ram_rd[586] = 32'd0;
    u_ram_rd[587] = 32'd0;
    u_ram_rd[588] = 32'd0;
    u_ram_rd[589] = 32'd0;
    u_ram_rd[590] = 32'd0;
    u_ram_rd[591] = 32'd0;
    u_ram_rd[592] = 32'd0;
    u_ram_rd[593] = 32'd0;
    u_ram_rd[594] = 32'd0;
    u_ram_rd[595] = 32'd0;
    u_ram_rd[596] = 32'd0;
    u_ram_rd[597] = 32'd0;
    u_ram_rd[598] = 32'd0;
    u_ram_rd[599] = 32'd0;
    u_ram_rd[600] = 32'd0;
    u_ram_rd[601] = 32'd0;
    u_ram_rd[602] = 32'd0;
    u_ram_rd[603] = 32'd0;
    u_ram_rd[604] = 32'd0;
    u_ram_rd[605] = 32'd0;
    u_ram_rd[606] = 32'd0;
    u_ram_rd[607] = 32'd0;
    u_ram_rd[608] = 32'd0;
    u_ram_rd[609] = 32'd0;
    u_ram_rd[610] = 32'd0;
    u_ram_rd[611] = 32'd0;
    u_ram_rd[612] = 32'd0;
    u_ram_rd[613] = 32'd0;
    u_ram_rd[614] = 32'd0;
    u_ram_rd[615] = 32'd0;
    u_ram_rd[616] = 32'd0;
    u_ram_rd[617] = 32'd0;
    u_ram_rd[618] = 32'd0;
    u_ram_rd[619] = 32'd0;
    u_ram_rd[620] = 32'd0;
    u_ram_rd[621] = 32'd0;
    u_ram_rd[622] = 32'd0;
    u_ram_rd[623] = 32'd0;
    u_ram_rd[624] = 32'd0;
    u_ram_rd[625] = 32'd0;
    u_ram_rd[626] = 32'd0;
    u_ram_rd[627] = 32'd0;
    u_ram_rd[628] = 32'd0;
    u_ram_rd[629] = 32'd0;
    u_ram_rd[630] = 32'd0;
    u_ram_rd[631] = 32'd0;
    u_ram_rd[632] = 32'd0;
    u_ram_rd[633] = 32'd0;
    u_ram_rd[634] = 32'd0;
    u_ram_rd[635] = 32'd0;
    u_ram_rd[636] = 32'd0;
    u_ram_rd[637] = 32'd0;
    u_ram_rd[638] = 32'd0;
    u_ram_rd[639] = 32'd0;
    u_ram_rd[640] = 32'd0;
    u_ram_rd[641] = 32'd0;
    u_ram_rd[642] = 32'd0;
    u_ram_rd[643] = 32'd0;
    u_ram_rd[644] = 32'd0;
    u_ram_rd[645] = 32'd0;
    u_ram_rd[646] = 32'd0;
    u_ram_rd[647] = 32'd0;
    u_ram_rd[648] = 32'd0;
    u_ram_rd[649] = 32'd0;
    u_ram_rd[650] = 32'd0;
    u_ram_rd[651] = 32'd0;
    u_ram_rd[652] = 32'd0;
    u_ram_rd[653] = 32'd0;
    u_ram_rd[654] = 32'd0;
    u_ram_rd[655] = 32'd0;
    u_ram_rd[656] = 32'd0;
    u_ram_rd[657] = 32'd0;
    u_ram_rd[658] = 32'd0;
    u_ram_rd[659] = 32'd0;
    u_ram_rd[660] = 32'd0;
    u_ram_rd[661] = 32'd0;
    u_ram_rd[662] = 32'd0;
    u_ram_rd[663] = 32'd0;
    u_ram_rd[664] = 32'd0;
    u_ram_rd[665] = 32'd0;
    u_ram_rd[666] = 32'd0;
    u_ram_rd[667] = 32'd0;
    u_ram_rd[668] = 32'd0;
    u_ram_rd[669] = 32'd0;
    u_ram_rd[670] = 32'd0;
    u_ram_rd[671] = 32'd0;
    u_ram_rd[672] = 32'd0;
    u_ram_rd[673] = 32'd0;
    u_ram_rd[674] = 32'd0;
    u_ram_rd[675] = 32'd0;
    u_ram_rd[676] = 32'd0;
    u_ram_rd[677] = 32'd0;
    u_ram_rd[678] = 32'd0;
    u_ram_rd[679] = 32'd0;
    u_ram_rd[680] = 32'd0;
    u_ram_rd[681] = 32'd0;
    u_ram_rd[682] = 32'd0;
    u_ram_rd[683] = 32'd0;
    u_ram_rd[684] = 32'd0;
    u_ram_rd[685] = 32'd0;
    u_ram_rd[686] = 32'd0;
    u_ram_rd[687] = 32'd0;
    u_ram_rd[688] = 32'd0;
    u_ram_rd[689] = 32'd0;
    u_ram_rd[690] = 32'd0;
    u_ram_rd[691] = 32'd0;
    u_ram_rd[692] = 32'd0;
    u_ram_rd[693] = 32'd0;
    u_ram_rd[694] = 32'd0;
    u_ram_rd[695] = 32'd0;
    u_ram_rd[696] = 32'd0;
    u_ram_rd[697] = 32'd0;
    u_ram_rd[698] = 32'd0;
    u_ram_rd[699] = 32'd0;
    u_ram_rd[700] = 32'd0;
    u_ram_rd[701] = 32'd0;
    u_ram_rd[702] = 32'd0;
    u_ram_rd[703] = 32'd0;
    u_ram_rd[704] = 32'd0;
    u_ram_rd[705] = 32'd0;
    u_ram_rd[706] = 32'd0;
    u_ram_rd[707] = 32'd0;
    u_ram_rd[708] = 32'd0;
    u_ram_rd[709] = 32'd0;
    u_ram_rd[710] = 32'd0;
    u_ram_rd[711] = 32'd0;
    u_ram_rd[712] = 32'd0;
    u_ram_rd[713] = 32'd0;
    u_ram_rd[714] = 32'd0;
    u_ram_rd[715] = 32'd0;
    u_ram_rd[716] = 32'd0;
    u_ram_rd[717] = 32'd0;
    u_ram_rd[718] = 32'd0;
    u_ram_rd[719] = 32'd0;
    u_ram_rd[720] = 32'd0;
    u_ram_rd[721] = 32'd0;
    u_ram_rd[722] = 32'd0;
    u_ram_rd[723] = 32'd0;
    u_ram_rd[724] = 32'd0;
    u_ram_rd[725] = 32'd0;
    u_ram_rd[726] = 32'd0;
    u_ram_rd[727] = 32'd0;
    u_ram_rd[728] = 32'd0;
    u_ram_rd[729] = 32'd0;
    u_ram_rd[730] = 32'd0;
    u_ram_rd[731] = 32'd0;
    u_ram_rd[732] = 32'd0;
    u_ram_rd[733] = 32'd0;
    u_ram_rd[734] = 32'd0;
    u_ram_rd[735] = 32'd0;
    u_ram_rd[736] = 32'd0;
    u_ram_rd[737] = 32'd0;
    u_ram_rd[738] = 32'd0;
    u_ram_rd[739] = 32'd0;
    u_ram_rd[740] = 32'd0;
    u_ram_rd[741] = 32'd0;
    u_ram_rd[742] = 32'd0;
    u_ram_rd[743] = 32'd0;
    u_ram_rd[744] = 32'd0;
    u_ram_rd[745] = 32'd0;
    u_ram_rd[746] = 32'd0;
    u_ram_rd[747] = 32'd0;
    u_ram_rd[748] = 32'd0;
    u_ram_rd[749] = 32'd0;
    u_ram_rd[750] = 32'd0;
    u_ram_rd[751] = 32'd0;
    u_ram_rd[752] = 32'd0;
    u_ram_rd[753] = 32'd0;
    u_ram_rd[754] = 32'd0;
    u_ram_rd[755] = 32'd0;
    u_ram_rd[756] = 32'd0;
    u_ram_rd[757] = 32'd0;
    u_ram_rd[758] = 32'd0;
    u_ram_rd[759] = 32'd0;
    u_ram_rd[760] = 32'd0;
    u_ram_rd[761] = 32'd0;
    u_ram_rd[762] = 32'd0;
    u_ram_rd[763] = 32'd0;
    u_ram_rd[764] = 32'd0;
    u_ram_rd[765] = 32'd0;
    u_ram_rd[766] = 32'd0;
    u_ram_rd[767] = 32'd0;
    u_ram_rd[768] = 32'd0;
    u_ram_rd[769] = 32'd0;
    u_ram_rd[770] = 32'd0;
    u_ram_rd[771] = 32'd0;
    u_ram_rd[772] = 32'd0;
    u_ram_rd[773] = 32'd0;
    u_ram_rd[774] = 32'd0;
    u_ram_rd[775] = 32'd0;
    u_ram_rd[776] = 32'd0;
    u_ram_rd[777] = 32'd0;
    u_ram_rd[778] = 32'd0;
    u_ram_rd[779] = 32'd0;
    u_ram_rd[780] = 32'd0;
    u_ram_rd[781] = 32'd0;
    u_ram_rd[782] = 32'd0;
    u_ram_rd[783] = 32'd0;
    u_ram_rd[784] = 32'd0;
    u_ram_rd[785] = 32'd0;
    u_ram_rd[786] = 32'd0;
    u_ram_rd[787] = 32'd0;
    u_ram_rd[788] = 32'd0;
    u_ram_rd[789] = 32'd0;
    u_ram_rd[790] = 32'd0;
    u_ram_rd[791] = 32'd0;
    u_ram_rd[792] = 32'd0;
    u_ram_rd[793] = 32'd0;
    u_ram_rd[794] = 32'd0;
    u_ram_rd[795] = 32'd0;
    u_ram_rd[796] = 32'd0;
    u_ram_rd[797] = 32'd0;
    u_ram_rd[798] = 32'd0;
    u_ram_rd[799] = 32'd0;
    u_ram_rd[800] = 32'd0;
    u_ram_rd[801] = 32'd0;
    u_ram_rd[802] = 32'd0;
    u_ram_rd[803] = 32'd0;
    u_ram_rd[804] = 32'd0;
    u_ram_rd[805] = 32'd0;
    u_ram_rd[806] = 32'd0;
    u_ram_rd[807] = 32'd0;
    u_ram_rd[808] = 32'd0;
    u_ram_rd[809] = 32'd0;
    u_ram_rd[810] = 32'd0;
    u_ram_rd[811] = 32'd0;
    u_ram_rd[812] = 32'd0;
    u_ram_rd[813] = 32'd0;
    u_ram_rd[814] = 32'd0;
    u_ram_rd[815] = 32'd0;
    u_ram_rd[816] = 32'd0;
    u_ram_rd[817] = 32'd0;
    u_ram_rd[818] = 32'd0;
    u_ram_rd[819] = 32'd0;
    u_ram_rd[820] = 32'd0;
    u_ram_rd[821] = 32'd0;
    u_ram_rd[822] = 32'd0;
    u_ram_rd[823] = 32'd0;
    u_ram_rd[824] = 32'd0;
    u_ram_rd[825] = 32'd0;
    u_ram_rd[826] = 32'd0;
    u_ram_rd[827] = 32'd0;
    u_ram_rd[828] = 32'd0;
    u_ram_rd[829] = 32'd0;
    u_ram_rd[830] = 32'd0;
    u_ram_rd[831] = 32'd0;
    u_ram_rd[832] = 32'd0;
    u_ram_rd[833] = 32'd0;
    u_ram_rd[834] = 32'd0;
    u_ram_rd[835] = 32'd0;
    u_ram_rd[836] = 32'd0;
    u_ram_rd[837] = 32'd0;
    u_ram_rd[838] = 32'd0;
    u_ram_rd[839] = 32'd0;
    u_ram_rd[840] = 32'd0;
    u_ram_rd[841] = 32'd0;
    u_ram_rd[842] = 32'd0;
    u_ram_rd[843] = 32'd0;
    u_ram_rd[844] = 32'd0;
    u_ram_rd[845] = 32'd0;
    u_ram_rd[846] = 32'd0;
    u_ram_rd[847] = 32'd0;
    u_ram_rd[848] = 32'd0;
    u_ram_rd[849] = 32'd0;
    u_ram_rd[850] = 32'd0;
    u_ram_rd[851] = 32'd0;
    u_ram_rd[852] = 32'd0;
    u_ram_rd[853] = 32'd0;
    u_ram_rd[854] = 32'd0;
    u_ram_rd[855] = 32'd0;
    u_ram_rd[856] = 32'd0;
    u_ram_rd[857] = 32'd0;
    u_ram_rd[858] = 32'd0;
    u_ram_rd[859] = 32'd0;
    u_ram_rd[860] = 32'd0;
    u_ram_rd[861] = 32'd0;
    u_ram_rd[862] = 32'd0;
    u_ram_rd[863] = 32'd0;
    u_ram_rd[864] = 32'd0;
    u_ram_rd[865] = 32'd0;
    u_ram_rd[866] = 32'd0;
    u_ram_rd[867] = 32'd0;
    u_ram_rd[868] = 32'd0;
    u_ram_rd[869] = 32'd0;
    u_ram_rd[870] = 32'd0;
    u_ram_rd[871] = 32'd0;
    u_ram_rd[872] = 32'd0;
    u_ram_rd[873] = 32'd0;
    u_ram_rd[874] = 32'd0;
    u_ram_rd[875] = 32'd0;
    u_ram_rd[876] = 32'd0;
    u_ram_rd[877] = 32'd0;
    u_ram_rd[878] = 32'd0;
    u_ram_rd[879] = 32'd0;
    u_ram_rd[880] = 32'd0;
    u_ram_rd[881] = 32'd0;
    u_ram_rd[882] = 32'd0;
    u_ram_rd[883] = 32'd0;
    u_ram_rd[884] = 32'd0;
    u_ram_rd[885] = 32'd0;
    u_ram_rd[886] = 32'd0;
    u_ram_rd[887] = 32'd0;
    u_ram_rd[888] = 32'd0;
    u_ram_rd[889] = 32'd0;
    u_ram_rd[890] = 32'd0;
    u_ram_rd[891] = 32'd0;
    u_ram_rd[892] = 32'd0;
    u_ram_rd[893] = 32'd0;
    u_ram_rd[894] = 32'd0;
    u_ram_rd[895] = 32'd0;
    u_ram_rd[896] = 32'd0;
    u_ram_rd[897] = 32'd0;
    u_ram_rd[898] = 32'd0;
    u_ram_rd[899] = 32'd0;
    u_ram_rd[900] = 32'd0;
    u_ram_rd[901] = 32'd0;
    u_ram_rd[902] = 32'd0;
    u_ram_rd[903] = 32'd0;
    u_ram_rd[904] = 32'd0;
    u_ram_rd[905] = 32'd0;
    u_ram_rd[906] = 32'd0;
    u_ram_rd[907] = 32'd0;
    u_ram_rd[908] = 32'd0;
    u_ram_rd[909] = 32'd0;
    u_ram_rd[910] = 32'd0;
    u_ram_rd[911] = 32'd0;
    u_ram_rd[912] = 32'd0;
    u_ram_rd[913] = 32'd0;
    u_ram_rd[914] = 32'd0;
    u_ram_rd[915] = 32'd0;
    u_ram_rd[916] = 32'd0;
    u_ram_rd[917] = 32'd0;
    u_ram_rd[918] = 32'd0;
    u_ram_rd[919] = 32'd0;
    u_ram_rd[920] = 32'd0;
    u_ram_rd[921] = 32'd0;
    u_ram_rd[922] = 32'd0;
    u_ram_rd[923] = 32'd0;
    u_ram_rd[924] = 32'd0;
    u_ram_rd[925] = 32'd0;
    u_ram_rd[926] = 32'd0;
    u_ram_rd[927] = 32'd0;
    u_ram_rd[928] = 32'd0;
    u_ram_rd[929] = 32'd0;
    u_ram_rd[930] = 32'd0;
    u_ram_rd[931] = 32'd0;
    u_ram_rd[932] = 32'd0;
    u_ram_rd[933] = 32'd0;
    u_ram_rd[934] = 32'd0;
    u_ram_rd[935] = 32'd0;
    u_ram_rd[936] = 32'd0;
    u_ram_rd[937] = 32'd0;
    u_ram_rd[938] = 32'd0;
    u_ram_rd[939] = 32'd0;
    u_ram_rd[940] = 32'd0;
    u_ram_rd[941] = 32'd0;
    u_ram_rd[942] = 32'd0;
    u_ram_rd[943] = 32'd0;
    u_ram_rd[944] = 32'd0;
    u_ram_rd[945] = 32'd0;
    u_ram_rd[946] = 32'd0;
    u_ram_rd[947] = 32'd0;
    u_ram_rd[948] = 32'd0;
    u_ram_rd[949] = 32'd0;
    u_ram_rd[950] = 32'd0;
    u_ram_rd[951] = 32'd0;
    u_ram_rd[952] = 32'd0;
    u_ram_rd[953] = 32'd0;
    u_ram_rd[954] = 32'd0;
    u_ram_rd[955] = 32'd0;
    u_ram_rd[956] = 32'd0;
    u_ram_rd[957] = 32'd0;
    u_ram_rd[958] = 32'd0;
    u_ram_rd[959] = 32'd0;
    u_ram_rd[960] = 32'd0;
    u_ram_rd[961] = 32'd0;
    u_ram_rd[962] = 32'd0;
    u_ram_rd[963] = 32'd0;
    u_ram_rd[964] = 32'd0;
    u_ram_rd[965] = 32'd0;
    u_ram_rd[966] = 32'd0;
    u_ram_rd[967] = 32'd0;
    u_ram_rd[968] = 32'd0;
    u_ram_rd[969] = 32'd0;
    u_ram_rd[970] = 32'd0;
    u_ram_rd[971] = 32'd0;
    u_ram_rd[972] = 32'd0;
    u_ram_rd[973] = 32'd0;
    u_ram_rd[974] = 32'd0;
    u_ram_rd[975] = 32'd0;
    u_ram_rd[976] = 32'd0;
    u_ram_rd[977] = 32'd0;
    u_ram_rd[978] = 32'd0;
    u_ram_rd[979] = 32'd0;
    u_ram_rd[980] = 32'd0;
    u_ram_rd[981] = 32'd0;
    u_ram_rd[982] = 32'd0;
    u_ram_rd[983] = 32'd0;
    u_ram_rd[984] = 32'd0;
    u_ram_rd[985] = 32'd0;
    u_ram_rd[986] = 32'd0;
    u_ram_rd[987] = 32'd0;
    u_ram_rd[988] = 32'd0;
    u_ram_rd[989] = 32'd0;
    u_ram_rd[990] = 32'd0;
    u_ram_rd[991] = 32'd0;
    u_ram_rd[992] = 32'd0;
    u_ram_rd[993] = 32'd0;
    u_ram_rd[994] = 32'd0;
    u_ram_rd[995] = 32'd0;
    u_ram_rd[996] = 32'd0;
    u_ram_rd[997] = 32'd0;
    u_ram_rd[998] = 32'd0;
    u_ram_rd[999] = 32'd0;
    u_ram_rd[1000] = 32'd0;
    u_ram_rd[1001] = 32'd0;
    u_ram_rd[1002] = 32'd0;
    u_ram_rd[1003] = 32'd0;
    u_ram_rd[1004] = 32'd0;
    u_ram_rd[1005] = 32'd0;
    u_ram_rd[1006] = 32'd0;
    u_ram_rd[1007] = 32'd0;
    u_ram_rd[1008] = 32'd0;
    u_ram_rd[1009] = 32'd0;
    u_ram_rd[1010] = 32'd0;
    u_ram_rd[1011] = 32'd0;
    u_ram_rd[1012] = 32'd0;
    u_ram_rd[1013] = 32'd0;
    u_ram_rd[1014] = 32'd0;
    u_ram_rd[1015] = 32'd0;
    u_ram_rd[1016] = 32'd0;
    u_ram_rd[1017] = 32'd0;
    u_ram_rd[1018] = 32'd0;
    u_ram_rd[1019] = 32'd0;
    u_ram_rd[1020] = 32'd0;
    u_ram_rd[1021] = 32'd0;
    u_ram_rd[1022] = 32'd0;
    u_ram_rd[1023] = 32'd0;
  end
  always @(posedge clk) begin
    if (u_ram_w_en)
      u_ram_rd[o_wb_adr[11:2]] <= i_wb_dat;
  end
  reg [9:0] _0_;
  always @(posedge clk) begin
    _0_ <= o_wb_adr[11:2];
  end
  assign u_ram_r_data = u_ram_rd[_0_];
  (* src = "rtl/soc.py:105" *)
  reg [31:0] u_rom_rd [1023:0];
  initial begin
    u_rom_rd[0] = 32'd69911;
    u_rom_rd[1] = 32'd65811;
    u_rom_rd[2] = 32'd151;
    u_rom_rd[3] = 32'd1287684327;
    u_rom_rd[4] = 32'd111;
    u_rom_rd[5] = 32'd4278255891;
    u_rom_rd[6] = 32'd1123875;
    u_rom_rd[7] = 32'd8463395;
    u_rom_rd[8] = 32'd345475;
    u_rom_rd[9] = 32'd33914979;
    u_rom_rd[10] = 32'd1377299;
    u_rom_rd[11] = 32'd267777299;
    u_rom_rd[12] = 32'd151;
    u_rom_rd[13] = 32'd37781735;
    u_rom_rd[14] = 32'd279939;
    u_rom_rd[15] = 32'd1311763;
    u_rom_rd[16] = 32'd4261779171;
    u_rom_rd[17] = 32'd8463363;
    u_rom_rd[18] = 32'd12656771;
    u_rom_rd[19] = 32'd16843027;
    u_rom_rd[20] = 32'd32871;
    u_rom_rd[21] = 32'd268436919;
    u_rom_rd[22] = 32'd100664851;
    u_rom_rd[23] = 32'd5621379;
    u_rom_rd[24] = 32'd101119635;
    u_rom_rd[25] = 32'd4274429155;
    u_rom_rd[26] = 32'd268436919;
    u_rom_rd[27] = 32'd10846243;
    u_rom_rd[28] = 32'd32871;
    u_rom_rd[29] = 32'd4278255891;
    u_rom_rd[30] = 32'd1123875;
    u_rom_rd[31] = 32'd8463395;
    u_rom_rd[32] = 32'd9511459;
    u_rom_rd[33] = 32'd328723;
    u_rom_rd[34] = 32'd4543763;
    u_rom_rd[35] = 32'd5559;
    u_rom_rd[36] = 32'd3721757843;
    u_rom_rd[37] = 32'd9766195;
    u_rom_rd[38] = 32'd345347;
    u_rom_rd[39] = 32'd151;
    u_rom_rd[40] = 32'd4219502823;
    u_rom_rd[41] = 32'd16020755;
    u_rom_rd[42] = 32'd9766195;
    u_rom_rd[43] = 32'd345347;
    u_rom_rd[44] = 32'd4269187;
    u_rom_rd[45] = 32'd8463363;
    u_rom_rd[46] = 32'd12656771;
    u_rom_rd[47] = 32'd16843027;
    u_rom_rd[48] = 32'd791;
    u_rom_rd[49] = 32'd4181917799;
    u_rom_rd[50] = 32'd4278255891;
    u_rom_rd[51] = 32'd1123875;
    u_rom_rd[52] = 32'd8463395;
    u_rom_rd[53] = 32'd328723;
    u_rom_rd[54] = 32'd8738067;
    u_rom_rd[55] = 32'd151;
    u_rom_rd[56] = 32'd4185948391;
    u_rom_rd[57] = 32'd267678995;
    u_rom_rd[58] = 32'd8463363;
    u_rom_rd[59] = 32'd12656771;
    u_rom_rd[60] = 32'd16843027;
    u_rom_rd[61] = 32'd791;
    u_rom_rd[62] = 32'd4160946279;
    u_rom_rd[63] = 32'd4278255891;
    u_rom_rd[64] = 32'd1123875;
    u_rom_rd[65] = 32'd8463395;
    u_rom_rd[66] = 32'd328723;
    u_rom_rd[67] = 32'd17126675;
    u_rom_rd[68] = 32'd151;
    u_rom_rd[69] = 32'd4219502823;
    u_rom_rd[70] = 32'd66871;
    u_rom_rd[71] = 32'd4294247699;
    u_rom_rd[72] = 32'd10777907;
    u_rom_rd[73] = 32'd8463363;
    u_rom_rd[74] = 32'd12656771;
    u_rom_rd[75] = 32'd16843027;
    u_rom_rd[76] = 32'd791;
    u_rom_rd[77] = 32'd4186112103;
    u_rom_rd[78] = 32'd4261478675;
    u_rom_rd[79] = 32'd1125923;
    u_rom_rd[80] = 32'd8465443;
    u_rom_rd[81] = 32'd9513507;
    u_rom_rd[82] = 32'd18950179;
    u_rom_rd[83] = 32'd1171;
    u_rom_rd[84] = 32'd3435976119;
    u_rom_rd[85] = 32'd3436545427;
    u_rom_rd[86] = 32'd10487827;
    u_rom_rd[87] = 32'd67731;
    u_rom_rd[88] = 32'd9439123;
    u_rom_rd[89] = 32'd329235;
    u_rom_rd[90] = 32'd297235;
    u_rom_rd[91] = 32'd45430067;
    u_rom_rd[92] = 32'd3495187;
    u_rom_rd[93] = 32'd50661043;
    u_rom_rd[94] = 32'd1087768243;
    u_rom_rd[95] = 32'd50783891;
    u_rom_rd[96] = 32'd1344659;
    u_rom_rd[97] = 32'd268006419;
    u_rom_rd[98] = 32'd8947507;
    u_rom_rd[99] = 32'd14090275;
    u_rom_rd[100] = 32'd4240960227;
    u_rom_rd[101] = 32'd267711763;
    u_rom_rd[102] = 32'd33885283;
    u_rom_rd[103] = 32'd267842835;
    u_rom_rd[104] = 32'd151;
    u_rom_rd[105] = 32'd3946873063;
    u_rom_rd[106] = 32'd268006675;
    u_rom_rd[107] = 32'd33882723;
    u_rom_rd[108] = 32'd4293986579;
    u_rom_rd[109] = 32'd8979763;
    u_rom_rd[110] = 32'd345347;
    u_rom_rd[111] = 32'd4294182035;
    u_rom_rd[112] = 32'd151;
    u_rom_rd[113] = 32'd3913318631;
    u_rom_rd[114] = 32'd295955;
    u_rom_rd[115] = 32'd4261713123;
    u_rom_rd[116] = 32'd16853251;
    u_rom_rd[117] = 32'd21046403;
    u_rom_rd[118] = 32'd25240579;
    u_rom_rd[119] = 32'd29433987;
    u_rom_rd[120] = 32'd33620243;
    u_rom_rd[121] = 32'd32871;
    u_rom_rd[122] = 32'd4261478675;
    u_rom_rd[123] = 32'd1125923;
    u_rom_rd[124] = 32'd8465443;
    u_rom_rd[125] = 32'd9513507;
    u_rom_rd[126] = 32'd18950179;
    u_rom_rd[127] = 32'd19998243;
    u_rom_rd[128] = 32'd330003;
    u_rom_rd[129] = 32'd5431;
    u_rom_rd[130] = 32'd3527738643;
    u_rom_rd[131] = 32'd151;
    u_rom_rd[132] = 32'd3766517991;
    u_rom_rd[133] = 32'd1171;
    u_rom_rd[134] = 32'd41944083;
    u_rom_rd[135] = 32'd42535347;
    u_rom_rd[136] = 32'd36701459;
    u_rom_rd[137] = 32'd20243555;
    u_rom_rd[138] = 32'd47187219;
    u_rom_rd[139] = 32'd151;
    u_rom_rd[140] = 32'd3800072423;
    u_rom_rd[141] = 32'd4294181907;
    u_rom_rd[142] = 32'd105153683;
    u_rom_rd[143] = 32'd4261679843;
    u_rom_rd[144] = 32'd5431;
    u_rom_rd[145] = 32'd3512010003;
    u_rom_rd[146] = 32'd151;
    u_rom_rd[147] = 32'd3703603431;
    u_rom_rd[148] = 32'd591123;
    u_rom_rd[149] = 32'd151;
    u_rom_rd[150] = 32'd3997204711;
    u_rom_rd[151] = 32'd38798611;
    u_rom_rd[152] = 32'd12659075;
    u_rom_rd[153] = 32'd16853251;
    u_rom_rd[154] = 32'd21046403;
    u_rom_rd[155] = 32'd25240579;
    u_rom_rd[156] = 32'd29433987;
    u_rom_rd[157] = 32'd33620243;
    u_rom_rd[158] = 32'd791;
    u_rom_rd[159] = 32'd3720544359;
    u_rom_rd[160] = 32'd4278255891;
    u_rom_rd[161] = 32'd1123875;
    u_rom_rd[162] = 32'd8463395;
    u_rom_rd[163] = 32'd9511459;
    u_rom_rd[164] = 32'd328723;
    u_rom_rd[165] = 32'd5431;
    u_rom_rd[166] = 32'd3515155603;
    u_rom_rd[167] = 32'd296211;
    u_rom_rd[168] = 32'd151;
    u_rom_rd[169] = 32'd3611328743;
    u_rom_rd[170] = 32'd263443;
    u_rom_rd[171] = 32'd151;
    u_rom_rd[172] = 32'd3904930023;
    u_rom_rd[173] = 32'd4271894639;
    u_rom_rd[174] = 32'd8721939;
    u_rom_rd[175] = 32'd25498899;
    u_rom_rd[176] = 32'd12936499;
    u_rom_rd[177] = 32'd17126675;
    u_rom_rd[178] = 32'd11879731;
    u_rom_rd[179] = 32'd4543891;
    u_rom_rd[180] = 32'd16119187;
    u_rom_rd[181] = 32'd10863923;
    u_rom_rd[182] = 32'd12916115;
    u_rom_rd[183] = 32'd10864051;
    u_rom_rd[184] = 32'd5575955;
    u_rom_rd[185] = 32'd9783;
    u_rom_rd[186] = 32'd4261807635;
    u_rom_rd[187] = 32'd12940595;
    u_rom_rd[188] = 32'd10863923;
    u_rom_rd[189] = 32'd66999;
    u_rom_rd[190] = 32'd4294280595;
    u_rom_rd[191] = 32'd11892019;
    u_rom_rd[192] = 32'd32871;
    u_rom_rd[193] = 32'd33916003;
    u_rom_rd[194] = 32'd1683;
    u_rom_rd[195] = 32'd1050131;
    u_rom_rd[196] = 32'd13010739;
    u_rom_rd[197] = 32'd15015971;
    u_rom_rd[198] = 32'd4294280595;
    u_rom_rd[199] = 32'd4523283;
    u_rom_rd[200] = 32'd394899;
    u_rom_rd[201] = 32'd460307;
    u_rom_rd[202] = 32'd4261778659;
    u_rom_rd[203] = 32'd32871;
    u_rom_rd[204] = 32'd1555;
    u_rom_rd[205] = 32'd33917539;
    u_rom_rd[206] = 32'd1811;
    u_rom_rd[207] = 32'd1050259;
    u_rom_rd[208] = 32'd337923;
    u_rom_rd[209] = 32'd427923;
    u_rom_rd[210] = 32'd15107763;
    u_rom_rd[211] = 32'd14174003;
    u_rom_rd[212] = 32'd14694195;
    u_rom_rd[213] = 32'd15074867;
    u_rom_rd[214] = 32'd4294280595;
    u_rom_rd[215] = 32'd4523283;
    u_rom_rd[216] = 32'd493331;
    u_rom_rd[217] = 32'd4228226787;
    u_rom_rd[218] = 32'd394515;
    u_rom_rd[219] = 32'd32871;
    u_rom_rd[220] = 32'd4261478675;
    u_rom_rd[221] = 32'd1125923;
    u_rom_rd[222] = 32'd8465443;
    u_rom_rd[223] = 32'd9513507;
    u_rom_rd[224] = 32'd18950179;
    u_rom_rd[225] = 32'd19998243;
    u_rom_rd[226] = 32'd21046307;
    u_rom_rd[227] = 32'd22094371;
    u_rom_rd[228] = 32'd101025891;
    u_rom_rd[229] = 32'd363155;
    u_rom_rd[230] = 32'd330259;
    u_rom_rd[231] = 32'd1043;
    u_rom_rd[232] = 32'd5431;
    u_rom_rd[233] = 32'd3508865299;
    u_rom_rd[234] = 32'd5431;
    u_rom_rd[235] = 32'd3739552147;
    u_rom_rd[236] = 32'd16020755;
    u_rom_rd[237] = 32'd9045171;
    u_rom_rd[238] = 32'd33887331;
    u_rom_rd[239] = 32'd591123;
    u_rom_rd[240] = 32'd151;
    u_rom_rd[241] = 32'd3309338855;
    u_rom_rd[242] = 32'd296211;
    u_rom_rd[243] = 32'd151;
    u_rom_rd[244] = 32'd3540025575;
    u_rom_rd[245] = 32'd623891;
    u_rom_rd[246] = 32'd151;
    u_rom_rd[247] = 32'd3284173031;
    u_rom_rd[248] = 32'd312579;
    u_rom_rd[249] = 32'd151;
    u_rom_rd[250] = 32'd3372253415;
    u_rom_rd[251] = 32'd33555731;
    u_rom_rd[252] = 32'd151;
    u_rom_rd[253] = 32'd3326116071;
    u_rom_rd[254] = 32'd1311763;
    u_rom_rd[255] = 32'd4203387619;
    u_rom_rd[256] = 32'd5431;
    u_rom_rd[257] = 32'd3508864275;
    u_rom_rd[258] = 32'd4270723;
    u_rom_rd[259] = 32'd8464899;
    u_rom_rd[260] = 32'd12659075;
    u_rom_rd[261] = 32'd16853251;
    u_rom_rd[262] = 32'd21046403;
    u_rom_rd[263] = 32'd25240579;
    u_rom_rd[264] = 32'd29433987;
    u_rom_rd[265] = 32'd33620243;
    u_rom_rd[266] = 32'd791;
    u_rom_rd[267] = 32'd3200450663;
    u_rom_rd[268] = 32'd4261478675;
    u_rom_rd[269] = 32'd1125923;
    u_rom_rd[270] = 32'd8465443;
    u_rom_rd[271] = 32'd9513507;
    u_rom_rd[272] = 32'd18950179;
    u_rom_rd[273] = 32'd19998243;
    u_rom_rd[274] = 32'd21046307;
    u_rom_rd[275] = 32'd1043;
    u_rom_rd[276] = 32'd5431;
    u_rom_rd[277] = 32'd3647277331;
    u_rom_rd[278] = 32'd5431;
    u_rom_rd[279] = 32'd3530885523;
    u_rom_rd[280] = 32'd5431;
    u_rom_rd[281] = 32'd3593800211;
    u_rom_rd[282] = 32'd5431;
    u_rom_rd[283] = 32'd3508864147;
    u_rom_rd[284] = 32'd591123;
    u_rom_rd[285] = 32'd151;
    u_rom_rd[286] = 32'd3120595175;
    u_rom_rd[287] = 32'd2147484983;
    u_rom_rd[288] = 32'd4195767;
    u_rom_rd[289] = 32'd151;
    u_rom_rd[290] = 32'd3892347111;
    u_rom_rd[291] = 32'd623891;
    u_rom_rd[292] = 32'd151;
    u_rom_rd[293] = 32'd3091235047;
    u_rom_rd[294] = 32'd2147484983;
    u_rom_rd[295] = 32'd4195767;
    u_rom_rd[296] = 32'd151;
    u_rom_rd[297] = 32'd3909124327;
    u_rom_rd[298] = 32'd8717363;
    u_rom_rd[299] = 32'd656659;
    u_rom_rd[300] = 32'd151;
    u_rom_rd[301] = 32'd3057680615;
    u_rom_rd[302] = 32'd263443;
    u_rom_rd[303] = 32'd151;
    u_rom_rd[304] = 32'd3351281895;
    u_rom_rd[305] = 32'd296211;
    u_rom_rd[306] = 32'd151;
    u_rom_rd[307] = 32'd3032514791;
    u_rom_rd[308] = 32'd4196397167;
    u_rom_rd[309] = 32'd4227924243;
    u_rom_rd[310] = 32'd34680355;
    u_rom_rd[311] = 32'd42019875;
    u_rom_rd[312] = 32'd43067939;
    u_rom_rd[313] = 32'd52504611;
    u_rom_rd[314] = 32'd53552675;
    u_rom_rd[315] = 32'd54600739;
    u_rom_rd[316] = 32'd55648803;
    u_rom_rd[317] = 32'd56696867;
    u_rom_rd[318] = 32'd24194595;
    u_rom_rd[319] = 32'd25242659;
    u_rom_rd[320] = 32'd26290723;
    u_rom_rd[321] = 32'd27338787;
    u_rom_rd[322] = 32'd28386851;
    u_rom_rd[323] = 32'd5431;
    u_rom_rd[324] = 32'd3853845779;
    u_rom_rd[325] = 32'd151;
    u_rom_rd[326] = 32'd2952823015;
    u_rom_rd[327] = 32'd335545655;
    u_rom_rd[328] = 32'd184886531;
    u_rom_rd[329] = 32'd17134867;
    u_rom_rd[330] = 32'd738529891;
    u_rom_rd[331] = 32'd5431;
    u_rom_rd[332] = 32'd3828679955;
    u_rom_rd[333] = 32'd151;
    u_rom_rd[334] = 32'd2919268583;
    u_rom_rd[335] = 32'd301991223;
    u_rom_rd[336] = 32'd66061715;
    u_rom_rd[337] = 32'd146089507;
    u_rom_rd[338] = 32'd134554659;
    u_rom_rd[339] = 32'd10486803;
    u_rom_rd[340] = 32'd267388179;
    u_rom_rd[341] = 32'd151;
    u_rom_rd[342] = 32'd721453287;
    u_rom_rd[343] = 32'd4294181907;
    u_rom_rd[344] = 32'd4261681379;
    u_rom_rd[345] = 32'd151;
    u_rom_rd[346] = 32'd1065386215;
    u_rom_rd[347] = 32'd151;
    u_rom_rd[348] = 32'd1698726119;
    u_rom_rd[349] = 32'd151;
    u_rom_rd[350] = 32'd1770029287;
    u_rom_rd[351] = 32'd151;
    u_rom_rd[352] = 32'd1841332455;
    u_rom_rd[353] = 32'd151;
    u_rom_rd[354] = 32'd1912635623;
    u_rom_rd[355] = 32'd4261746915;
    u_rom_rd[356] = 32'd151;
    u_rom_rd[357] = 32'd1740669159;
    u_rom_rd[358] = 32'd301991223;
    u_rom_rd[359] = 32'd1050003;
    u_rom_rd[360] = 32'd146089507;
    u_rom_rd[361] = 32'd66871;
    u_rom_rd[362] = 32'd330643;
    u_rom_rd[363] = 32'd536872467;
    u_rom_rd[364] = 32'd1299;
    u_rom_rd[365] = 32'd755091;
    u_rom_rd[366] = 32'd151;
    u_rom_rd[367] = 32'd666927335;
    u_rom_rd[368] = 32'd17540355;
    u_rom_rd[369] = 32'd369426531;
    u_rom_rd[370] = 32'd3091;
    u_rom_rd[371] = 32'd5431;
    u_rom_rd[372] = 32'd3742696723;
    u_rom_rd[373] = 32'd10560547;
    u_rom_rd[374] = 32'd5431;
    u_rom_rd[375] = 32'd3905227155;
    u_rom_rd[376] = 32'd5431;
    u_rom_rd[377] = 32'd3481602579;
    u_rom_rd[378] = 32'd5431;
    u_rom_rd[379] = 32'd3582266003;
    u_rom_rd[380] = 32'd5431;
    u_rom_rd[381] = 32'd3508865811;
    u_rom_rd[382] = 32'd104860947;
    u_rom_rd[383] = 32'd787475;
    u_rom_rd[384] = 32'd8463619;
    u_rom_rd[385] = 32'd151;
    u_rom_rd[386] = 32'd2701164775;
    u_rom_rd[387] = 32'd1838099;
    u_rom_rd[388] = 32'd787731;
    u_rom_rd[389] = 32'd151;
    u_rom_rd[390] = 32'd2990571751;
    u_rom_rd[391] = 32'd49284371;
    u_rom_rd[392] = 32'd151;
    u_rom_rd[393] = 32'd2738913511;
    u_rom_rd[394] = 32'd17540355;
    u_rom_rd[395] = 32'd151;
    u_rom_rd[396] = 32'd2965405927;
    u_rom_rd[397] = 32'd623891;
    u_rom_rd[398] = 32'd151;
    u_rom_rd[399] = 32'd2646638823;
    u_rom_rd[400] = 32'd12584211;
    u_rom_rd[401] = 32'd44303667;
    u_rom_rd[402] = 32'd11240499;
    u_rom_rd[403] = 32'd21243139;
    u_rom_rd[404] = 32'd151;
    u_rom_rd[405] = 32'd2864742631;
    u_rom_rd[406] = 32'd656659;
    u_rom_rd[407] = 32'd151;
    u_rom_rd[408] = 32'd2608890087;
    u_rom_rd[409] = 32'd25437443;
    u_rom_rd[410] = 32'd151;
    u_rom_rd[411] = 32'd2839576807;
    u_rom_rd[412] = 32'd689427;
    u_rom_rd[413] = 32'd151;
    u_rom_rd[414] = 32'd2583724263;
    u_rom_rd[415] = 32'd29631747;
    u_rom_rd[416] = 32'd151;
    u_rom_rd[417] = 32'd2877325543;
    u_rom_rd[418] = 32'd722195;
    u_rom_rd[419] = 32'd151;
    u_rom_rd[420] = 32'd2558558439;
    u_rom_rd[421] = 32'd29633923;
    u_rom_rd[422] = 32'd101549667;
    u_rom_rd[423] = 32'd21234963;
    u_rom_rd[424] = 32'd25429395;
    u_rom_rd[425] = 32'd339075;
    u_rom_rd[426] = 32'd369795;
    u_rom_rd[427] = 32'd29624595;
    u_rom_rd[428] = 32'd536872211;
    u_rom_rd[429] = 32'd885779;
    u_rom_rd[430] = 32'd11396195;
    u_rom_rd[431] = 32'd536871955;
    u_rom_rd[432] = 32'd820499;
    u_rom_rd[433] = 32'd296339;
    u_rom_rd[434] = 32'd263699;
    u_rom_rd[435] = 32'd151;
    u_rom_rd[436] = 32'd377520359;
    u_rom_rd[437] = 32'd1870995;
    u_rom_rd[438] = 32'd16577811;
    u_rom_rd[439] = 32'd1083018675;
    u_rom_rd[440] = 32'd335459;
    u_rom_rd[441] = 32'd599299;
    u_rom_rd[442] = 32'd1102382515;
    u_rom_rd[443] = 32'd61179315;
    u_rom_rd[444] = 32'd44422451;
    u_rom_rd[445] = 32'd151;
    u_rom_rd[446] = 32'd2940240103;
    u_rom_rd[447] = 32'd8684723;
    u_rom_rd[448] = 32'd4195195107;
    u_rom_rd[449] = 32'd104858899;
    u_rom_rd[450] = 32'd151;
    u_rom_rd[451] = 32'd2919268583;
    u_rom_rd[452] = 32'd722195;
    u_rom_rd[453] = 32'd151;
    u_rom_rd[454] = 32'd2415952103;
    u_rom_rd[455] = 32'd17540355;
    u_rom_rd[456] = 32'd3970723555;
    u_rom_rd[457] = 32'd5431;
    u_rom_rd[458] = 32'd3777299731;
    u_rom_rd[459] = 32'd151;
    u_rom_rd[460] = 32'd2390786279;
    u_rom_rd[461] = 32'd4957443;
    u_rom_rd[462] = 32'd151;
    u_rom_rd[463] = 32'd2621472999;
    u_rom_rd[464] = 32'd5431;
    u_rom_rd[465] = 32'd3699705107;
    u_rom_rd[466] = 32'd151;
    u_rom_rd[467] = 32'd2361426151;
    u_rom_rd[468] = 32'd9151747;
    u_rom_rd[469] = 32'd151;
    u_rom_rd[470] = 32'd2592112871;
    u_rom_rd[471] = 32'd5431;
    u_rom_rd[472] = 32'd3766813971;
    u_rom_rd[473] = 32'd151;
    u_rom_rd[474] = 32'd2332066023;
    u_rom_rd[475] = 32'd13346051;
    u_rom_rd[476] = 32'd151;
    u_rom_rd[477] = 32'd2562752743;
    u_rom_rd[478] = 32'd5431;
    u_rom_rd[479] = 32'd3636790547;
    u_rom_rd[480] = 32'd151;
    u_rom_rd[481] = 32'd2302705895;
    u_rom_rd[482] = 32'd318768439;
    u_rom_rd[483] = 32'd1050003;
    u_rom_rd[484] = 32'd179642403;
    u_rom_rd[485] = 32'd4957699;
    u_rom_rd[486] = 32'd9152131;
    u_rom_rd[487] = 32'd13346563;
    u_rom_rd[488] = 32'd394515;
    u_rom_rd[489] = 32'd427411;
    u_rom_rd[490] = 32'd458855;
    u_rom_rd[491] = 32'd1299;
    u_rom_rd[492] = 32'd12660099;
    u_rom_rd[493] = 32'd16854275;
    u_rom_rd[494] = 32'd21048451;
    u_rom_rd[495] = 32'd25242627;
    u_rom_rd[496] = 32'd29436803;
    u_rom_rd[497] = 32'd33630979;
    u_rom_rd[498] = 32'd37825155;
    u_rom_rd[499] = 32'd42019331;
    u_rom_rd[500] = 32'd46213507;
    u_rom_rd[501] = 32'd50407683;
    u_rom_rd[502] = 32'd54600835;
    u_rom_rd[503] = 32'd58795011;
    u_rom_rd[504] = 32'd62988419;
    u_rom_rd[505] = 32'd67174675;
    u_rom_rd[506] = 32'd32871;
    u_rom_rd[507] = 32'd5431;
    u_rom_rd[508] = 32'd3609527571;
    u_rom_rd[509] = 32'd151;
    u_rom_rd[510] = 32'd2181071079;
    u_rom_rd[511] = 32'd151;
    u_rom_rd[512] = 32'd3275784423;
    u_rom_rd[513] = 32'd301991351;
    u_rom_rd[514] = 32'd138782211;
    u_rom_rd[515] = 32'd4261813987;
    u_rom_rd[516] = 32'd301991351;
    u_rom_rd[517] = 32'd134579731;
    u_rom_rd[518] = 32'd10887203;
    u_rom_rd[519] = 32'd138781955;
    u_rom_rd[520] = 32'd4261748451;
    u_rom_rd[521] = 32'd301991223;
    u_rom_rd[522] = 32'd134554883;
    u_rom_rd[523] = 32'd267744531;
    u_rom_rd[524] = 32'd32871;
    u_rom_rd[525] = 32'd4244701459;
    u_rom_rd[526] = 32'd34678307;
    u_rom_rd[527] = 32'd42017827;
    u_rom_rd[528] = 32'd43065891;
    u_rom_rd[529] = 32'd52502563;
    u_rom_rd[530] = 32'd20000291;
    u_rom_rd[531] = 32'd21048355;
    u_rom_rd[532] = 32'd22096419;
    u_rom_rd[533] = 32'd23144483;
    u_rom_rd[534] = 32'd395667;
    u_rom_rd[535] = 32'd362771;
    u_rom_rd[536] = 32'd328723;
    u_rom_rd[537] = 32'd151;
    u_rom_rd[538] = 32'd796950759;
    u_rom_rd[539] = 32'd17827091;
    u_rom_rd[540] = 32'd263571;
    u_rom_rd[541] = 32'd1555;
    u_rom_rd[542] = 32'd1683;
    u_rom_rd[543] = 32'd151;
    u_rom_rd[544] = 32'd314605799;
    u_rom_rd[545] = 32'd15795475;
    u_rom_rd[546] = 32'd1050003;
    u_rom_rd[547] = 32'd1555;
    u_rom_rd[548] = 32'd151;
    u_rom_rd[549] = 32'd524320999;
    u_rom_rd[550] = 32'd267387923;
    u_rom_rd[551] = 32'd267388179;
    u_rom_rd[552] = 32'd151;
    u_rom_rd[553] = 32'd4131422439;
    u_rom_rd[554] = 32'd4270131939;
    u_rom_rd[555] = 32'd267388179;
    u_rom_rd[556] = 32'd151;
    u_rom_rd[557] = 32'd4114645223;
    u_rom_rd[558] = 32'd328723;
    u_rom_rd[559] = 32'd2579;
    u_rom_rd[560] = 32'd1171;
    u_rom_rd[561] = 32'd66871;
    u_rom_rd[562] = 32'd4294249107;
    u_rom_rd[563] = 32'd536873747;
    u_rom_rd[564] = 32'd22705459;
    u_rom_rd[565] = 32'd267679123;
    u_rom_rd[566] = 32'd151;
    u_rom_rd[567] = 32'd2650833127;
    u_rom_rd[568] = 32'd330259;
    u_rom_rd[569] = 32'd20239971;
    u_rom_rd[570] = 32'd10028339;
    u_rom_rd[571] = 32'd8716323;
    u_rom_rd[572] = 32'd1344659;
    u_rom_rd[573] = 32'd267388179;
    u_rom_rd[574] = 32'd151;
    u_rom_rd[575] = 32'd4039147751;
    u_rom_rd[576] = 32'd328723;
    u_rom_rd[577] = 32'd4251227875;
    u_rom_rd[578] = 32'd8655891;
    u_rom_rd[579] = 32'd267388179;
    u_rom_rd[580] = 32'd151;
    u_rom_rd[581] = 32'd4013981927;
    u_rom_rd[582] = 32'd10773555;
    u_rom_rd[583] = 32'd151;
    u_rom_rd[584] = 32'd658538727;
    u_rom_rd[585] = 32'd54793827;
    u_rom_rd[586] = 32'd16853763;
    u_rom_rd[587] = 32'd21047939;
    u_rom_rd[588] = 32'd25242115;
    u_rom_rd[589] = 32'd29436291;
    u_rom_rd[590] = 32'd33630467;
    u_rom_rd[591] = 32'd37823619;
    u_rom_rd[592] = 32'd42017795;
    u_rom_rd[593] = 32'd46211203;
    u_rom_rd[594] = 32'd50397459;
    u_rom_rd[595] = 32'd32871;
    u_rom_rd[596] = 32'd236979475;
    u_rom_rd[597] = 32'd151;
    u_rom_rd[598] = 32'd2462089447;
    u_rom_rd[599] = 32'd4278255891;
    u_rom_rd[600] = 32'd1123875;
    u_rom_rd[601] = 32'd151;
    u_rom_rd[602] = 32'd528515303;
    u_rom_rd[603] = 32'd155190803;
    u_rom_rd[604] = 32'd1050259;
    u_rom_rd[605] = 32'd1299;
    u_rom_rd[606] = 32'd1427;
    u_rom_rd[607] = 32'd151;
    u_rom_rd[608] = 32'd46170343;
    u_rom_rd[609] = 32'd11601171;
    u_rom_rd[610] = 32'd1050003;
    u_rom_rd[611] = 32'd1050131;
    u_rom_rd[612] = 32'd151;
    u_rom_rd[613] = 32'd255885543;
    u_rom_rd[614] = 32'd12656771;
    u_rom_rd[615] = 32'd16843027;
    u_rom_rd[616] = 32'd791;
    u_rom_rd[617] = 32'd520290407;
    u_rom_rd[618] = 32'd4278255891;
    u_rom_rd[619] = 32'd1123875;
    u_rom_rd[620] = 32'd8463395;
    u_rom_rd[621] = 32'd9511459;
    u_rom_rd[622] = 32'd18948131;
    u_rom_rd[623] = 32'd395539;
    u_rom_rd[624] = 32'd361619;
    u_rom_rd[625] = 32'd328723;
    u_rom_rd[626] = 32'd67538019;
    u_rom_rd[627] = 32'd5431;
    u_rom_rd[628] = 32'd3762619667;
    u_rom_rd[629] = 32'd4294963351;
    u_rom_rd[630] = 32'd1677754599;
    u_rom_rd[631] = 32'd263443;
    u_rom_rd[632] = 32'd4294963351;
    u_rom_rd[633] = 32'd1971355879;
    u_rom_rd[634] = 32'd5431;
    u_rom_rd[635] = 32'd3574924563;
    u_rom_rd[636] = 32'd4294963351;
    u_rom_rd[637] = 32'd1648394471;
    u_rom_rd[638] = 32'd296211;
    u_rom_rd[639] = 32'd4294963351;
    u_rom_rd[640] = 32'd1879081191;
    u_rom_rd[641] = 32'd5431;
    u_rom_rd[642] = 32'd3692365075;
    u_rom_rd[643] = 32'd4294963351;
    u_rom_rd[644] = 32'd1619034343;
    u_rom_rd[645] = 32'd591123;
    u_rom_rd[646] = 32'd4294963351;
    u_rom_rd[647] = 32'd1707114727;
    u_rom_rd[648] = 32'd67396883;
    u_rom_rd[649] = 32'd151;
    u_rom_rd[650] = 32'd3724574951;
    u_rom_rd[651] = 32'd25482515;
    u_rom_rd[652] = 32'd151;
    u_rom_rd[653] = 32'd3711992039;
    u_rom_rd[654] = 32'd17093907;
    u_rom_rd[655] = 32'd267744531;
    u_rom_rd[656] = 32'd151;
    u_rom_rd[657] = 32'd3695214823;
    u_rom_rd[658] = 32'd8705299;
    u_rom_rd[659] = 32'd267744531;
    u_rom_rd[660] = 32'd151;
    u_rom_rd[661] = 32'd3678437607;
    u_rom_rd[662] = 32'd267711763;
    u_rom_rd[663] = 32'd151;
    u_rom_rd[664] = 32'd3665854695;
    u_rom_rd[665] = 32'd1664275;
    u_rom_rd[666] = 32'd76035;
    u_rom_rd[667] = 32'd4269187;
    u_rom_rd[668] = 32'd8463363;
    u_rom_rd[669] = 32'd12656771;
    u_rom_rd[670] = 32'd16843027;
    u_rom_rd[671] = 32'd791;
    u_rom_rd[672] = 32'd3632463975;
    u_rom_rd[673] = 32'd4261478675;
    u_rom_rd[674] = 32'd1125923;
    u_rom_rd[675] = 32'd8465443;
    u_rom_rd[676] = 32'd9513507;
    u_rom_rd[677] = 32'd18950179;
    u_rom_rd[678] = 32'd19998243;
    u_rom_rd[679] = 32'd21046307;
    u_rom_rd[680] = 32'd395539;
    u_rom_rd[681] = 32'd362899;
    u_rom_rd[682] = 32'd330259;
    u_rom_rd[683] = 32'd267387923;
    u_rom_rd[684] = 32'd267388179;
    u_rom_rd[685] = 32'd151;
    u_rom_rd[686] = 32'd3573580007;
    u_rom_rd[687] = 32'd4270131939;
    u_rom_rd[688] = 32'd2098579;
    u_rom_rd[689] = 32'd11141155;
    u_rom_rd[690] = 32'd45737059;
    u_rom_rd[691] = 32'd1704979;
    u_rom_rd[692] = 32'd4294542483;
    u_rom_rd[693] = 32'd267388179;
    u_rom_rd[694] = 32'd151;
    u_rom_rd[695] = 32'd3535831271;
    u_rom_rd[696] = 32'd10747939;
    u_rom_rd[697] = 32'd4294214803;
    u_rom_rd[698] = 32'd1311763;
    u_rom_rd[699] = 32'd4261713123;
    u_rom_rd[700] = 32'd67700323;
    u_rom_rd[701] = 32'd5431;
    u_rom_rd[702] = 32'd3710190867;
    u_rom_rd[703] = 32'd4294963351;
    u_rom_rd[704] = 32'd1367376103;
    u_rom_rd[705] = 32'd34178147;
    u_rom_rd[706] = 32'd33555731;
    u_rom_rd[707] = 32'd4294963351;
    u_rom_rd[708] = 32'd1417707751;
    u_rom_rd[709] = 32'd673027;
    u_rom_rd[710] = 32'd4294963351;
    u_rom_rd[711] = 32'd1438679271;
    u_rom_rd[712] = 32'd4294543763;
    u_rom_rd[713] = 32'd1706515;
    u_rom_rd[714] = 32'd4262039779;
    u_rom_rd[715] = 32'd5431;
    u_rom_rd[716] = 32'd3508864275;
    u_rom_rd[717] = 32'd4294963351;
    u_rom_rd[718] = 32'd1308655847;
    u_rom_rd[719] = 32'd8464899;
    u_rom_rd[720] = 32'd12659075;
    u_rom_rd[721] = 32'd16853251;
    u_rom_rd[722] = 32'd21046403;
    u_rom_rd[723] = 32'd25240579;
    u_rom_rd[724] = 32'd29433987;
    u_rom_rd[725] = 32'd33620243;
    u_rom_rd[726] = 32'd32871;
    u_rom_rd[727] = 32'd4278255891;
    u_rom_rd[728] = 32'd1123875;
    u_rom_rd[729] = 32'd267388179;
    u_rom_rd[730] = 32'd151;
    u_rom_rd[731] = 32'd3384836327;
    u_rom_rd[732] = 32'd301991351;
    u_rom_rd[733] = 32'd1050131;
    u_rom_rd[734] = 32'd267388179;
    u_rom_rd[735] = 32'd147170339;
    u_rom_rd[736] = 32'd12656771;
    u_rom_rd[737] = 32'd16843027;
    u_rom_rd[738] = 32'd791;
    u_rom_rd[739] = 32'd3351445607;
    u_rom_rd[740] = 32'd4278255891;
    u_rom_rd[741] = 32'd1123875;
    u_rom_rd[742] = 32'd267388179;
    u_rom_rd[743] = 32'd151;
    u_rom_rd[744] = 32'd3330310375;
    u_rom_rd[745] = 32'd301991351;
    u_rom_rd[746] = 32'd267388179;
    u_rom_rd[747] = 32'd134587427;
    u_rom_rd[748] = 32'd12656771;
    u_rom_rd[749] = 32'd16843027;
    u_rom_rd[750] = 32'd791;
    u_rom_rd[751] = 32'd3301113959;
    u_rom_rd[752] = 32'd4278255891;
    u_rom_rd[753] = 32'd1123875;
    u_rom_rd[754] = 32'd151;
    u_rom_rd[755] = 32'd4181754087;
    u_rom_rd[756] = 32'd8389907;
    u_rom_rd[757] = 32'd446694803;
    u_rom_rd[758] = 32'd140510739;
    u_rom_rd[759] = 32'd1050259;
    u_rom_rd[760] = 32'd151;
    u_rom_rd[761] = 32'd3699409127;
    u_rom_rd[762] = 32'd7406867;
    u_rom_rd[763] = 32'd5244307;
    u_rom_rd[764] = 32'd1050131;
    u_rom_rd[765] = 32'd151;
    u_rom_rd[766] = 32'd3909124327;
    u_rom_rd[767] = 32'd12656771;
    u_rom_rd[768] = 32'd16843027;
    u_rom_rd[769] = 32'd791;
    u_rom_rd[770] = 32'd4173529191;
    u_rom_rd[771] = 32'd4278255891;
    u_rom_rd[772] = 32'd1123875;
    u_rom_rd[773] = 32'd151;
    u_rom_rd[774] = 32'd4102062311;
    u_rom_rd[775] = 32'd60818707;
    u_rom_rd[776] = 32'd1050259;
    u_rom_rd[777] = 32'd1427;
    u_rom_rd[778] = 32'd1555;
    u_rom_rd[779] = 32'd151;
    u_rom_rd[780] = 32'd3619717351;
    u_rom_rd[781] = 32'd7406867;
    u_rom_rd[782] = 32'd5244307;
    u_rom_rd[783] = 32'd1050131;
    u_rom_rd[784] = 32'd151;
    u_rom_rd[785] = 32'd3829432551;
    u_rom_rd[786] = 32'd12656771;
    u_rom_rd[787] = 32'd16843027;
    u_rom_rd[788] = 32'd791;
    u_rom_rd[789] = 32'd4093837415;
    u_rom_rd[790] = 32'd4278255891;
    u_rom_rd[791] = 32'd1123875;
    u_rom_rd[792] = 32'd151;
    u_rom_rd[793] = 32'd4022370535;
    u_rom_rd[794] = 32'd57672979;
    u_rom_rd[795] = 32'd1050259;
    u_rom_rd[796] = 32'd1427;
    u_rom_rd[797] = 32'd1555;
    u_rom_rd[798] = 32'd151;
    u_rom_rd[799] = 32'd3540025575;
    u_rom_rd[800] = 32'd11601171;
    u_rom_rd[801] = 32'd1050003;
    u_rom_rd[802] = 32'd1050131;
    u_rom_rd[803] = 32'd151;
    u_rom_rd[804] = 32'd3749740775;
    u_rom_rd[805] = 32'd12656771;
    u_rom_rd[806] = 32'd16843027;
    u_rom_rd[807] = 32'd791;
    u_rom_rd[808] = 32'd4014145639;
    u_rom_rd[809] = 32'd4278255891;
    u_rom_rd[810] = 32'd1123875;
    u_rom_rd[811] = 32'd151;
    u_rom_rd[812] = 32'd3942678759;
    u_rom_rd[813] = 32'd42992915;
    u_rom_rd[814] = 32'd1073743287;
    u_rom_rd[815] = 32'd1050259;
    u_rom_rd[816] = 32'd1555;
    u_rom_rd[817] = 32'd151;
    u_rom_rd[818] = 32'd3460333799;
    u_rom_rd[819] = 32'd11601171;
    u_rom_rd[820] = 32'd1050003;
    u_rom_rd[821] = 32'd1050131;
    u_rom_rd[822] = 32'd151;
    u_rom_rd[823] = 32'd3670048999;
    u_rom_rd[824] = 32'd151;
    u_rom_rd[825] = 32'd3942678759;
    u_rom_rd[826] = 32'd11617539;
    u_rom_rd[827] = 32'd12656771;
    u_rom_rd[828] = 32'd16843027;
    u_rom_rd[829] = 32'd32871;
    u_rom_rd[830] = 32'd1698957837;
    u_rom_rd[831] = 32'd1852404851;
    u_rom_rd[832] = 32'd1869182049;
    u_rom_rd[833] = 32'd1684086894;
    u_rom_rd[834] = 32'd1936028260;
    u_rom_rd[835] = 32'd807418483;
    u_rom_rd[836] = 32'd168624248;
    u_rom_rd[837] = 32'd2120960;
    u_rom_rd[838] = 32'd168626701;
    u_rom_rd[839] = 32'd1330795077;
    u_rom_rd[840] = 32'd2112082;
    u_rom_rd[841] = 32'd1442863885;
    u_rom_rd[842] = 32'd1718186597;
    u_rom_rd[843] = 32'd1766203513;
    u_rom_rd[844] = 32'd1634627426;
    u_rom_rd[845] = 32'd543777635;
    u_rom_rd[846] = 32'd1970365811;
    u_rom_rd[847] = 32'd1701015141;
    u_rom_rd[848] = 32'd1936028704;
    u_rom_rd[849] = 32'd1634738292;
    u_rom_rd[850] = 32'd1919251572;
    u_rom_rd[851] = 32'd168636014;
    u_rom_rd[852] = 32'd1918967808;
    u_rom_rd[853] = 32'd2112103;
    u_rom_rd[854] = 32'd1699482125;
    u_rom_rd[855] = 32'd1752459118;
    u_rom_rd[856] = 32'd1409294394;
    u_rom_rd[857] = 32'd1818326127;
    u_rom_rd[858] = 32'd1969317408;
    u_rom_rd[859] = 32'd980644972;
    u_rom_rd[860] = 32'd1850015776;
    u_rom_rd[861] = 32'd1769104756;
    u_rom_rd[862] = 32'd1931503470;
    u_rom_rd[863] = 32'd1952869477;
    u_rom_rd[864] = 32'd544502629;
    u_rom_rd[865] = 32'd1701080941;
    u_rom_rd[866] = 32'd658721;
    u_rom_rd[867] = 32'd757926413;
    u_rom_rd[868] = 32'd218762558;
    u_rom_rd[869] = 32'd168624138;
    u_rom_rd[870] = 32'd1953067607;
    u_rom_rd[871] = 32'd1766203493;
    u_rom_rd[872] = 32'd1634627426;
    u_rom_rd[873] = 32'd543777635;
    u_rom_rd[874] = 32'd1970365811;
    u_rom_rd[875] = 32'd1701015141;
    u_rom_rd[876] = 32'd1936028704;
    u_rom_rd[877] = 32'd1634738292;
    u_rom_rd[878] = 32'd1919251572;
    u_rom_rd[879] = 32'd168636014;
    u_rom_rd[880] = 32'd1919098880;
    u_rom_rd[881] = 32'd2112099;
    u_rom_rd[882] = 32'd828443149;
    u_rom_rd[883] = 32'd807419168;
    u_rom_rd[884] = 32'd773849208;
    u_rom_rd[885] = 32'd1914711598;
    u_rom_rd[886] = 32'd980448101;
    u_rom_rd[887] = 32'd842084352;
    u_rom_rd[888] = 32'd909456435;
    u_rom_rd[889] = 32'd1631139895;
    u_rom_rd[890] = 32'd1701077858;
    u_rom_rd[891] = 32'd540672102;
    u_rom_rd[892] = 32'd1275727104;
    u_rom_rd[893] = 32'd1768186223;
    u_rom_rd[894] = 32'd1881171822;
    u_rom_rd[895] = 32'd1869379937;
    u_rom_rd[896] = 32'd2122849;
    u_rom_rd[897] = 32'd6581603;
    u_rom_rd[898] = 32'd1668286989;
    u_rom_rd[899] = 32'd807419168;
    u_rom_rd[900] = 32'd168624248;
    u_rom_rd[901] = 32'd1885696592;
    u_rom_rd[902] = 32'd543519329;
    u_rom_rd[903] = 32'd1768383858;
    u_rom_rd[904] = 32'd1919251571;
    u_rom_rd[905] = 32'd1851859059;
    u_rom_rd[906] = 32'd1969889380;
    u_rom_rd[907] = 32'd1948282989;
    u_rom_rd[908] = 32'd1701519471;
    u_rom_rd[909] = 32'd1818586738;
    u_rom_rd[910] = 32'd1628048698;
    u_rom_rd[911] = 32'd540876848;
    u_rom_rd[912] = 32'd1224767536;
    u_rom_rd[913] = 32'd1769236846;
    u_rom_rd[914] = 32'd2053729377;
    u_rom_rd[915] = 32'd543649385;
    u_rom_rd[916] = 32'd1663059027;
    u_rom_rd[917] = 32'd979661409;
    u_rom_rd[918] = 32'd218106381;
    u_rom_rd[919] = 32'd1510608138;
    u_rom_rd[920] = 32'd1395481178;
    u_rom_rd[921] = 32'd1109410671;
    u_rom_rd[922] = 32'd544501615;
    u_rom_rd[923] = 32'd1684107084;
    u_rom_rd[924] = 32'd673215077;
    u_rom_rd[925] = 32'd980707687;
    u_rom_rd[926] = 32'd1701131040;
    u_rom_rd[927] = 32'd876097586;
    u_rom_rd[928] = 32'd1919509549;
    u_rom_rd[929] = 32'd220821876;
    u_rom_rd[930] = 32'd658698;
    u_rom_rd[931] = 32'd1393167674;
    u_rom_rd[932] = 32'd1668445551;
    u_rom_rd[933] = 32'd1818370149;
    u_rom_rd[934] = 32'd980116335;
    u_rom_rd[935] = 32'd7876640;
    u_rom_rd[936] = 32'd0;
    u_rom_rd[937] = 32'd0;
    u_rom_rd[938] = 32'd0;
    u_rom_rd[939] = 32'd0;
    u_rom_rd[940] = 32'd0;
    u_rom_rd[941] = 32'd0;
    u_rom_rd[942] = 32'd0;
    u_rom_rd[943] = 32'd0;
    u_rom_rd[944] = 32'd0;
    u_rom_rd[945] = 32'd0;
    u_rom_rd[946] = 32'd0;
    u_rom_rd[947] = 32'd0;
    u_rom_rd[948] = 32'd0;
    u_rom_rd[949] = 32'd0;
    u_rom_rd[950] = 32'd0;
    u_rom_rd[951] = 32'd0;
    u_rom_rd[952] = 32'd0;
    u_rom_rd[953] = 32'd0;
    u_rom_rd[954] = 32'd0;
    u_rom_rd[955] = 32'd0;
    u_rom_rd[956] = 32'd0;
    u_rom_rd[957] = 32'd0;
    u_rom_rd[958] = 32'd0;
    u_rom_rd[959] = 32'd0;
    u_rom_rd[960] = 32'd0;
    u_rom_rd[961] = 32'd0;
    u_rom_rd[962] = 32'd0;
    u_rom_rd[963] = 32'd0;
    u_rom_rd[964] = 32'd0;
    u_rom_rd[965] = 32'd0;
    u_rom_rd[966] = 32'd0;
    u_rom_rd[967] = 32'd0;
    u_rom_rd[968] = 32'd0;
    u_rom_rd[969] = 32'd0;
    u_rom_rd[970] = 32'd0;
    u_rom_rd[971] = 32'd0;
    u_rom_rd[972] = 32'd0;
    u_rom_rd[973] = 32'd0;
    u_rom_rd[974] = 32'd0;
    u_rom_rd[975] = 32'd0;
    u_rom_rd[976] = 32'd0;
    u_rom_rd[977] = 32'd0;
    u_rom_rd[978] = 32'd0;
    u_rom_rd[979] = 32'd0;
    u_rom_rd[980] = 32'd0;
    u_rom_rd[981] = 32'd0;
    u_rom_rd[982] = 32'd0;
    u_rom_rd[983] = 32'd0;
    u_rom_rd[984] = 32'd0;
    u_rom_rd[985] = 32'd0;
    u_rom_rd[986] = 32'd0;
    u_rom_rd[987] = 32'd0;
    u_rom_rd[988] = 32'd0;
    u_rom_rd[989] = 32'd0;
    u_rom_rd[990] = 32'd0;
    u_rom_rd[991] = 32'd0;
    u_rom_rd[992] = 32'd0;
    u_rom_rd[993] = 32'd0;
    u_rom_rd[994] = 32'd0;
    u_rom_rd[995] = 32'd0;
    u_rom_rd[996] = 32'd0;
    u_rom_rd[997] = 32'd0;
    u_rom_rd[998] = 32'd0;
    u_rom_rd[999] = 32'd0;
    u_rom_rd[1000] = 32'd0;
    u_rom_rd[1001] = 32'd0;
    u_rom_rd[1002] = 32'd0;
    u_rom_rd[1003] = 32'd0;
    u_rom_rd[1004] = 32'd0;
    u_rom_rd[1005] = 32'd0;
    u_rom_rd[1006] = 32'd0;
    u_rom_rd[1007] = 32'd0;
    u_rom_rd[1008] = 32'd0;
    u_rom_rd[1009] = 32'd0;
    u_rom_rd[1010] = 32'd0;
    u_rom_rd[1011] = 32'd0;
    u_rom_rd[1012] = 32'd0;
    u_rom_rd[1013] = 32'd0;
    u_rom_rd[1014] = 32'd0;
    u_rom_rd[1015] = 32'd0;
    u_rom_rd[1016] = 32'd0;
    u_rom_rd[1017] = 32'd0;
    u_rom_rd[1018] = 32'd0;
    u_rom_rd[1019] = 32'd0;
    u_rom_rd[1020] = 32'd0;
    u_rom_rd[1021] = 32'd0;
    u_rom_rd[1022] = 32'd0;
    u_rom_rd[1023] = 32'd0;
  end
  reg [31:0] _1_;
  always @(posedge clk) begin
    _1_ <= u_rom_rd[o_wb_adr[11:2]];
  end
  assign u_rom_r_data = _1_;
  (* src = "rtl/soc.py:115" *)
  reg [31:0] u_tram_rd [1023:0];
  initial begin
    u_tram_rd[0] = 32'd0;
    u_tram_rd[1] = 32'd0;
    u_tram_rd[2] = 32'd0;
    u_tram_rd[3] = 32'd0;
    u_tram_rd[4] = 32'd0;
    u_tram_rd[5] = 32'd0;
    u_tram_rd[6] = 32'd0;
    u_tram_rd[7] = 32'd0;
    u_tram_rd[8] = 32'd0;
    u_tram_rd[9] = 32'd0;
    u_tram_rd[10] = 32'd0;
    u_tram_rd[11] = 32'd0;
    u_tram_rd[12] = 32'd0;
    u_tram_rd[13] = 32'd0;
    u_tram_rd[14] = 32'd0;
    u_tram_rd[15] = 32'd0;
    u_tram_rd[16] = 32'd0;
    u_tram_rd[17] = 32'd0;
    u_tram_rd[18] = 32'd0;
    u_tram_rd[19] = 32'd0;
    u_tram_rd[20] = 32'd0;
    u_tram_rd[21] = 32'd0;
    u_tram_rd[22] = 32'd0;
    u_tram_rd[23] = 32'd0;
    u_tram_rd[24] = 32'd0;
    u_tram_rd[25] = 32'd0;
    u_tram_rd[26] = 32'd0;
    u_tram_rd[27] = 32'd0;
    u_tram_rd[28] = 32'd0;
    u_tram_rd[29] = 32'd0;
    u_tram_rd[30] = 32'd0;
    u_tram_rd[31] = 32'd0;
    u_tram_rd[32] = 32'd0;
    u_tram_rd[33] = 32'd0;
    u_tram_rd[34] = 32'd0;
    u_tram_rd[35] = 32'd0;
    u_tram_rd[36] = 32'd0;
    u_tram_rd[37] = 32'd0;
    u_tram_rd[38] = 32'd0;
    u_tram_rd[39] = 32'd0;
    u_tram_rd[40] = 32'd0;
    u_tram_rd[41] = 32'd0;
    u_tram_rd[42] = 32'd0;
    u_tram_rd[43] = 32'd0;
    u_tram_rd[44] = 32'd0;
    u_tram_rd[45] = 32'd0;
    u_tram_rd[46] = 32'd0;
    u_tram_rd[47] = 32'd0;
    u_tram_rd[48] = 32'd0;
    u_tram_rd[49] = 32'd0;
    u_tram_rd[50] = 32'd0;
    u_tram_rd[51] = 32'd0;
    u_tram_rd[52] = 32'd0;
    u_tram_rd[53] = 32'd0;
    u_tram_rd[54] = 32'd0;
    u_tram_rd[55] = 32'd0;
    u_tram_rd[56] = 32'd0;
    u_tram_rd[57] = 32'd0;
    u_tram_rd[58] = 32'd0;
    u_tram_rd[59] = 32'd0;
    u_tram_rd[60] = 32'd0;
    u_tram_rd[61] = 32'd0;
    u_tram_rd[62] = 32'd0;
    u_tram_rd[63] = 32'd0;
    u_tram_rd[64] = 32'd0;
    u_tram_rd[65] = 32'd0;
    u_tram_rd[66] = 32'd0;
    u_tram_rd[67] = 32'd0;
    u_tram_rd[68] = 32'd0;
    u_tram_rd[69] = 32'd0;
    u_tram_rd[70] = 32'd0;
    u_tram_rd[71] = 32'd0;
    u_tram_rd[72] = 32'd0;
    u_tram_rd[73] = 32'd0;
    u_tram_rd[74] = 32'd0;
    u_tram_rd[75] = 32'd0;
    u_tram_rd[76] = 32'd0;
    u_tram_rd[77] = 32'd0;
    u_tram_rd[78] = 32'd0;
    u_tram_rd[79] = 32'd0;
    u_tram_rd[80] = 32'd0;
    u_tram_rd[81] = 32'd0;
    u_tram_rd[82] = 32'd0;
    u_tram_rd[83] = 32'd0;
    u_tram_rd[84] = 32'd0;
    u_tram_rd[85] = 32'd0;
    u_tram_rd[86] = 32'd0;
    u_tram_rd[87] = 32'd0;
    u_tram_rd[88] = 32'd0;
    u_tram_rd[89] = 32'd0;
    u_tram_rd[90] = 32'd0;
    u_tram_rd[91] = 32'd0;
    u_tram_rd[92] = 32'd0;
    u_tram_rd[93] = 32'd0;
    u_tram_rd[94] = 32'd0;
    u_tram_rd[95] = 32'd0;
    u_tram_rd[96] = 32'd0;
    u_tram_rd[97] = 32'd0;
    u_tram_rd[98] = 32'd0;
    u_tram_rd[99] = 32'd0;
    u_tram_rd[100] = 32'd0;
    u_tram_rd[101] = 32'd0;
    u_tram_rd[102] = 32'd0;
    u_tram_rd[103] = 32'd0;
    u_tram_rd[104] = 32'd0;
    u_tram_rd[105] = 32'd0;
    u_tram_rd[106] = 32'd0;
    u_tram_rd[107] = 32'd0;
    u_tram_rd[108] = 32'd0;
    u_tram_rd[109] = 32'd0;
    u_tram_rd[110] = 32'd0;
    u_tram_rd[111] = 32'd0;
    u_tram_rd[112] = 32'd0;
    u_tram_rd[113] = 32'd0;
    u_tram_rd[114] = 32'd0;
    u_tram_rd[115] = 32'd0;
    u_tram_rd[116] = 32'd0;
    u_tram_rd[117] = 32'd0;
    u_tram_rd[118] = 32'd0;
    u_tram_rd[119] = 32'd0;
    u_tram_rd[120] = 32'd0;
    u_tram_rd[121] = 32'd0;
    u_tram_rd[122] = 32'd0;
    u_tram_rd[123] = 32'd0;
    u_tram_rd[124] = 32'd0;
    u_tram_rd[125] = 32'd0;
    u_tram_rd[126] = 32'd0;
    u_tram_rd[127] = 32'd0;
    u_tram_rd[128] = 32'd0;
    u_tram_rd[129] = 32'd0;
    u_tram_rd[130] = 32'd0;
    u_tram_rd[131] = 32'd0;
    u_tram_rd[132] = 32'd0;
    u_tram_rd[133] = 32'd0;
    u_tram_rd[134] = 32'd0;
    u_tram_rd[135] = 32'd0;
    u_tram_rd[136] = 32'd0;
    u_tram_rd[137] = 32'd0;
    u_tram_rd[138] = 32'd0;
    u_tram_rd[139] = 32'd0;
    u_tram_rd[140] = 32'd0;
    u_tram_rd[141] = 32'd0;
    u_tram_rd[142] = 32'd0;
    u_tram_rd[143] = 32'd0;
    u_tram_rd[144] = 32'd0;
    u_tram_rd[145] = 32'd0;
    u_tram_rd[146] = 32'd0;
    u_tram_rd[147] = 32'd0;
    u_tram_rd[148] = 32'd0;
    u_tram_rd[149] = 32'd0;
    u_tram_rd[150] = 32'd0;
    u_tram_rd[151] = 32'd0;
    u_tram_rd[152] = 32'd0;
    u_tram_rd[153] = 32'd0;
    u_tram_rd[154] = 32'd0;
    u_tram_rd[155] = 32'd0;
    u_tram_rd[156] = 32'd0;
    u_tram_rd[157] = 32'd0;
    u_tram_rd[158] = 32'd0;
    u_tram_rd[159] = 32'd0;
    u_tram_rd[160] = 32'd0;
    u_tram_rd[161] = 32'd0;
    u_tram_rd[162] = 32'd0;
    u_tram_rd[163] = 32'd0;
    u_tram_rd[164] = 32'd0;
    u_tram_rd[165] = 32'd0;
    u_tram_rd[166] = 32'd0;
    u_tram_rd[167] = 32'd0;
    u_tram_rd[168] = 32'd0;
    u_tram_rd[169] = 32'd0;
    u_tram_rd[170] = 32'd0;
    u_tram_rd[171] = 32'd0;
    u_tram_rd[172] = 32'd0;
    u_tram_rd[173] = 32'd0;
    u_tram_rd[174] = 32'd0;
    u_tram_rd[175] = 32'd0;
    u_tram_rd[176] = 32'd0;
    u_tram_rd[177] = 32'd0;
    u_tram_rd[178] = 32'd0;
    u_tram_rd[179] = 32'd0;
    u_tram_rd[180] = 32'd0;
    u_tram_rd[181] = 32'd0;
    u_tram_rd[182] = 32'd0;
    u_tram_rd[183] = 32'd0;
    u_tram_rd[184] = 32'd0;
    u_tram_rd[185] = 32'd0;
    u_tram_rd[186] = 32'd0;
    u_tram_rd[187] = 32'd0;
    u_tram_rd[188] = 32'd0;
    u_tram_rd[189] = 32'd0;
    u_tram_rd[190] = 32'd0;
    u_tram_rd[191] = 32'd0;
    u_tram_rd[192] = 32'd0;
    u_tram_rd[193] = 32'd0;
    u_tram_rd[194] = 32'd0;
    u_tram_rd[195] = 32'd0;
    u_tram_rd[196] = 32'd0;
    u_tram_rd[197] = 32'd0;
    u_tram_rd[198] = 32'd0;
    u_tram_rd[199] = 32'd0;
    u_tram_rd[200] = 32'd0;
    u_tram_rd[201] = 32'd0;
    u_tram_rd[202] = 32'd0;
    u_tram_rd[203] = 32'd0;
    u_tram_rd[204] = 32'd0;
    u_tram_rd[205] = 32'd0;
    u_tram_rd[206] = 32'd0;
    u_tram_rd[207] = 32'd0;
    u_tram_rd[208] = 32'd0;
    u_tram_rd[209] = 32'd0;
    u_tram_rd[210] = 32'd0;
    u_tram_rd[211] = 32'd0;
    u_tram_rd[212] = 32'd0;
    u_tram_rd[213] = 32'd0;
    u_tram_rd[214] = 32'd0;
    u_tram_rd[215] = 32'd0;
    u_tram_rd[216] = 32'd0;
    u_tram_rd[217] = 32'd0;
    u_tram_rd[218] = 32'd0;
    u_tram_rd[219] = 32'd0;
    u_tram_rd[220] = 32'd0;
    u_tram_rd[221] = 32'd0;
    u_tram_rd[222] = 32'd0;
    u_tram_rd[223] = 32'd0;
    u_tram_rd[224] = 32'd0;
    u_tram_rd[225] = 32'd0;
    u_tram_rd[226] = 32'd0;
    u_tram_rd[227] = 32'd0;
    u_tram_rd[228] = 32'd0;
    u_tram_rd[229] = 32'd0;
    u_tram_rd[230] = 32'd0;
    u_tram_rd[231] = 32'd0;
    u_tram_rd[232] = 32'd0;
    u_tram_rd[233] = 32'd0;
    u_tram_rd[234] = 32'd0;
    u_tram_rd[235] = 32'd0;
    u_tram_rd[236] = 32'd0;
    u_tram_rd[237] = 32'd0;
    u_tram_rd[238] = 32'd0;
    u_tram_rd[239] = 32'd0;
    u_tram_rd[240] = 32'd0;
    u_tram_rd[241] = 32'd0;
    u_tram_rd[242] = 32'd0;
    u_tram_rd[243] = 32'd0;
    u_tram_rd[244] = 32'd0;
    u_tram_rd[245] = 32'd0;
    u_tram_rd[246] = 32'd0;
    u_tram_rd[247] = 32'd0;
    u_tram_rd[248] = 32'd0;
    u_tram_rd[249] = 32'd0;
    u_tram_rd[250] = 32'd0;
    u_tram_rd[251] = 32'd0;
    u_tram_rd[252] = 32'd0;
    u_tram_rd[253] = 32'd0;
    u_tram_rd[254] = 32'd0;
    u_tram_rd[255] = 32'd0;
    u_tram_rd[256] = 32'd0;
    u_tram_rd[257] = 32'd0;
    u_tram_rd[258] = 32'd0;
    u_tram_rd[259] = 32'd0;
    u_tram_rd[260] = 32'd0;
    u_tram_rd[261] = 32'd0;
    u_tram_rd[262] = 32'd0;
    u_tram_rd[263] = 32'd0;
    u_tram_rd[264] = 32'd0;
    u_tram_rd[265] = 32'd0;
    u_tram_rd[266] = 32'd0;
    u_tram_rd[267] = 32'd0;
    u_tram_rd[268] = 32'd0;
    u_tram_rd[269] = 32'd0;
    u_tram_rd[270] = 32'd0;
    u_tram_rd[271] = 32'd0;
    u_tram_rd[272] = 32'd0;
    u_tram_rd[273] = 32'd0;
    u_tram_rd[274] = 32'd0;
    u_tram_rd[275] = 32'd0;
    u_tram_rd[276] = 32'd0;
    u_tram_rd[277] = 32'd0;
    u_tram_rd[278] = 32'd0;
    u_tram_rd[279] = 32'd0;
    u_tram_rd[280] = 32'd0;
    u_tram_rd[281] = 32'd0;
    u_tram_rd[282] = 32'd0;
    u_tram_rd[283] = 32'd0;
    u_tram_rd[284] = 32'd0;
    u_tram_rd[285] = 32'd0;
    u_tram_rd[286] = 32'd0;
    u_tram_rd[287] = 32'd0;
    u_tram_rd[288] = 32'd0;
    u_tram_rd[289] = 32'd0;
    u_tram_rd[290] = 32'd0;
    u_tram_rd[291] = 32'd0;
    u_tram_rd[292] = 32'd0;
    u_tram_rd[293] = 32'd0;
    u_tram_rd[294] = 32'd0;
    u_tram_rd[295] = 32'd0;
    u_tram_rd[296] = 32'd0;
    u_tram_rd[297] = 32'd0;
    u_tram_rd[298] = 32'd0;
    u_tram_rd[299] = 32'd0;
    u_tram_rd[300] = 32'd0;
    u_tram_rd[301] = 32'd0;
    u_tram_rd[302] = 32'd0;
    u_tram_rd[303] = 32'd0;
    u_tram_rd[304] = 32'd0;
    u_tram_rd[305] = 32'd0;
    u_tram_rd[306] = 32'd0;
    u_tram_rd[307] = 32'd0;
    u_tram_rd[308] = 32'd0;
    u_tram_rd[309] = 32'd0;
    u_tram_rd[310] = 32'd0;
    u_tram_rd[311] = 32'd0;
    u_tram_rd[312] = 32'd0;
    u_tram_rd[313] = 32'd0;
    u_tram_rd[314] = 32'd0;
    u_tram_rd[315] = 32'd0;
    u_tram_rd[316] = 32'd0;
    u_tram_rd[317] = 32'd0;
    u_tram_rd[318] = 32'd0;
    u_tram_rd[319] = 32'd0;
    u_tram_rd[320] = 32'd0;
    u_tram_rd[321] = 32'd0;
    u_tram_rd[322] = 32'd0;
    u_tram_rd[323] = 32'd0;
    u_tram_rd[324] = 32'd0;
    u_tram_rd[325] = 32'd0;
    u_tram_rd[326] = 32'd0;
    u_tram_rd[327] = 32'd0;
    u_tram_rd[328] = 32'd0;
    u_tram_rd[329] = 32'd0;
    u_tram_rd[330] = 32'd0;
    u_tram_rd[331] = 32'd0;
    u_tram_rd[332] = 32'd0;
    u_tram_rd[333] = 32'd0;
    u_tram_rd[334] = 32'd0;
    u_tram_rd[335] = 32'd0;
    u_tram_rd[336] = 32'd0;
    u_tram_rd[337] = 32'd0;
    u_tram_rd[338] = 32'd0;
    u_tram_rd[339] = 32'd0;
    u_tram_rd[340] = 32'd0;
    u_tram_rd[341] = 32'd0;
    u_tram_rd[342] = 32'd0;
    u_tram_rd[343] = 32'd0;
    u_tram_rd[344] = 32'd0;
    u_tram_rd[345] = 32'd0;
    u_tram_rd[346] = 32'd0;
    u_tram_rd[347] = 32'd0;
    u_tram_rd[348] = 32'd0;
    u_tram_rd[349] = 32'd0;
    u_tram_rd[350] = 32'd0;
    u_tram_rd[351] = 32'd0;
    u_tram_rd[352] = 32'd0;
    u_tram_rd[353] = 32'd0;
    u_tram_rd[354] = 32'd0;
    u_tram_rd[355] = 32'd0;
    u_tram_rd[356] = 32'd0;
    u_tram_rd[357] = 32'd0;
    u_tram_rd[358] = 32'd0;
    u_tram_rd[359] = 32'd0;
    u_tram_rd[360] = 32'd0;
    u_tram_rd[361] = 32'd0;
    u_tram_rd[362] = 32'd0;
    u_tram_rd[363] = 32'd0;
    u_tram_rd[364] = 32'd0;
    u_tram_rd[365] = 32'd0;
    u_tram_rd[366] = 32'd0;
    u_tram_rd[367] = 32'd0;
    u_tram_rd[368] = 32'd0;
    u_tram_rd[369] = 32'd0;
    u_tram_rd[370] = 32'd0;
    u_tram_rd[371] = 32'd0;
    u_tram_rd[372] = 32'd0;
    u_tram_rd[373] = 32'd0;
    u_tram_rd[374] = 32'd0;
    u_tram_rd[375] = 32'd0;
    u_tram_rd[376] = 32'd0;
    u_tram_rd[377] = 32'd0;
    u_tram_rd[378] = 32'd0;
    u_tram_rd[379] = 32'd0;
    u_tram_rd[380] = 32'd0;
    u_tram_rd[381] = 32'd0;
    u_tram_rd[382] = 32'd0;
    u_tram_rd[383] = 32'd0;
    u_tram_rd[384] = 32'd0;
    u_tram_rd[385] = 32'd0;
    u_tram_rd[386] = 32'd0;
    u_tram_rd[387] = 32'd0;
    u_tram_rd[388] = 32'd0;
    u_tram_rd[389] = 32'd0;
    u_tram_rd[390] = 32'd0;
    u_tram_rd[391] = 32'd0;
    u_tram_rd[392] = 32'd0;
    u_tram_rd[393] = 32'd0;
    u_tram_rd[394] = 32'd0;
    u_tram_rd[395] = 32'd0;
    u_tram_rd[396] = 32'd0;
    u_tram_rd[397] = 32'd0;
    u_tram_rd[398] = 32'd0;
    u_tram_rd[399] = 32'd0;
    u_tram_rd[400] = 32'd0;
    u_tram_rd[401] = 32'd0;
    u_tram_rd[402] = 32'd0;
    u_tram_rd[403] = 32'd0;
    u_tram_rd[404] = 32'd0;
    u_tram_rd[405] = 32'd0;
    u_tram_rd[406] = 32'd0;
    u_tram_rd[407] = 32'd0;
    u_tram_rd[408] = 32'd0;
    u_tram_rd[409] = 32'd0;
    u_tram_rd[410] = 32'd0;
    u_tram_rd[411] = 32'd0;
    u_tram_rd[412] = 32'd0;
    u_tram_rd[413] = 32'd0;
    u_tram_rd[414] = 32'd0;
    u_tram_rd[415] = 32'd0;
    u_tram_rd[416] = 32'd0;
    u_tram_rd[417] = 32'd0;
    u_tram_rd[418] = 32'd0;
    u_tram_rd[419] = 32'd0;
    u_tram_rd[420] = 32'd0;
    u_tram_rd[421] = 32'd0;
    u_tram_rd[422] = 32'd0;
    u_tram_rd[423] = 32'd0;
    u_tram_rd[424] = 32'd0;
    u_tram_rd[425] = 32'd0;
    u_tram_rd[426] = 32'd0;
    u_tram_rd[427] = 32'd0;
    u_tram_rd[428] = 32'd0;
    u_tram_rd[429] = 32'd0;
    u_tram_rd[430] = 32'd0;
    u_tram_rd[431] = 32'd0;
    u_tram_rd[432] = 32'd0;
    u_tram_rd[433] = 32'd0;
    u_tram_rd[434] = 32'd0;
    u_tram_rd[435] = 32'd0;
    u_tram_rd[436] = 32'd0;
    u_tram_rd[437] = 32'd0;
    u_tram_rd[438] = 32'd0;
    u_tram_rd[439] = 32'd0;
    u_tram_rd[440] = 32'd0;
    u_tram_rd[441] = 32'd0;
    u_tram_rd[442] = 32'd0;
    u_tram_rd[443] = 32'd0;
    u_tram_rd[444] = 32'd0;
    u_tram_rd[445] = 32'd0;
    u_tram_rd[446] = 32'd0;
    u_tram_rd[447] = 32'd0;
    u_tram_rd[448] = 32'd0;
    u_tram_rd[449] = 32'd0;
    u_tram_rd[450] = 32'd0;
    u_tram_rd[451] = 32'd0;
    u_tram_rd[452] = 32'd0;
    u_tram_rd[453] = 32'd0;
    u_tram_rd[454] = 32'd0;
    u_tram_rd[455] = 32'd0;
    u_tram_rd[456] = 32'd0;
    u_tram_rd[457] = 32'd0;
    u_tram_rd[458] = 32'd0;
    u_tram_rd[459] = 32'd0;
    u_tram_rd[460] = 32'd0;
    u_tram_rd[461] = 32'd0;
    u_tram_rd[462] = 32'd0;
    u_tram_rd[463] = 32'd0;
    u_tram_rd[464] = 32'd0;
    u_tram_rd[465] = 32'd0;
    u_tram_rd[466] = 32'd0;
    u_tram_rd[467] = 32'd0;
    u_tram_rd[468] = 32'd0;
    u_tram_rd[469] = 32'd0;
    u_tram_rd[470] = 32'd0;
    u_tram_rd[471] = 32'd0;
    u_tram_rd[472] = 32'd0;
    u_tram_rd[473] = 32'd0;
    u_tram_rd[474] = 32'd0;
    u_tram_rd[475] = 32'd0;
    u_tram_rd[476] = 32'd0;
    u_tram_rd[477] = 32'd0;
    u_tram_rd[478] = 32'd0;
    u_tram_rd[479] = 32'd0;
    u_tram_rd[480] = 32'd0;
    u_tram_rd[481] = 32'd0;
    u_tram_rd[482] = 32'd0;
    u_tram_rd[483] = 32'd0;
    u_tram_rd[484] = 32'd0;
    u_tram_rd[485] = 32'd0;
    u_tram_rd[486] = 32'd0;
    u_tram_rd[487] = 32'd0;
    u_tram_rd[488] = 32'd0;
    u_tram_rd[489] = 32'd0;
    u_tram_rd[490] = 32'd0;
    u_tram_rd[491] = 32'd0;
    u_tram_rd[492] = 32'd0;
    u_tram_rd[493] = 32'd0;
    u_tram_rd[494] = 32'd0;
    u_tram_rd[495] = 32'd0;
    u_tram_rd[496] = 32'd0;
    u_tram_rd[497] = 32'd0;
    u_tram_rd[498] = 32'd0;
    u_tram_rd[499] = 32'd0;
    u_tram_rd[500] = 32'd0;
    u_tram_rd[501] = 32'd0;
    u_tram_rd[502] = 32'd0;
    u_tram_rd[503] = 32'd0;
    u_tram_rd[504] = 32'd0;
    u_tram_rd[505] = 32'd0;
    u_tram_rd[506] = 32'd0;
    u_tram_rd[507] = 32'd0;
    u_tram_rd[508] = 32'd0;
    u_tram_rd[509] = 32'd0;
    u_tram_rd[510] = 32'd0;
    u_tram_rd[511] = 32'd0;
    u_tram_rd[512] = 32'd0;
    u_tram_rd[513] = 32'd0;
    u_tram_rd[514] = 32'd0;
    u_tram_rd[515] = 32'd0;
    u_tram_rd[516] = 32'd0;
    u_tram_rd[517] = 32'd0;
    u_tram_rd[518] = 32'd0;
    u_tram_rd[519] = 32'd0;
    u_tram_rd[520] = 32'd0;
    u_tram_rd[521] = 32'd0;
    u_tram_rd[522] = 32'd0;
    u_tram_rd[523] = 32'd0;
    u_tram_rd[524] = 32'd0;
    u_tram_rd[525] = 32'd0;
    u_tram_rd[526] = 32'd0;
    u_tram_rd[527] = 32'd0;
    u_tram_rd[528] = 32'd0;
    u_tram_rd[529] = 32'd0;
    u_tram_rd[530] = 32'd0;
    u_tram_rd[531] = 32'd0;
    u_tram_rd[532] = 32'd0;
    u_tram_rd[533] = 32'd0;
    u_tram_rd[534] = 32'd0;
    u_tram_rd[535] = 32'd0;
    u_tram_rd[536] = 32'd0;
    u_tram_rd[537] = 32'd0;
    u_tram_rd[538] = 32'd0;
    u_tram_rd[539] = 32'd0;
    u_tram_rd[540] = 32'd0;
    u_tram_rd[541] = 32'd0;
    u_tram_rd[542] = 32'd0;
    u_tram_rd[543] = 32'd0;
    u_tram_rd[544] = 32'd0;
    u_tram_rd[545] = 32'd0;
    u_tram_rd[546] = 32'd0;
    u_tram_rd[547] = 32'd0;
    u_tram_rd[548] = 32'd0;
    u_tram_rd[549] = 32'd0;
    u_tram_rd[550] = 32'd0;
    u_tram_rd[551] = 32'd0;
    u_tram_rd[552] = 32'd0;
    u_tram_rd[553] = 32'd0;
    u_tram_rd[554] = 32'd0;
    u_tram_rd[555] = 32'd0;
    u_tram_rd[556] = 32'd0;
    u_tram_rd[557] = 32'd0;
    u_tram_rd[558] = 32'd0;
    u_tram_rd[559] = 32'd0;
    u_tram_rd[560] = 32'd0;
    u_tram_rd[561] = 32'd0;
    u_tram_rd[562] = 32'd0;
    u_tram_rd[563] = 32'd0;
    u_tram_rd[564] = 32'd0;
    u_tram_rd[565] = 32'd0;
    u_tram_rd[566] = 32'd0;
    u_tram_rd[567] = 32'd0;
    u_tram_rd[568] = 32'd0;
    u_tram_rd[569] = 32'd0;
    u_tram_rd[570] = 32'd0;
    u_tram_rd[571] = 32'd0;
    u_tram_rd[572] = 32'd0;
    u_tram_rd[573] = 32'd0;
    u_tram_rd[574] = 32'd0;
    u_tram_rd[575] = 32'd0;
    u_tram_rd[576] = 32'd0;
    u_tram_rd[577] = 32'd0;
    u_tram_rd[578] = 32'd0;
    u_tram_rd[579] = 32'd0;
    u_tram_rd[580] = 32'd0;
    u_tram_rd[581] = 32'd0;
    u_tram_rd[582] = 32'd0;
    u_tram_rd[583] = 32'd0;
    u_tram_rd[584] = 32'd0;
    u_tram_rd[585] = 32'd0;
    u_tram_rd[586] = 32'd0;
    u_tram_rd[587] = 32'd0;
    u_tram_rd[588] = 32'd0;
    u_tram_rd[589] = 32'd0;
    u_tram_rd[590] = 32'd0;
    u_tram_rd[591] = 32'd0;
    u_tram_rd[592] = 32'd0;
    u_tram_rd[593] = 32'd0;
    u_tram_rd[594] = 32'd0;
    u_tram_rd[595] = 32'd0;
    u_tram_rd[596] = 32'd0;
    u_tram_rd[597] = 32'd0;
    u_tram_rd[598] = 32'd0;
    u_tram_rd[599] = 32'd0;
    u_tram_rd[600] = 32'd0;
    u_tram_rd[601] = 32'd0;
    u_tram_rd[602] = 32'd0;
    u_tram_rd[603] = 32'd0;
    u_tram_rd[604] = 32'd0;
    u_tram_rd[605] = 32'd0;
    u_tram_rd[606] = 32'd0;
    u_tram_rd[607] = 32'd0;
    u_tram_rd[608] = 32'd0;
    u_tram_rd[609] = 32'd0;
    u_tram_rd[610] = 32'd0;
    u_tram_rd[611] = 32'd0;
    u_tram_rd[612] = 32'd0;
    u_tram_rd[613] = 32'd0;
    u_tram_rd[614] = 32'd0;
    u_tram_rd[615] = 32'd0;
    u_tram_rd[616] = 32'd0;
    u_tram_rd[617] = 32'd0;
    u_tram_rd[618] = 32'd0;
    u_tram_rd[619] = 32'd0;
    u_tram_rd[620] = 32'd0;
    u_tram_rd[621] = 32'd0;
    u_tram_rd[622] = 32'd0;
    u_tram_rd[623] = 32'd0;
    u_tram_rd[624] = 32'd0;
    u_tram_rd[625] = 32'd0;
    u_tram_rd[626] = 32'd0;
    u_tram_rd[627] = 32'd0;
    u_tram_rd[628] = 32'd0;
    u_tram_rd[629] = 32'd0;
    u_tram_rd[630] = 32'd0;
    u_tram_rd[631] = 32'd0;
    u_tram_rd[632] = 32'd0;
    u_tram_rd[633] = 32'd0;
    u_tram_rd[634] = 32'd0;
    u_tram_rd[635] = 32'd0;
    u_tram_rd[636] = 32'd0;
    u_tram_rd[637] = 32'd0;
    u_tram_rd[638] = 32'd0;
    u_tram_rd[639] = 32'd0;
    u_tram_rd[640] = 32'd0;
    u_tram_rd[641] = 32'd0;
    u_tram_rd[642] = 32'd0;
    u_tram_rd[643] = 32'd0;
    u_tram_rd[644] = 32'd0;
    u_tram_rd[645] = 32'd0;
    u_tram_rd[646] = 32'd0;
    u_tram_rd[647] = 32'd0;
    u_tram_rd[648] = 32'd0;
    u_tram_rd[649] = 32'd0;
    u_tram_rd[650] = 32'd0;
    u_tram_rd[651] = 32'd0;
    u_tram_rd[652] = 32'd0;
    u_tram_rd[653] = 32'd0;
    u_tram_rd[654] = 32'd0;
    u_tram_rd[655] = 32'd0;
    u_tram_rd[656] = 32'd0;
    u_tram_rd[657] = 32'd0;
    u_tram_rd[658] = 32'd0;
    u_tram_rd[659] = 32'd0;
    u_tram_rd[660] = 32'd0;
    u_tram_rd[661] = 32'd0;
    u_tram_rd[662] = 32'd0;
    u_tram_rd[663] = 32'd0;
    u_tram_rd[664] = 32'd0;
    u_tram_rd[665] = 32'd0;
    u_tram_rd[666] = 32'd0;
    u_tram_rd[667] = 32'd0;
    u_tram_rd[668] = 32'd0;
    u_tram_rd[669] = 32'd0;
    u_tram_rd[670] = 32'd0;
    u_tram_rd[671] = 32'd0;
    u_tram_rd[672] = 32'd0;
    u_tram_rd[673] = 32'd0;
    u_tram_rd[674] = 32'd0;
    u_tram_rd[675] = 32'd0;
    u_tram_rd[676] = 32'd0;
    u_tram_rd[677] = 32'd0;
    u_tram_rd[678] = 32'd0;
    u_tram_rd[679] = 32'd0;
    u_tram_rd[680] = 32'd0;
    u_tram_rd[681] = 32'd0;
    u_tram_rd[682] = 32'd0;
    u_tram_rd[683] = 32'd0;
    u_tram_rd[684] = 32'd0;
    u_tram_rd[685] = 32'd0;
    u_tram_rd[686] = 32'd0;
    u_tram_rd[687] = 32'd0;
    u_tram_rd[688] = 32'd0;
    u_tram_rd[689] = 32'd0;
    u_tram_rd[690] = 32'd0;
    u_tram_rd[691] = 32'd0;
    u_tram_rd[692] = 32'd0;
    u_tram_rd[693] = 32'd0;
    u_tram_rd[694] = 32'd0;
    u_tram_rd[695] = 32'd0;
    u_tram_rd[696] = 32'd0;
    u_tram_rd[697] = 32'd0;
    u_tram_rd[698] = 32'd0;
    u_tram_rd[699] = 32'd0;
    u_tram_rd[700] = 32'd0;
    u_tram_rd[701] = 32'd0;
    u_tram_rd[702] = 32'd0;
    u_tram_rd[703] = 32'd0;
    u_tram_rd[704] = 32'd0;
    u_tram_rd[705] = 32'd0;
    u_tram_rd[706] = 32'd0;
    u_tram_rd[707] = 32'd0;
    u_tram_rd[708] = 32'd0;
    u_tram_rd[709] = 32'd0;
    u_tram_rd[710] = 32'd0;
    u_tram_rd[711] = 32'd0;
    u_tram_rd[712] = 32'd0;
    u_tram_rd[713] = 32'd0;
    u_tram_rd[714] = 32'd0;
    u_tram_rd[715] = 32'd0;
    u_tram_rd[716] = 32'd0;
    u_tram_rd[717] = 32'd0;
    u_tram_rd[718] = 32'd0;
    u_tram_rd[719] = 32'd0;
    u_tram_rd[720] = 32'd0;
    u_tram_rd[721] = 32'd0;
    u_tram_rd[722] = 32'd0;
    u_tram_rd[723] = 32'd0;
    u_tram_rd[724] = 32'd0;
    u_tram_rd[725] = 32'd0;
    u_tram_rd[726] = 32'd0;
    u_tram_rd[727] = 32'd0;
    u_tram_rd[728] = 32'd0;
    u_tram_rd[729] = 32'd0;
    u_tram_rd[730] = 32'd0;
    u_tram_rd[731] = 32'd0;
    u_tram_rd[732] = 32'd0;
    u_tram_rd[733] = 32'd0;
    u_tram_rd[734] = 32'd0;
    u_tram_rd[735] = 32'd0;
    u_tram_rd[736] = 32'd0;
    u_tram_rd[737] = 32'd0;
    u_tram_rd[738] = 32'd0;
    u_tram_rd[739] = 32'd0;
    u_tram_rd[740] = 32'd0;
    u_tram_rd[741] = 32'd0;
    u_tram_rd[742] = 32'd0;
    u_tram_rd[743] = 32'd0;
    u_tram_rd[744] = 32'd0;
    u_tram_rd[745] = 32'd0;
    u_tram_rd[746] = 32'd0;
    u_tram_rd[747] = 32'd0;
    u_tram_rd[748] = 32'd0;
    u_tram_rd[749] = 32'd0;
    u_tram_rd[750] = 32'd0;
    u_tram_rd[751] = 32'd0;
    u_tram_rd[752] = 32'd0;
    u_tram_rd[753] = 32'd0;
    u_tram_rd[754] = 32'd0;
    u_tram_rd[755] = 32'd0;
    u_tram_rd[756] = 32'd0;
    u_tram_rd[757] = 32'd0;
    u_tram_rd[758] = 32'd0;
    u_tram_rd[759] = 32'd0;
    u_tram_rd[760] = 32'd0;
    u_tram_rd[761] = 32'd0;
    u_tram_rd[762] = 32'd0;
    u_tram_rd[763] = 32'd0;
    u_tram_rd[764] = 32'd0;
    u_tram_rd[765] = 32'd0;
    u_tram_rd[766] = 32'd0;
    u_tram_rd[767] = 32'd0;
    u_tram_rd[768] = 32'd0;
    u_tram_rd[769] = 32'd0;
    u_tram_rd[770] = 32'd0;
    u_tram_rd[771] = 32'd0;
    u_tram_rd[772] = 32'd0;
    u_tram_rd[773] = 32'd0;
    u_tram_rd[774] = 32'd0;
    u_tram_rd[775] = 32'd0;
    u_tram_rd[776] = 32'd0;
    u_tram_rd[777] = 32'd0;
    u_tram_rd[778] = 32'd0;
    u_tram_rd[779] = 32'd0;
    u_tram_rd[780] = 32'd0;
    u_tram_rd[781] = 32'd0;
    u_tram_rd[782] = 32'd0;
    u_tram_rd[783] = 32'd0;
    u_tram_rd[784] = 32'd0;
    u_tram_rd[785] = 32'd0;
    u_tram_rd[786] = 32'd0;
    u_tram_rd[787] = 32'd0;
    u_tram_rd[788] = 32'd0;
    u_tram_rd[789] = 32'd0;
    u_tram_rd[790] = 32'd0;
    u_tram_rd[791] = 32'd0;
    u_tram_rd[792] = 32'd0;
    u_tram_rd[793] = 32'd0;
    u_tram_rd[794] = 32'd0;
    u_tram_rd[795] = 32'd0;
    u_tram_rd[796] = 32'd0;
    u_tram_rd[797] = 32'd0;
    u_tram_rd[798] = 32'd0;
    u_tram_rd[799] = 32'd0;
    u_tram_rd[800] = 32'd0;
    u_tram_rd[801] = 32'd0;
    u_tram_rd[802] = 32'd0;
    u_tram_rd[803] = 32'd0;
    u_tram_rd[804] = 32'd0;
    u_tram_rd[805] = 32'd0;
    u_tram_rd[806] = 32'd0;
    u_tram_rd[807] = 32'd0;
    u_tram_rd[808] = 32'd0;
    u_tram_rd[809] = 32'd0;
    u_tram_rd[810] = 32'd0;
    u_tram_rd[811] = 32'd0;
    u_tram_rd[812] = 32'd0;
    u_tram_rd[813] = 32'd0;
    u_tram_rd[814] = 32'd0;
    u_tram_rd[815] = 32'd0;
    u_tram_rd[816] = 32'd0;
    u_tram_rd[817] = 32'd0;
    u_tram_rd[818] = 32'd0;
    u_tram_rd[819] = 32'd0;
    u_tram_rd[820] = 32'd0;
    u_tram_rd[821] = 32'd0;
    u_tram_rd[822] = 32'd0;
    u_tram_rd[823] = 32'd0;
    u_tram_rd[824] = 32'd0;
    u_tram_rd[825] = 32'd0;
    u_tram_rd[826] = 32'd0;
    u_tram_rd[827] = 32'd0;
    u_tram_rd[828] = 32'd0;
    u_tram_rd[829] = 32'd0;
    u_tram_rd[830] = 32'd0;
    u_tram_rd[831] = 32'd0;
    u_tram_rd[832] = 32'd0;
    u_tram_rd[833] = 32'd0;
    u_tram_rd[834] = 32'd0;
    u_tram_rd[835] = 32'd0;
    u_tram_rd[836] = 32'd0;
    u_tram_rd[837] = 32'd0;
    u_tram_rd[838] = 32'd0;
    u_tram_rd[839] = 32'd0;
    u_tram_rd[840] = 32'd0;
    u_tram_rd[841] = 32'd0;
    u_tram_rd[842] = 32'd0;
    u_tram_rd[843] = 32'd0;
    u_tram_rd[844] = 32'd0;
    u_tram_rd[845] = 32'd0;
    u_tram_rd[846] = 32'd0;
    u_tram_rd[847] = 32'd0;
    u_tram_rd[848] = 32'd0;
    u_tram_rd[849] = 32'd0;
    u_tram_rd[850] = 32'd0;
    u_tram_rd[851] = 32'd0;
    u_tram_rd[852] = 32'd0;
    u_tram_rd[853] = 32'd0;
    u_tram_rd[854] = 32'd0;
    u_tram_rd[855] = 32'd0;
    u_tram_rd[856] = 32'd0;
    u_tram_rd[857] = 32'd0;
    u_tram_rd[858] = 32'd0;
    u_tram_rd[859] = 32'd0;
    u_tram_rd[860] = 32'd0;
    u_tram_rd[861] = 32'd0;
    u_tram_rd[862] = 32'd0;
    u_tram_rd[863] = 32'd0;
    u_tram_rd[864] = 32'd0;
    u_tram_rd[865] = 32'd0;
    u_tram_rd[866] = 32'd0;
    u_tram_rd[867] = 32'd0;
    u_tram_rd[868] = 32'd0;
    u_tram_rd[869] = 32'd0;
    u_tram_rd[870] = 32'd0;
    u_tram_rd[871] = 32'd0;
    u_tram_rd[872] = 32'd0;
    u_tram_rd[873] = 32'd0;
    u_tram_rd[874] = 32'd0;
    u_tram_rd[875] = 32'd0;
    u_tram_rd[876] = 32'd0;
    u_tram_rd[877] = 32'd0;
    u_tram_rd[878] = 32'd0;
    u_tram_rd[879] = 32'd0;
    u_tram_rd[880] = 32'd0;
    u_tram_rd[881] = 32'd0;
    u_tram_rd[882] = 32'd0;
    u_tram_rd[883] = 32'd0;
    u_tram_rd[884] = 32'd0;
    u_tram_rd[885] = 32'd0;
    u_tram_rd[886] = 32'd0;
    u_tram_rd[887] = 32'd0;
    u_tram_rd[888] = 32'd0;
    u_tram_rd[889] = 32'd0;
    u_tram_rd[890] = 32'd0;
    u_tram_rd[891] = 32'd0;
    u_tram_rd[892] = 32'd0;
    u_tram_rd[893] = 32'd0;
    u_tram_rd[894] = 32'd0;
    u_tram_rd[895] = 32'd0;
    u_tram_rd[896] = 32'd0;
    u_tram_rd[897] = 32'd0;
    u_tram_rd[898] = 32'd0;
    u_tram_rd[899] = 32'd0;
    u_tram_rd[900] = 32'd0;
    u_tram_rd[901] = 32'd0;
    u_tram_rd[902] = 32'd0;
    u_tram_rd[903] = 32'd0;
    u_tram_rd[904] = 32'd0;
    u_tram_rd[905] = 32'd0;
    u_tram_rd[906] = 32'd0;
    u_tram_rd[907] = 32'd0;
    u_tram_rd[908] = 32'd0;
    u_tram_rd[909] = 32'd0;
    u_tram_rd[910] = 32'd0;
    u_tram_rd[911] = 32'd0;
    u_tram_rd[912] = 32'd0;
    u_tram_rd[913] = 32'd0;
    u_tram_rd[914] = 32'd0;
    u_tram_rd[915] = 32'd0;
    u_tram_rd[916] = 32'd0;
    u_tram_rd[917] = 32'd0;
    u_tram_rd[918] = 32'd0;
    u_tram_rd[919] = 32'd0;
    u_tram_rd[920] = 32'd0;
    u_tram_rd[921] = 32'd0;
    u_tram_rd[922] = 32'd0;
    u_tram_rd[923] = 32'd0;
    u_tram_rd[924] = 32'd0;
    u_tram_rd[925] = 32'd0;
    u_tram_rd[926] = 32'd0;
    u_tram_rd[927] = 32'd0;
    u_tram_rd[928] = 32'd0;
    u_tram_rd[929] = 32'd0;
    u_tram_rd[930] = 32'd0;
    u_tram_rd[931] = 32'd0;
    u_tram_rd[932] = 32'd0;
    u_tram_rd[933] = 32'd0;
    u_tram_rd[934] = 32'd0;
    u_tram_rd[935] = 32'd0;
    u_tram_rd[936] = 32'd0;
    u_tram_rd[937] = 32'd0;
    u_tram_rd[938] = 32'd0;
    u_tram_rd[939] = 32'd0;
    u_tram_rd[940] = 32'd0;
    u_tram_rd[941] = 32'd0;
    u_tram_rd[942] = 32'd0;
    u_tram_rd[943] = 32'd0;
    u_tram_rd[944] = 32'd0;
    u_tram_rd[945] = 32'd0;
    u_tram_rd[946] = 32'd0;
    u_tram_rd[947] = 32'd0;
    u_tram_rd[948] = 32'd0;
    u_tram_rd[949] = 32'd0;
    u_tram_rd[950] = 32'd0;
    u_tram_rd[951] = 32'd0;
    u_tram_rd[952] = 32'd0;
    u_tram_rd[953] = 32'd0;
    u_tram_rd[954] = 32'd0;
    u_tram_rd[955] = 32'd0;
    u_tram_rd[956] = 32'd0;
    u_tram_rd[957] = 32'd0;
    u_tram_rd[958] = 32'd0;
    u_tram_rd[959] = 32'd0;
    u_tram_rd[960] = 32'd0;
    u_tram_rd[961] = 32'd0;
    u_tram_rd[962] = 32'd0;
    u_tram_rd[963] = 32'd0;
    u_tram_rd[964] = 32'd0;
    u_tram_rd[965] = 32'd0;
    u_tram_rd[966] = 32'd0;
    u_tram_rd[967] = 32'd0;
    u_tram_rd[968] = 32'd0;
    u_tram_rd[969] = 32'd0;
    u_tram_rd[970] = 32'd0;
    u_tram_rd[971] = 32'd0;
    u_tram_rd[972] = 32'd0;
    u_tram_rd[973] = 32'd0;
    u_tram_rd[974] = 32'd0;
    u_tram_rd[975] = 32'd0;
    u_tram_rd[976] = 32'd0;
    u_tram_rd[977] = 32'd0;
    u_tram_rd[978] = 32'd0;
    u_tram_rd[979] = 32'd0;
    u_tram_rd[980] = 32'd0;
    u_tram_rd[981] = 32'd0;
    u_tram_rd[982] = 32'd0;
    u_tram_rd[983] = 32'd0;
    u_tram_rd[984] = 32'd0;
    u_tram_rd[985] = 32'd0;
    u_tram_rd[986] = 32'd0;
    u_tram_rd[987] = 32'd0;
    u_tram_rd[988] = 32'd0;
    u_tram_rd[989] = 32'd0;
    u_tram_rd[990] = 32'd0;
    u_tram_rd[991] = 32'd0;
    u_tram_rd[992] = 32'd0;
    u_tram_rd[993] = 32'd0;
    u_tram_rd[994] = 32'd0;
    u_tram_rd[995] = 32'd0;
    u_tram_rd[996] = 32'd0;
    u_tram_rd[997] = 32'd0;
    u_tram_rd[998] = 32'd0;
    u_tram_rd[999] = 32'd0;
    u_tram_rd[1000] = 32'd0;
    u_tram_rd[1001] = 32'd0;
    u_tram_rd[1002] = 32'd0;
    u_tram_rd[1003] = 32'd0;
    u_tram_rd[1004] = 32'd0;
    u_tram_rd[1005] = 32'd0;
    u_tram_rd[1006] = 32'd0;
    u_tram_rd[1007] = 32'd0;
    u_tram_rd[1008] = 32'd0;
    u_tram_rd[1009] = 32'd0;
    u_tram_rd[1010] = 32'd0;
    u_tram_rd[1011] = 32'd0;
    u_tram_rd[1012] = 32'd0;
    u_tram_rd[1013] = 32'd0;
    u_tram_rd[1014] = 32'd0;
    u_tram_rd[1015] = 32'd0;
    u_tram_rd[1016] = 32'd0;
    u_tram_rd[1017] = 32'd0;
    u_tram_rd[1018] = 32'd0;
    u_tram_rd[1019] = 32'd0;
    u_tram_rd[1020] = 32'd0;
    u_tram_rd[1021] = 32'd0;
    u_tram_rd[1022] = 32'd0;
    u_tram_rd[1023] = 32'd0;
  end
  always @(posedge clk) begin
    if (u_tram_w_en)
      u_tram_rd[u_tram_w_addr] <= u_tram_w_data;
  end
  reg [9:0] _2_;
  always @(posedge clk) begin
    _2_ <= o_wb_adr[11:2];
  end
  assign u_tram_r_data = u_tram_rd[_2_];
  assign o_sd_spi_cs = ~ (* src = "rtl/soc.py:155" *) sd_spi_cs_reg;
  assign \$1  = tram_en & (* src = "rtl/soc.py:177" *) o_trace_valid;
  assign \$2  = ~ (* src = "rtl/soc.py:189" *) o_wb_adr[16];
  assign \$3  = tram_en & (* src = "rtl/soc.py:177" *) o_trace_valid;
  assign \$4  = u_tram_w_addr + (* src = "rtl/soc.py:179" *) 1'h1;
  assign \$5  = ~ (* src = "rtl/soc.py:184" *) cpu_ack;
  assign \$6  = o_wb_stb & (* src = "rtl/soc.py:184" *) \$5 ;
  assign \$7  = o_wb_stb & (* src = "rtl/soc.py:215" *) i_wb_we;
  assign \$8  = o_wb_stb & (* src = "rtl/soc.py:218" *) i_wb_we;
  assign \$9  = o_wb_stb & (* src = "rtl/soc.py:224" *) i_wb_we;
  (* src = "rtl/soc.py:162" *)
  always @(posedge clk)
    o_ebreak <= \$10 ;
  (* src = "rtl/soc.py:173" *)
  always @(posedge clk)
    u_tram_w_addr <= \$11 ;
  (* src = "rtl/soc.py:183" *)
  always @(posedge clk)
    cpu_ack <= \$12 ;
  (* src = "rtl/soc.py:151" *)
  always @(posedge clk)
    sd_spi_cs_reg <= \$13 ;
  (* src = "rtl/soc.py:152" *)
  always @(posedge clk)
    i_clkdiv <= \$14 ;
  (* src = "rtl/soc.py:174" *)
  always @(posedge clk)
    tram_en <= \$15 ;
  (* src = "rtl/soc.py:112" *)
  \top.u_clint  u_clint (
    .clk(clk),
    .i_wb_dat(i_wb_dat),
    .i_wb_stb(i_wb_stb),
    .i_wb_we(i_wb_we),
    .o_irq_timer(i_irq_timer),
    .o_wb_dat(\o_wb_dat$77 ),
    .\port$1291$0 (o_wb_adr[23:0]),
    .rst(rst)
  );
  (* src = "rtl/soc.py:103" *)
  \top.u_cpu  u_cpu (
    .clk(clk),
    .i_irq_timer(i_irq_timer),
    .\i_wb_ack$49 (i_wb_ack),
    .\i_wb_dat$48 (\i_wb_dat$73 ),
    .o_ebreak(\o_ebreak$86 ),
    .o_trace_valid(o_trace_valid),
    .o_wb_adr(o_wb_adr),
    .o_wb_dat(i_wb_dat),
    .o_wb_stb(o_wb_stb),
    .o_wb_we(i_wb_we),
    .\pipe_mem_wb$pc (u_tram_w_data),
    .rst(rst)
  );
  (* src = "rtl/soc.py:110" *)
  \top.u_sd_spi  u_sd_spi (
    .clk(clk),
    .i_clkdiv(i_clkdiv),
    .i_data(i_wb_dat[7:0]),
    .i_en(i_en),
    .i_spi_miso(i_sd_spi_miso),
    .o_busy(o_busy),
    .o_spi_mosi(o_sd_spi_mosi),
    .o_spi_sclk(o_sd_spi_sclk),
    .rst(rst),
    .shift(o_data)
  );
  (* src = "rtl/soc.py:111" *)
  \top.u_sdram  u_sdram (
    .clk(clk),
    .cmd(\$16 ),
    .i_SDRAM_DQ(i_SDRAM_DQ),
    .i_wb_dat(i_wb_dat),
    .i_wb_stb(\i_wb_stb$38 ),
    .i_wb_we(i_wb_we),
    .o_SDRAM_A(o_SDRAM_A),
    .o_SDRAM_BA(o_SDRAM_BA),
    .o_SDRAM_DQ(o_SDRAM_DQ),
    .o_SDRAM_DQM(o_SDRAM_DQM),
    .o_SDRAM_DQ_OE(o_SDRAM_DQ_OE),
    .o_wb_ack(\o_wb_ack$85 ),
    .o_wb_dat(\o_wb_dat$84 ),
    .\port$1291$0 (o_wb_adr[24:0]),
    .rst(rst)
  );
  (* src = "rtl/soc.py:113" *)
  \top.u_uart  u_uart (
    .clk(clk),
    .i_rxd(i_rxd),
    .i_wb_dat(i_wb_dat),
    .i_wb_we(i_wb_we),
    .o_txd(o_txd),
    .o_wb_ack(\i_wb_stb$32 ),
    .o_wb_dat(\o_wb_dat$79 ),
    .\port$1291$0 (o_wb_adr[23:0]),
    .rst(rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    i_wb_stb = 1'h0;
    casez (o_wb_adr[31:28])
      4'h0:
          /* empty */;
      4'h1:
          casez (o_wb_adr[27:24])
            4'h1:
                i_wb_stb = o_wb_stb;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \i_wb_stb$32  = 1'h0;
    casez (o_wb_adr[31:28])
      4'h0:
          /* empty */;
      4'h1:
          casez (o_wb_adr[27:24])
            4'h1:
                /* empty */;
            4'h0:
                \i_wb_stb$32  = o_wb_stb;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \i_wb_stb$38  = 1'h0;
    casez (o_wb_adr[31:28])
      4'h0:
          /* empty */;
      4'h1:
          /* empty */;
      4'h2:
          /* empty */;
      4'h8:
          \i_wb_stb$38  = o_wb_stb;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    u_ram_w_en = 1'h0;
    casez (o_wb_adr[31:28])
      4'h0:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
          end else begin
            if (i_wb_we) begin
              u_ram_w_en = 1'h1;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    i_en = 1'h0;
    casez (o_wb_adr[31:28])
      4'h0:
          /* empty */;
      4'h1:
          casez (o_wb_adr[27:24])
            4'h1:
                /* empty */;
            4'h0:
                /* empty */;
            4'h2:
                casez (o_wb_adr[23:0])
                  24'h000080:
                      i_en = i_wb_we;
                endcase
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    u_tram_w_en = 1'h0;
    if (\$1 ) begin
      u_tram_w_en = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    i_wb_ack = cpu_ack;
    casez (o_wb_adr[31:28])
      4'h0:
          /* empty */;
      4'h1:
          casez (o_wb_adr[27:24])
            4'h1:
                i_wb_ack = i_wb_stb;
            4'h0:
                i_wb_ack = \i_wb_stb$32 ;
          endcase
      4'h2:
          /* empty */;
      4'h8:
          i_wb_ack = \o_wb_ack$85 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \i_wb_dat$73  = 32'd0;
    casez (o_wb_adr[31:28])
      4'h0:
          (* full_case = 32'd1 *)
          if (\$2 ) begin
            \i_wb_dat$73  = u_rom_r_data;
          end else begin
            (* full_case = 32'd1 *)
            if (i_wb_we) begin
            end else begin
              \i_wb_dat$73  = u_ram_r_data;
            end
          end
      4'h1:
          casez (o_wb_adr[27:24])
            4'h1:
                \i_wb_dat$73  = \o_wb_dat$77 ;
            4'h0:
                \i_wb_dat$73  = \o_wb_dat$79 ;
            4'h2:
                casez (o_wb_adr[23:0])
                  24'h000080:
                      \i_wb_dat$73  = { 24'h000000, o_data };
                  24'h000084:
                      \i_wb_dat$73  = { 31'h00000000, o_busy };
                endcase
            4'h3:
                /* empty */;
            4'h4:
                casez (o_wb_adr[23:0])
                  24'h0000b0:
                      \i_wb_dat$73  = { 24'h000000, i_gpio };
                endcase
          endcase
      4'h2:
          \i_wb_dat$73  = u_tram_r_data;
      4'h8:
          \i_wb_dat$73  = \o_wb_dat$84 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$10  = o_ebreak;
    if (\o_ebreak$86 ) begin
      \$10  = 1'h1;
    end
    if (rst) begin
      \$10  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$11  = u_tram_w_addr;
    if (\$3 ) begin
      \$11  = \$4 [9:0];
    end
    if (rst) begin
      \$11  = 10'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$12  = \$6 ;
    if (rst) begin
      \$12  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$13  = sd_spi_cs_reg;
    casez (o_wb_adr[31:28])
      4'h0:
          /* empty */;
      4'h1:
          casez (o_wb_adr[27:24])
            4'h1:
                /* empty */;
            4'h0:
                /* empty */;
            4'h2:
                casez (o_wb_adr[23:0])
                  24'h000080:
                      /* empty */;
                  24'h000084:
                      /* empty */;
                  24'h000088:
                      if (\$7 ) begin
                        \$13  = i_wb_dat[0];
                      end
                endcase
          endcase
    endcase
    if (rst) begin
      \$13  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$14  = i_clkdiv;
    casez (o_wb_adr[31:28])
      4'h0:
          /* empty */;
      4'h1:
          casez (o_wb_adr[27:24])
            4'h1:
                /* empty */;
            4'h0:
                /* empty */;
            4'h2:
                casez (o_wb_adr[23:0])
                  24'h000080:
                      /* empty */;
                  24'h000084:
                      /* empty */;
                  24'h000088:
                      /* empty */;
                  24'h00008c:
                      if (\$8 ) begin
                        \$14  = i_wb_dat[5:0];
                      end
                endcase
          endcase
    endcase
    if (rst) begin
      \$14  = 6'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$15  = tram_en;
    casez (o_wb_adr[31:28])
      4'h0:
          /* empty */;
      4'h1:
          casez (o_wb_adr[27:24])
            4'h1:
                /* empty */;
            4'h0:
                /* empty */;
            4'h2:
                /* empty */;
            4'h3:
                casez (o_wb_adr[23:0])
                  24'h0000a0:
                      if (\$9 ) begin
                        \$15  = i_wb_dat[0];
                      end
                endcase
          endcase
    endcase
    if (rst) begin
      \$15  = 1'h0;
    end
  end
  assign i_wb_adr = { 8'h00, o_wb_adr[23:0] };
  assign o_wb_dat = i_wb_dat;
  assign o_wb_we = i_wb_we;
  assign o_irq_timer = i_irq_timer;
  assign \i_wb_adr$29  = { 8'h00, o_wb_adr[23:0] };
  assign \i_wb_dat$30  = i_wb_dat;
  assign \i_wb_we$31  = i_wb_we;
  assign \i_rxd$33  = i_rxd;
  assign \o_txd$34  = o_txd;
  assign \i_wb_adr$35  = { 7'h00, o_wb_adr[24:0] };
  assign \i_wb_dat$36  = i_wb_dat;
  assign \i_wb_we$37  = i_wb_we;
  assign \o_SDRAM_CKE$39  = 1'h1;
  assign \o_SDRAM_WEn$40  = \$16 [0];
  assign \o_SDRAM_CASn$41  = \$16 [1];
  assign \o_SDRAM_RASn$42  = \$16 [2];
  assign \o_SDRAM_A$43  = o_SDRAM_A;
  assign \o_SDRAM_BA$44  = o_SDRAM_BA;
  assign \o_SDRAM_DQM$45  = o_SDRAM_DQM;
  assign \o_SDRAM_DQ$46  = o_SDRAM_DQ;
  assign \o_SDRAM_DQ_OE$47  = o_SDRAM_DQ_OE;
  assign \i_SDRAM_DQ$48  = i_SDRAM_DQ;
  assign o_spi_sclk = o_sd_spi_sclk;
  assign o_spi_mosi = o_sd_spi_mosi;
  assign i_spi_miso = i_sd_spi_miso;
  assign sd_spi_clkdiv_reg = i_clkdiv;
  assign ebreak = o_ebreak;
  assign u_rom_r_addr = o_wb_adr[11:2];
  assign u_ram_r_addr = o_wb_adr[11:2];
  assign u_ram_w_addr = o_wb_adr[11:2];
  assign u_ram_w_data = i_wb_dat;
  assign i_data = i_wb_dat[7:0];
  assign u_tram_r_addr = o_wb_adr[11:2];
  assign tram_wr_idx = u_tram_w_addr;
  assign o_trace_pc = u_tram_w_data;
  assign o_wb_ack = i_wb_stb;
  assign \o_wb_ack$80  = \i_wb_stb$32 ;
  assign o_SDRAM_CKE = 1'h1;
  assign o_SDRAM_WEn = \$16 [0];
  assign o_SDRAM_CASn = \$16 [1];
  assign o_SDRAM_RASn = \$16 [2];
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:31" *)
(* generator = "Amaranth" *)
module \top.u_clint (rst, i_wb_stb, \port$1291$0 , i_wb_dat, i_wb_we, o_irq_timer, o_wb_dat, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  wire [8:0] \$1 ;
  reg [63:0] \$10 ;
  wire \$2 ;
  wire [64:0] \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  reg [7:0] \$7 ;
  reg [63:0] \$8 ;
  reg \$9 ;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:18" *)
  wire [31:0] i_wb_adr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:19" *)
  input [31:0] i_wb_dat;
  wire [31:0] i_wb_dat;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:26" *)
  input i_wb_stb;
  wire i_wb_stb;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:22" *)
  input i_wb_we;
  wire i_wb_we;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:33" *)
  reg [63:0] mtime = 64'h0000000000000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:35" *)
  reg [7:0] mtime_scale = 8'h00;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:34" *)
  reg [63:0] mtimecmp = 64'h0000000000000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:28" *)
  output o_irq_timer;
  reg o_irq_timer = 1'h0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:26" *)
  wire o_wb_ack;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:25" *)
  output [31:0] o_wb_dat;
  reg [31:0] o_wb_dat;
  input [23:0] \port$1291$0 ;
  wire [23:0] \port$1291$0 ;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  assign \$1  = mtime_scale + (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:37" *) 1'h1;
  assign \$2  = mtime_scale == (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:38" *) 5'h13;
  assign \$3  = mtime + (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:39" *) 1'h1;
  assign \$4  = mtime >= (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:41" *) mtimecmp;
  assign \$5  = i_wb_stb & (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:51" *) i_wb_we;
  assign \$6  = i_wb_stb & (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:54" *) i_wb_we;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:35" *)
  always @(posedge clk)
    mtime_scale <= \$7 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:33" *)
  always @(posedge clk)
    mtime <= \$8 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:28" *)
  always @(posedge clk)
    o_irq_timer <= \$9 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/clint.py:34" *)
  always @(posedge clk)
    mtimecmp <= \$10 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$7  = \$1 [7:0];
    if (\$2 ) begin
      \$7  = 8'h00;
    end
    if (rst) begin
      \$7  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$8  = mtime;
    if (\$2 ) begin
      \$8  = \$3 [63:0];
    end
    if (rst) begin
      \$8  = 64'h0000000000000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$9  = \$4 ;
    if (rst) begin
      \$9  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$10  = mtimecmp;
    casez (\port$1291$0 )
      24'h00bff8:
          /* empty */;
      24'h00bffc:
          /* empty */;
      24'h004000:
          if (\$5 ) begin
            \$10 [31:0] = i_wb_dat;
          end
      24'h004004:
          if (\$6 ) begin
            \$10 [63:32] = i_wb_dat;
          end
    endcase
    if (rst) begin
      \$10  = 64'h0000000000000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    o_wb_dat = 32'd0;
    casez (\port$1291$0 )
      24'h00bff8:
          o_wb_dat = mtime[31:0];
      24'h00bffc:
          o_wb_dat = mtime[63:32];
    endcase
  end
  assign i_wb_adr = { 8'h00, \port$1291$0  };
  assign o_wb_ack = i_wb_stb;
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:972" *)
(* generator = "Amaranth" *)
module \top.u_cpu (rst, o_ebreak, o_trace_valid, \i_wb_ack$49 , \i_wb_dat$48 , \pipe_mem_wb$pc , o_wb_adr, o_wb_dat, o_wb_we, o_wb_stb, i_irq_timer, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$3  = 0;
  wire \$1 ;
  wire [31:0] \$10 ;
  reg [31:0] \$100 ;
  reg [31:0] \$101 ;
  reg [31:0] \$102 ;
  reg [31:0] \$103 ;
  reg [31:0] \$104 ;
  reg [31:0] \$105 ;
  reg [31:0] \$106 ;
  reg [31:0] \$107 ;
  reg [31:0] \$108 ;
  reg [64:0] \$109 ;
  wire \$11 ;
  reg [31:0] \$110 ;
  reg [120:0] \$111 ;
  reg [152:0] \$112 ;
  reg [76:0] \$113 ;
  reg [1:0] \$114 ;
  wire \$12 ;
  wire [31:0] \$13 ;
  wire [31:0] \$14 ;
  wire [31:0] \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire [31:0] \$18 ;
  wire [31:0] \$19 ;
  wire \$2 ;
  wire [31:0] \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire [31:0] \$23 ;
  wire [31:0] \$24 ;
  wire [31:0] \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire [31:0] \$28 ;
  wire [31:0] \$29 ;
  wire [31:0] \$3 ;
  wire [31:0] \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire [31:0] \$33 ;
  wire [31:0] \$34 ;
  wire [31:0] \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire [31:0] \$38 ;
  wire [31:0] \$39 ;
  wire [31:0] \$4 ;
  wire [31:0] \$40 ;
  wire \$41 ;
  wire \$42 ;
  wire [31:0] \$43 ;
  wire [31:0] \$44 ;
  wire [31:0] \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire [31:0] \$48 ;
  wire [31:0] \$49 ;
  wire [31:0] \$5 ;
  wire [31:0] \$50 ;
  wire \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire [32:0] \$54 ;
  wire \$55 ;
  wire \$56 ;
  wire \$57 ;
  wire \$58 ;
  wire \$59 ;
  wire \$6 ;
  wire \$60 ;
  wire \$61 ;
  wire [31:0] \$62 ;
  wire \$63 ;
  wire \$64 ;
  wire \$65 ;
  wire \$66 ;
  wire \$67 ;
  wire \$68 ;
  wire \$69 ;
  wire \$7 ;
  wire \$70 ;
  wire \$71 ;
  wire \$72 ;
  wire \$73 ;
  wire \$74 ;
  wire \$75 ;
  wire \$76 ;
  wire \$77 ;
  wire \$78 ;
  wire \$79 ;
  wire [31:0] \$8 ;
  wire \$80 ;
  wire \$81 ;
  wire \$82 ;
  wire \$83 ;
  wire \$84 ;
  wire \$85 ;
  wire \$86 ;
  wire \$87 ;
  wire \$88 ;
  wire \$89 ;
  wire [31:0] \$9 ;
  wire \$90 ;
  wire \$91 ;
  wire \$92 ;
  wire \$93 ;
  wire \$94 ;
  wire \$95 ;
  wire \$96 ;
  wire \$97 ;
  wire \$98 ;
  reg [31:0] \$99 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1052" *)
  reg [31:0] PC = 32'd0;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:995" *)
  reg [31:0] csr_mcause = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:993" *)
  reg [31:0] csr_mepc = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:991" *)
  reg [31:0] csr_mie = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:992" *)
  reg [31:0] csr_mip = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:998" *)
  reg [31:0] csr_misa = 32'd1077940481;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:989" *)
  reg [31:0] csr_mscratch = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:994" *)
  reg [31:0] csr_mstatus = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:996" *)
  reg [31:0] csr_mtval = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:990" *)
  reg [31:0] csr_mtvec = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:997" *)
  reg [31:0] csr_mvendorid = 32'd4279234815;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:733" *)
  wire [32:0] i_cache_resp;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:733" *)
  wire [31:0] \i_cache_resp.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:733" *)
  wire \i_cache_resp.rdy ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [72:0] i_cpu_req;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [72:0] \i_cpu_req$58 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [31:0] \i_cpu_req$58.addr ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [31:0] \i_cpu_req$58.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [3:0] \i_cpu_req$58.op ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire \i_cpu_req$58.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [3:0] \i_cpu_req$58.wsel ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [31:0] \i_cpu_req.addr ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [31:0] \i_cpu_req.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [3:0] \i_cpu_req.op ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire \i_cpu_req.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [3:0] \i_cpu_req.wsel ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:500" *)
  reg [31:0] i_csr_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:954" *)
  input i_irq_timer;
  wire i_irq_timer;
  (* init = 153'h000000000000000000000000000000000000000 *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [152:0] i_pipe_exe_mem;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [11:0] \i_pipe_exe_mem.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [31:0] \i_pipe_exe_mem.op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [31:0] \i_pipe_exe_mem.op2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [6:0] \i_pipe_exe_mem.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [31:0] \i_pipe_exe_mem.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [4:0] \i_pipe_exe_mem.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [31:0] \i_pipe_exe_mem.res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire \i_pipe_exe_mem.valid ;
  (* init = 121'h0000000000000000000000000000000 *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [120:0] i_pipe_id_exe;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [11:0] \i_pipe_id_exe.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [31:0] \i_pipe_id_exe.op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [31:0] \i_pipe_id_exe.op2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [6:0] \i_pipe_id_exe.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [31:0] \i_pipe_id_exe.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [4:0] \i_pipe_id_exe.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire \i_pipe_id_exe.valid ;
  (* init = 65'h00000000000000000 *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:195" *)
  wire [64:0] i_pipe_if_id;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:195" *)
  wire [31:0] \i_pipe_if_id.iword ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:195" *)
  wire [31:0] \i_pipe_if_id.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:195" *)
  wire \i_pipe_if_id.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:18" *)
  wire [4:0] i_rd1_idx;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:20" *)
  wire [4:0] i_rd2_idx;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:198" *)
  wire [31:0] i_rs1_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:200" *)
  wire [31:0] i_rs2_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:77" *)
  reg i_wb_ack;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:77" *)
  reg \i_wb_ack$33 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:964" *)
  input \i_wb_ack$49 ;
  wire \i_wb_ack$49 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:71" *)
  reg [31:0] i_wb_dat;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:71" *)
  reg [31:0] \i_wb_dat$32 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:958" *)
  input [31:0] \i_wb_dat$48 ;
  wire [31:0] \i_wb_dat$48 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:24" *)
  wire [31:0] i_wr_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:23" *)
  wire [4:0] i_wr_idx;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:22" *)
  wire i_wr_we;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  wire [72:0] o_cache_req;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  wire [31:0] \o_cache_req.addr ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  wire [31:0] \o_cache_req.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  wire [3:0] \o_cache_req.op ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  wire \o_cache_req.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  wire [3:0] \o_cache_req.wsel ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  wire [32:0] o_cpu_resp;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  wire [32:0] \o_cpu_resp$59 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  wire [31:0] \o_cpu_resp$59.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  wire \o_cpu_resp$59.rdy ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  wire [31:0] \o_cpu_resp.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  wire \o_cpu_resp.rdy ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:498" *)
  wire [11:0] o_csr_addr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:499" *)
  wire [31:0] o_csr_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:497" *)
  wire [1:0] o_csr_op;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:953" *)
  output o_ebreak;
  wire o_ebreak;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:495" *)
  wire [31:0] o_jump_pc;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:496" *)
  wire o_jump_pc_valid;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:494" *)
  wire o_multicycle_busy;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [152:0] o_pipe_exe_mem;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [11:0] \o_pipe_exe_mem.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [31:0] \o_pipe_exe_mem.op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [31:0] \o_pipe_exe_mem.op2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [6:0] \o_pipe_exe_mem.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [31:0] \o_pipe_exe_mem.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [4:0] \o_pipe_exe_mem.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [31:0] \o_pipe_exe_mem.res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire \o_pipe_exe_mem.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [120:0] o_pipe_id_exe;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [11:0] \o_pipe_id_exe.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [31:0] \o_pipe_id_exe.op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [31:0] \o_pipe_id_exe.op2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [6:0] \o_pipe_id_exe.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [31:0] \o_pipe_id_exe.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [4:0] \o_pipe_id_exe.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire \o_pipe_id_exe.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  wire [76:0] o_pipe_mem_wb;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  wire [6:0] \o_pipe_mem_wb.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  wire [31:0] \o_pipe_mem_wb.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  wire [4:0] \o_pipe_mem_wb.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  wire [31:0] \o_pipe_mem_wb.res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  wire \o_pipe_mem_wb.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:19" *)
  wire [31:0] o_rd1_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:21" *)
  wire [31:0] o_rd2_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:197" *)
  wire [4:0] o_rs1_idx;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:199" *)
  wire [4:0] o_rs2_idx;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:966" *)
  wire [31:0] o_trace_pc;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:969" *)
  wire [31:0] o_trace_rd_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:968" *)
  wire [4:0] o_trace_rd_idx;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:967" *)
  output o_trace_valid;
  wire o_trace_valid;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:956" *)
  output [31:0] o_wb_adr;
  reg [31:0] o_wb_adr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:69" *)
  wire [31:0] \o_wb_adr$36 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:69" *)
  wire [31:0] \o_wb_adr$50 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:960" *)
  reg [2:0] o_wb_cti;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:73" *)
  wire [2:0] \o_wb_cti$42 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:73" *)
  wire [2:0] \o_wb_cti$53 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:76" *)
  wire o_wb_cyc;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:963" *)
  reg \o_wb_cyc$47 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:76" *)
  wire \o_wb_cyc$56 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:957" *)
  output [31:0] o_wb_dat;
  reg [31:0] o_wb_dat;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:70" *)
  wire [31:0] \o_wb_dat$38 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:70" *)
  wire [31:0] \o_wb_dat$51 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:959" *)
  reg [3:0] o_wb_sel;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:72" *)
  wire [3:0] \o_wb_sel$40 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:72" *)
  wire [3:0] \o_wb_sel$52 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:962" *)
  output o_wb_stb;
  reg o_wb_stb;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:75" *)
  wire \o_wb_stb$46 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:75" *)
  wire \o_wb_stb$55 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:961" *)
  output o_wb_we;
  reg o_wb_we;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:74" *)
  wire \o_wb_we$44 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:74" *)
  wire \o_wb_we$54 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1061" *)
  reg [152:0] pipe_exe_mem = 153'h000000000000000000000000000000000000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [11:0] \pipe_exe_mem$imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \pipe_exe_mem$op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \pipe_exe_mem$op2 ;
  (* enum_base_type = "Opcode" *)
  (* enum_value_0000001 = "LUI" *)
  (* enum_value_0000010 = "AUIPC" *)
  (* enum_value_0000011 = "JAL" *)
  (* enum_value_0000100 = "JALR" *)
  (* enum_value_0000101 = "BEQ" *)
  (* enum_value_0000110 = "BNE" *)
  (* enum_value_0000111 = "BLT" *)
  (* enum_value_0001000 = "BGE" *)
  (* enum_value_0001001 = "BLTU" *)
  (* enum_value_0001010 = "BGEU" *)
  (* enum_value_0001011 = "LB" *)
  (* enum_value_0001100 = "LH" *)
  (* enum_value_0001101 = "LW" *)
  (* enum_value_0001110 = "LBU" *)
  (* enum_value_0001111 = "LHU" *)
  (* enum_value_0010000 = "SB" *)
  (* enum_value_0010001 = "SH" *)
  (* enum_value_0010010 = "SW" *)
  (* enum_value_0010011 = "ADDI" *)
  (* enum_value_0010100 = "SLTI" *)
  (* enum_value_0010101 = "SLTIU" *)
  (* enum_value_0010110 = "XORI" *)
  (* enum_value_0010111 = "ORI" *)
  (* enum_value_0011000 = "ANDI" *)
  (* enum_value_0011001 = "SLLI" *)
  (* enum_value_0011010 = "SRLI" *)
  (* enum_value_0011011 = "SRAI" *)
  (* enum_value_0011100 = "ADD" *)
  (* enum_value_0011101 = "SUB" *)
  (* enum_value_0011110 = "SLL" *)
  (* enum_value_0011111 = "SLT" *)
  (* enum_value_0100000 = "SLTU" *)
  (* enum_value_0100001 = "XOR" *)
  (* enum_value_0100010 = "SRL" *)
  (* enum_value_0100011 = "SRA" *)
  (* enum_value_0100100 = "OR" *)
  (* enum_value_0100101 = "AND" *)
  (* enum_value_0100110 = "FENCE" *)
  (* enum_value_0100111 = "ECALL" *)
  (* enum_value_0101000 = "EBREAK" *)
  (* enum_value_0101001 = "LR_W" *)
  (* enum_value_0101010 = "SC_W" *)
  (* enum_value_0101011 = "AMOSWAP_W" *)
  (* enum_value_0101100 = "AMOADD_W" *)
  (* enum_value_0101101 = "AMOXOR_W" *)
  (* enum_value_0101110 = "AMOAND_W" *)
  (* enum_value_0101111 = "AMOOR_W" *)
  (* enum_value_0110000 = "AMOMIN_W" *)
  (* enum_value_0110001 = "AMOMAX_W" *)
  (* enum_value_0110010 = "AMOMINU_W" *)
  (* enum_value_0110011 = "AMOMAXU_W" *)
  (* enum_value_0110100 = "MUL" *)
  (* enum_value_0110101 = "MULH" *)
  (* enum_value_0110110 = "MULHSU" *)
  (* enum_value_0110111 = "MULHU" *)
  (* enum_value_0111000 = "DIV" *)
  (* enum_value_0111001 = "DIVU" *)
  (* enum_value_0111010 = "REM" *)
  (* enum_value_0111011 = "REMU" *)
  (* enum_value_0111100 = "CSRRW" *)
  (* enum_value_0111101 = "CSRRS" *)
  (* enum_value_0111110 = "CSRRC" *)
  (* enum_value_0111111 = "CSRRWI" *)
  (* enum_value_1000000 = "CSRRSI" *)
  (* enum_value_1000001 = "CSRRCI" *)
  (* enum_value_1000010 = "MRET" *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [6:0] \pipe_exe_mem$opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \pipe_exe_mem$pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [4:0] \pipe_exe_mem$rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \pipe_exe_mem$res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire \pipe_exe_mem$valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1061" *)
  wire [11:0] \pipe_exe_mem.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1061" *)
  wire [31:0] \pipe_exe_mem.op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1061" *)
  wire [31:0] \pipe_exe_mem.op2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1061" *)
  wire [6:0] \pipe_exe_mem.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1061" *)
  wire [31:0] \pipe_exe_mem.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1061" *)
  wire [4:0] \pipe_exe_mem.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1061" *)
  wire [31:0] \pipe_exe_mem.res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1061" *)
  wire \pipe_exe_mem.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1060" *)
  reg [120:0] pipe_id_exe = 121'h0000000000000000000000000000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [11:0] \pipe_id_exe$imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \pipe_id_exe$op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \pipe_id_exe$op2 ;
  (* enum_base_type = "Opcode" *)
  (* enum_value_0000001 = "LUI" *)
  (* enum_value_0000010 = "AUIPC" *)
  (* enum_value_0000011 = "JAL" *)
  (* enum_value_0000100 = "JALR" *)
  (* enum_value_0000101 = "BEQ" *)
  (* enum_value_0000110 = "BNE" *)
  (* enum_value_0000111 = "BLT" *)
  (* enum_value_0001000 = "BGE" *)
  (* enum_value_0001001 = "BLTU" *)
  (* enum_value_0001010 = "BGEU" *)
  (* enum_value_0001011 = "LB" *)
  (* enum_value_0001100 = "LH" *)
  (* enum_value_0001101 = "LW" *)
  (* enum_value_0001110 = "LBU" *)
  (* enum_value_0001111 = "LHU" *)
  (* enum_value_0010000 = "SB" *)
  (* enum_value_0010001 = "SH" *)
  (* enum_value_0010010 = "SW" *)
  (* enum_value_0010011 = "ADDI" *)
  (* enum_value_0010100 = "SLTI" *)
  (* enum_value_0010101 = "SLTIU" *)
  (* enum_value_0010110 = "XORI" *)
  (* enum_value_0010111 = "ORI" *)
  (* enum_value_0011000 = "ANDI" *)
  (* enum_value_0011001 = "SLLI" *)
  (* enum_value_0011010 = "SRLI" *)
  (* enum_value_0011011 = "SRAI" *)
  (* enum_value_0011100 = "ADD" *)
  (* enum_value_0011101 = "SUB" *)
  (* enum_value_0011110 = "SLL" *)
  (* enum_value_0011111 = "SLT" *)
  (* enum_value_0100000 = "SLTU" *)
  (* enum_value_0100001 = "XOR" *)
  (* enum_value_0100010 = "SRL" *)
  (* enum_value_0100011 = "SRA" *)
  (* enum_value_0100100 = "OR" *)
  (* enum_value_0100101 = "AND" *)
  (* enum_value_0100110 = "FENCE" *)
  (* enum_value_0100111 = "ECALL" *)
  (* enum_value_0101000 = "EBREAK" *)
  (* enum_value_0101001 = "LR_W" *)
  (* enum_value_0101010 = "SC_W" *)
  (* enum_value_0101011 = "AMOSWAP_W" *)
  (* enum_value_0101100 = "AMOADD_W" *)
  (* enum_value_0101101 = "AMOXOR_W" *)
  (* enum_value_0101110 = "AMOAND_W" *)
  (* enum_value_0101111 = "AMOOR_W" *)
  (* enum_value_0110000 = "AMOMIN_W" *)
  (* enum_value_0110001 = "AMOMAX_W" *)
  (* enum_value_0110010 = "AMOMINU_W" *)
  (* enum_value_0110011 = "AMOMAXU_W" *)
  (* enum_value_0110100 = "MUL" *)
  (* enum_value_0110101 = "MULH" *)
  (* enum_value_0110110 = "MULHSU" *)
  (* enum_value_0110111 = "MULHU" *)
  (* enum_value_0111000 = "DIV" *)
  (* enum_value_0111001 = "DIVU" *)
  (* enum_value_0111010 = "REM" *)
  (* enum_value_0111011 = "REMU" *)
  (* enum_value_0111100 = "CSRRW" *)
  (* enum_value_0111101 = "CSRRS" *)
  (* enum_value_0111110 = "CSRRC" *)
  (* enum_value_0111111 = "CSRRWI" *)
  (* enum_value_1000000 = "CSRRSI" *)
  (* enum_value_1000001 = "CSRRCI" *)
  (* enum_value_1000010 = "MRET" *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [6:0] \pipe_id_exe$opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \pipe_id_exe$pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [4:0] \pipe_id_exe$rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire \pipe_id_exe$valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1060" *)
  wire [11:0] \pipe_id_exe.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1060" *)
  wire [31:0] \pipe_id_exe.op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1060" *)
  wire [31:0] \pipe_id_exe.op2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1060" *)
  wire [6:0] \pipe_id_exe.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1060" *)
  wire [31:0] \pipe_id_exe.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1060" *)
  wire [4:0] \pipe_id_exe.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1060" *)
  wire \pipe_id_exe.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1059" *)
  reg [64:0] pipe_if_id = 65'h00000000000000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \pipe_if_id$iword ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \pipe_if_id$pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire \pipe_if_id$valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1059" *)
  wire [31:0] \pipe_if_id.iword ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1059" *)
  wire [31:0] \pipe_if_id.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1059" *)
  wire \pipe_if_id.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1062" *)
  reg [76:0] pipe_mem_wb = 77'h00000000000000000000;
  (* enum_base_type = "Opcode" *)
  (* enum_value_0000001 = "LUI" *)
  (* enum_value_0000010 = "AUIPC" *)
  (* enum_value_0000011 = "JAL" *)
  (* enum_value_0000100 = "JALR" *)
  (* enum_value_0000101 = "BEQ" *)
  (* enum_value_0000110 = "BNE" *)
  (* enum_value_0000111 = "BLT" *)
  (* enum_value_0001000 = "BGE" *)
  (* enum_value_0001001 = "BLTU" *)
  (* enum_value_0001010 = "BGEU" *)
  (* enum_value_0001011 = "LB" *)
  (* enum_value_0001100 = "LH" *)
  (* enum_value_0001101 = "LW" *)
  (* enum_value_0001110 = "LBU" *)
  (* enum_value_0001111 = "LHU" *)
  (* enum_value_0010000 = "SB" *)
  (* enum_value_0010001 = "SH" *)
  (* enum_value_0010010 = "SW" *)
  (* enum_value_0010011 = "ADDI" *)
  (* enum_value_0010100 = "SLTI" *)
  (* enum_value_0010101 = "SLTIU" *)
  (* enum_value_0010110 = "XORI" *)
  (* enum_value_0010111 = "ORI" *)
  (* enum_value_0011000 = "ANDI" *)
  (* enum_value_0011001 = "SLLI" *)
  (* enum_value_0011010 = "SRLI" *)
  (* enum_value_0011011 = "SRAI" *)
  (* enum_value_0011100 = "ADD" *)
  (* enum_value_0011101 = "SUB" *)
  (* enum_value_0011110 = "SLL" *)
  (* enum_value_0011111 = "SLT" *)
  (* enum_value_0100000 = "SLTU" *)
  (* enum_value_0100001 = "XOR" *)
  (* enum_value_0100010 = "SRL" *)
  (* enum_value_0100011 = "SRA" *)
  (* enum_value_0100100 = "OR" *)
  (* enum_value_0100101 = "AND" *)
  (* enum_value_0100110 = "FENCE" *)
  (* enum_value_0100111 = "ECALL" *)
  (* enum_value_0101000 = "EBREAK" *)
  (* enum_value_0101001 = "LR_W" *)
  (* enum_value_0101010 = "SC_W" *)
  (* enum_value_0101011 = "AMOSWAP_W" *)
  (* enum_value_0101100 = "AMOADD_W" *)
  (* enum_value_0101101 = "AMOXOR_W" *)
  (* enum_value_0101110 = "AMOAND_W" *)
  (* enum_value_0101111 = "AMOOR_W" *)
  (* enum_value_0110000 = "AMOMIN_W" *)
  (* enum_value_0110001 = "AMOMAX_W" *)
  (* enum_value_0110010 = "AMOMINU_W" *)
  (* enum_value_0110011 = "AMOMAXU_W" *)
  (* enum_value_0110100 = "MUL" *)
  (* enum_value_0110101 = "MULH" *)
  (* enum_value_0110110 = "MULHSU" *)
  (* enum_value_0110111 = "MULHU" *)
  (* enum_value_0111000 = "DIV" *)
  (* enum_value_0111001 = "DIVU" *)
  (* enum_value_0111010 = "REM" *)
  (* enum_value_0111011 = "REMU" *)
  (* enum_value_0111100 = "CSRRW" *)
  (* enum_value_0111101 = "CSRRS" *)
  (* enum_value_0111110 = "CSRRC" *)
  (* enum_value_0111111 = "CSRRWI" *)
  (* enum_value_1000000 = "CSRRSI" *)
  (* enum_value_1000001 = "CSRRCI" *)
  (* enum_value_1000010 = "MRET" *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [6:0] \pipe_mem_wb$opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:966" *)
  output [31:0] \pipe_mem_wb$pc ;
  wire [31:0] \pipe_mem_wb$pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [4:0] \pipe_mem_wb$rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \pipe_mem_wb$res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire \pipe_mem_wb$valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1062" *)
  wire [6:0] \pipe_mem_wb.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1062" *)
  wire [31:0] \pipe_mem_wb.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1062" *)
  wire [4:0] \pipe_mem_wb.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1062" *)
  wire [31:0] \pipe_mem_wb.res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1062" *)
  wire \pipe_mem_wb.valid ;
  (* enum_base_type = "Privilege" *)
  (* enum_value_00 = "User" *)
  (* enum_value_01 = "Supervisor" *)
  (* enum_value_10 = "Reserved" *)
  (* enum_value_11 = "Machine" *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:983" *)
  reg [1:0] privilege = 2'h3;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1057" *)
  wire raw_hazard;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1055" *)
  wire raw_hazard_rs1;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1056" *)
  wire raw_hazard_rs2;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1054" *)
  wire stall;
  assign \$1  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) stall;
  assign \$2  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) \$1 ;
  assign \$3  = csr_mscratch | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1093" *) o_csr_data;
  assign \$4  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) o_csr_data;
  assign \$5  = csr_mscratch & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) \$4 ;
  assign \$6  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) stall;
  assign \$7  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) \$6 ;
  assign \$8  = csr_mtvec | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1093" *) o_csr_data;
  assign \$9  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) o_csr_data;
  assign \$10  = csr_mtvec & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) \$9 ;
  assign \$11  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) stall;
  assign \$12  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) \$11 ;
  assign \$13  = csr_mie | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1093" *) o_csr_data;
  assign \$14  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) o_csr_data;
  assign \$15  = csr_mie & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) \$14 ;
  assign \$16  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) stall;
  assign \$17  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) \$16 ;
  assign \$18  = csr_mip | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1093" *) o_csr_data;
  assign \$19  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) o_csr_data;
  assign \$20  = csr_mip & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) \$19 ;
  assign \$21  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) stall;
  assign \$22  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) \$21 ;
  assign \$23  = csr_mepc | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1093" *) o_csr_data;
  assign \$24  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) o_csr_data;
  assign \$25  = csr_mepc & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) \$24 ;
  assign \$26  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) stall;
  assign \$27  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) \$26 ;
  assign \$28  = csr_mstatus | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1093" *) o_csr_data;
  assign \$29  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) o_csr_data;
  assign \$30  = csr_mstatus & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) \$29 ;
  assign \$31  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) stall;
  assign \$32  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) \$31 ;
  assign \$33  = csr_mcause | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1093" *) o_csr_data;
  assign \$34  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) o_csr_data;
  assign \$35  = csr_mcause & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) \$34 ;
  assign \$36  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) stall;
  assign \$37  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) \$36 ;
  assign \$38  = csr_mtval | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1093" *) o_csr_data;
  assign \$39  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) o_csr_data;
  assign \$40  = csr_mtval & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) \$39 ;
  assign \$41  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) stall;
  assign \$42  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) \$41 ;
  assign \$43  = csr_mvendorid | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1093" *) o_csr_data;
  assign \$44  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) o_csr_data;
  assign \$45  = csr_mvendorid & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) \$44 ;
  assign \$46  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) stall;
  assign \$47  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1086" *) \$46 ;
  assign \$48  = csr_misa | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1093" *) o_csr_data;
  assign \$49  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) o_csr_data;
  assign \$50  = csr_misa & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1095" *) \$49 ;
  assign \$51  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1101" *) stall;
  assign \$52  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1101" *) raw_hazard;
  assign \$53  = \$51  & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1101" *) \$52 ;
  assign \$54  = PC + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1103" *) 3'h4;
  assign \$55  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1115" *) stall;
  assign \$56  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1124" *) stall;
  assign \$57  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1138" *) stall;
  assign \$58  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1150" *) stall;
  assign \$59  = \$58  & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1150" *) o_jump_pc_valid;
  assign \$60  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1157" *) stall;
  assign \$61  = \$60  & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1157" *) pipe_id_exe[120];
  assign \$62  = csr_mie & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1158" *) csr_mip;
  assign \$63  = | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1158" *) \$62 ;
  assign \$64  = csr_mstatus[3] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1158" *) \$63 ;
  assign \$65  = pipe_id_exe[87:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1169" *) 6'h27;
  assign \$66  = pipe_id_exe[87:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1185" *) 7'h42;
  assign \$67  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1064" *) o_cpu_resp[0];
  assign \$69  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1065" *) \o_cpu_resp$59 [0];
  assign \$70  = \i_cpu_req$58 [72] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1065" *) \$69 ;
  assign \$71  = \$68  | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1064" *) \$70 ;
  assign stall = \$71  | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1064" *) o_multicycle_busy;
  assign \$72  = | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1069" *) o_rs1_idx;
  assign \$73  = pipe_id_exe[4:0] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1070" *) o_rs1_idx;
  assign \$74  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1070" *) \$73 ;
  assign \$75  = pipe_exe_mem[36:32] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1071" *) o_rs1_idx;
  assign \$76  = pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1071" *) \$75 ;
  assign \$77  = \$74  | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1070" *) \$76 ;
  assign \$78  = pipe_mem_wb[43:39] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1072" *) o_rs1_idx;
  assign \$79  = pipe_mem_wb[76] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1072" *) \$78 ;
  assign \$80  = \$77  | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1070" *) \$79 ;
  assign raw_hazard_rs1 = \$72  & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1069" *) \$80 ;
  assign \$81  = | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1073" *) o_rs2_idx;
  assign \$82  = pipe_id_exe[4:0] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1074" *) o_rs2_idx;
  assign \$83  = pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1074" *) \$82 ;
  assign \$84  = pipe_exe_mem[36:32] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1075" *) o_rs2_idx;
  assign \$85  = pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1075" *) \$84 ;
  assign \$86  = \$83  | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1074" *) \$85 ;
  assign \$87  = pipe_mem_wb[43:39] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1076" *) o_rs2_idx;
  assign \$88  = pipe_mem_wb[76] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1076" *) \$87 ;
  assign \$89  = \$86  | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1074" *) \$88 ;
  assign raw_hazard_rs2 = \$81  & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1073" *) \$89 ;
  assign raw_hazard = raw_hazard_rs1 | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1077" *) raw_hazard_rs2;
  assign \$90  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1133" *) o_cpu_resp[0];
  assign \$93  = o_cache_req[72] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1133" *) \$92 ;
  assign \$94  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1145" *) stall;
  assign \$95  = \$94  & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1145" *) pipe_mem_wb[76];
  assign \$96  = | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1145" *) pipe_mem_wb[43:39];
  assign i_wr_we = \$95  & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1145" *) \$96 ;
  assign \$97  = pipe_mem_wb[6:0] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1199" *) 6'h28;
  assign o_ebreak = pipe_mem_wb[76] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1199" *) \$97 ;
  assign \$98  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1206" *) stall;
  assign o_trace_valid = \$98  & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1206" *) pipe_mem_wb[76];
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:992" *)
  always @(posedge clk)
    csr_mip <= \$99 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:989" *)
  always @(posedge clk)
    csr_mscratch <= \$100 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:990" *)
  always @(posedge clk)
    csr_mtvec <= \$101 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:991" *)
  always @(posedge clk)
    csr_mie <= \$102 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:993" *)
  always @(posedge clk)
    csr_mepc <= \$103 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:994" *)
  always @(posedge clk)
    csr_mstatus <= \$104 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:995" *)
  always @(posedge clk)
    csr_mcause <= \$105 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:996" *)
  always @(posedge clk)
    csr_mtval <= \$106 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:997" *)
  always @(posedge clk)
    csr_mvendorid <= \$107 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:998" *)
  always @(posedge clk)
    csr_misa <= \$108 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1059" *)
  always @(posedge clk)
    pipe_if_id <= \$109 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1052" *)
  always @(posedge clk)
    PC <= \$110 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1060" *)
  always @(posedge clk)
    pipe_id_exe <= \$111 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1061" *)
  always @(posedge clk)
    pipe_exe_mem <= \$112 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:1062" *)
  always @(posedge clk)
    pipe_mem_wb <= \$113 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:983" *)
  always @(posedge clk)
    privilege <= \$114 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:974" *)
  \top.u_cpu.u_arf  u_arf (
    .clk(clk),
    .i_rd1_idx(o_rs1_idx),
    .i_rd2_idx(o_rs2_idx),
    .i_wr_we(i_wr_we),
    .o_rd1_data(i_rs1_data),
    .o_rd2_data(i_rs2_data),
    .\port$1284$7 (pipe_mem_wb[43:7]),
    .rst(rst)
  );
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:976" *)
  \top.u_cpu.u_dcache  u_dcache (
    .clk(clk),
    .i_cpu_req(\i_cpu_req$58 ),
    .i_wb_ack(\i_wb_ack$33 ),
    .i_wb_dat(\i_wb_dat$32 ),
    .o_cpu_resp(\o_cpu_resp$59 ),
    .o_wb_adr(\o_wb_adr$36 ),
    .o_wb_cyc(o_wb_cyc),
    .o_wb_dat(\o_wb_dat$38 ),
    .o_wb_sel(\o_wb_sel$40 ),
    .o_wb_stb(\o_wb_stb$46 ),
    .o_wb_we(\o_wb_we$44 ),
    .rst(rst)
  );
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:978" *)
  \top.u_cpu.u_exe  u_exe (
    .clk(clk),
    .i_csr_data(i_csr_data),
    .i_pipe_id_exe(pipe_id_exe),
    .o_csr_addr(o_csr_addr),
    .o_csr_data(o_csr_data),
    .o_csr_op(o_csr_op),
    .o_jump_pc(o_jump_pc),
    .o_jump_pc_valid(o_jump_pc_valid),
    .o_multicycle_busy(o_multicycle_busy),
    .o_pipe_exe_mem(o_pipe_exe_mem),
    .rst(rst)
  );
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:975" *)
  \top.u_cpu.u_icache  u_icache (
    .clk(clk),
    .i_cpu_req(i_cpu_req),
    .i_wb_ack(i_wb_ack),
    .i_wb_dat(i_wb_dat),
    .o_cpu_resp(o_cpu_resp),
    .o_wb_adr(\o_wb_adr$50 ),
    .o_wb_cyc(\o_wb_cyc$56 ),
    .o_wb_dat(\o_wb_dat$51 ),
    .o_wb_sel(\o_wb_sel$52 ),
    .o_wb_stb(\o_wb_stb$55 ),
    .o_wb_we(\o_wb_we$54 ),
    .rst(rst)
  );
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:977" *)
  \top.u_cpu.u_id  u_id (
    .i_pipe_if_id(pipe_if_id),
    .i_rs1_data(i_rs1_data),
    .i_rs2_data(i_rs2_data),
    .o_pipe_id_exe(o_pipe_id_exe),
    .o_rs1_idx(o_rs1_idx),
    .o_rs2_idx(o_rs2_idx)
  );
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:979" *)
  \top.u_cpu.u_mem  u_mem (
    .clk(clk),
    .i_cache_resp(\o_cpu_resp$59 ),
    .i_pipe_exe_mem(pipe_exe_mem),
    .o_cache_req(o_cache_req),
    .o_pipe_mem_wb(o_pipe_mem_wb),
    .rst(rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    { \$99 [31:8], \$99 [6:0] } = { csr_mip[31:8], csr_mip[6:0] };
    \$99 [7] = i_irq_timer;
    casez (o_csr_addr)
      12'h340:
          /* empty */;
      12'h305:
          /* empty */;
      12'h304:
          /* empty */;
      12'h344:
          if (\$17 ) begin
            (* full_case = 32'd1 *)
            casez (o_csr_op)
              2'h0:
                  /* empty */;
              2'h1:
                  \$99  = o_csr_data;
              2'h2:
                  \$99  = \$18 ;
              2'h3:
                  \$99  = \$20 ;
            endcase
          end
    endcase
    if (rst) begin
      \$99  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$100  = csr_mscratch;
    casez (o_csr_addr)
      12'h340:
          if (\$2 ) begin
            (* full_case = 32'd1 *)
            casez (o_csr_op)
              2'h0:
                  /* empty */;
              2'h1:
                  \$100  = o_csr_data;
              2'h2:
                  \$100  = \$3 ;
              2'h3:
                  \$100  = \$5 ;
            endcase
          end
    endcase
    if (rst) begin
      \$100  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$101  = csr_mtvec;
    casez (o_csr_addr)
      12'h340:
          /* empty */;
      12'h305:
          if (\$7 ) begin
            (* full_case = 32'd1 *)
            casez (o_csr_op)
              2'h0:
                  /* empty */;
              2'h1:
                  \$101  = o_csr_data;
              2'h2:
                  \$101  = \$8 ;
              2'h3:
                  \$101  = \$10 ;
            endcase
          end
    endcase
    if (rst) begin
      \$101  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$102  = csr_mie;
    casez (o_csr_addr)
      12'h340:
          /* empty */;
      12'h305:
          /* empty */;
      12'h304:
          if (\$12 ) begin
            (* full_case = 32'd1 *)
            casez (o_csr_op)
              2'h0:
                  /* empty */;
              2'h1:
                  \$102  = o_csr_data;
              2'h2:
                  \$102  = \$13 ;
              2'h3:
                  \$102  = \$15 ;
            endcase
          end
    endcase
    if (rst) begin
      \$102  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$103  = csr_mepc;
    casez (o_csr_addr)
      12'h340:
          /* empty */;
      12'h305:
          /* empty */;
      12'h304:
          /* empty */;
      12'h344:
          /* empty */;
      12'h341:
          if (\$22 ) begin
            (* full_case = 32'd1 *)
            casez (o_csr_op)
              2'h0:
                  /* empty */;
              2'h1:
                  \$103  = o_csr_data;
              2'h2:
                  \$103  = \$23 ;
              2'h3:
                  \$103  = \$25 ;
            endcase
          end
    endcase
    if (\$61 ) begin
      if (\$64 ) begin
        \$103  = pipe_id_exe[119:88];
      end else if (\$65 ) begin
        \$103  = pipe_id_exe[119:88];
      end
    end
    if (rst) begin
      \$103  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$104  = csr_mstatus;
    casez (o_csr_addr)
      12'h340:
          /* empty */;
      12'h305:
          /* empty */;
      12'h304:
          /* empty */;
      12'h344:
          /* empty */;
      12'h341:
          /* empty */;
      12'h300:
          if (\$27 ) begin
            (* full_case = 32'd1 *)
            casez (o_csr_op)
              2'h0:
                  /* empty */;
              2'h1:
                  \$104  = o_csr_data;
              2'h2:
                  \$104  = \$28 ;
              2'h3:
                  \$104  = \$30 ;
            endcase
          end
    endcase
    if (\$61 ) begin
      if (\$64 ) begin
        \$104 [12:11] = privilege;
        \$104 [7] = csr_mstatus[3];
        \$104 [3] = 1'h0;
      end else if (\$65 ) begin
        \$104 [12:11] = privilege;
        \$104 [7] = csr_mstatus[3];
        \$104 [3] = 1'h0;
      end else if (\$66 ) begin
        \$104 [3] = csr_mstatus[7];
        \$104 [7] = 1'h1;
      end
    end
    if (rst) begin
      \$104  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$105  = csr_mcause;
    casez (o_csr_addr)
      12'h340:
          /* empty */;
      12'h305:
          /* empty */;
      12'h304:
          /* empty */;
      12'h344:
          /* empty */;
      12'h341:
          /* empty */;
      12'h300:
          /* empty */;
      12'h342:
          if (\$32 ) begin
            (* full_case = 32'd1 *)
            casez (o_csr_op)
              2'h0:
                  /* empty */;
              2'h1:
                  \$105  = o_csr_data;
              2'h2:
                  \$105  = \$33 ;
              2'h3:
                  \$105  = \$35 ;
            endcase
          end
    endcase
    if (\$61 ) begin
      if (\$64 ) begin
        \$105  = 32'd2147483655;
      end else if (\$65 ) begin
        casez (privilege)
          2'h0:
              \$105  = 32'd8;
          2'h1:
              \$105  = 32'd9;
          2'h3:
              \$105  = 32'd11;
        endcase
      end
    end
    if (rst) begin
      \$105  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$106  = csr_mtval;
    casez (o_csr_addr)
      12'h340:
          /* empty */;
      12'h305:
          /* empty */;
      12'h304:
          /* empty */;
      12'h344:
          /* empty */;
      12'h341:
          /* empty */;
      12'h300:
          /* empty */;
      12'h342:
          /* empty */;
      12'h343:
          if (\$37 ) begin
            (* full_case = 32'd1 *)
            casez (o_csr_op)
              2'h0:
                  /* empty */;
              2'h1:
                  \$106  = o_csr_data;
              2'h2:
                  \$106  = \$38 ;
              2'h3:
                  \$106  = \$40 ;
            endcase
          end
    endcase
    if (rst) begin
      \$106  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$107  = csr_mvendorid;
    casez (o_csr_addr)
      12'h340:
          /* empty */;
      12'h305:
          /* empty */;
      12'h304:
          /* empty */;
      12'h344:
          /* empty */;
      12'h341:
          /* empty */;
      12'h300:
          /* empty */;
      12'h342:
          /* empty */;
      12'h343:
          /* empty */;
      12'hf11:
          if (\$42 ) begin
            (* full_case = 32'd1 *)
            casez (o_csr_op)
              2'h0:
                  /* empty */;
              2'h1:
                  \$107  = o_csr_data;
              2'h2:
                  \$107  = \$43 ;
              2'h3:
                  \$107  = \$45 ;
            endcase
          end
    endcase
    if (rst) begin
      \$107  = 32'd4279234815;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$108  = csr_misa;
    casez (o_csr_addr)
      12'h340:
          /* empty */;
      12'h305:
          /* empty */;
      12'h304:
          /* empty */;
      12'h344:
          /* empty */;
      12'h341:
          /* empty */;
      12'h300:
          /* empty */;
      12'h342:
          /* empty */;
      12'h343:
          /* empty */;
      12'hf11:
          /* empty */;
      12'h301:
          if (\$47 ) begin
            (* full_case = 32'd1 *)
            casez (o_csr_op)
              2'h0:
                  /* empty */;
              2'h1:
                  \$108  = o_csr_data;
              2'h2:
                  \$108  = \$48 ;
              2'h3:
                  \$108  = \$50 ;
            endcase
          end
    endcase
    if (rst) begin
      \$108  = 32'd1077940481;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$109  = pipe_if_id;
    if (\$53 ) begin
      \$109 [64] = 1'h1;
      \$109 [63:32] = PC;
      \$109 [31:0] = o_cpu_resp[32:1];
    end
    if (\$59 ) begin
      \$109 [64] = 1'h0;
    end
    if (\$61 ) begin
      if (\$64 ) begin
        \$109 [64] = 1'h0;
      end else if (\$65 ) begin
        \$109 [64] = 1'h0;
      end else if (\$66 ) begin
        \$109 [64] = 1'h0;
      end
    end
    if (rst) begin
      \$109  = 65'h00000000000000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$110  = PC;
    if (\$53 ) begin
      \$110  = \$54 [31:0];
    end
    if (\$59 ) begin
      \$110  = o_jump_pc;
    end
    if (\$61 ) begin
      if (\$64 ) begin
        \$110  = csr_mtvec;
      end else if (\$65 ) begin
        \$110  = csr_mtvec;
      end else if (\$66 ) begin
        \$110  = csr_mepc;
      end
    end
    if (rst) begin
      \$110  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$111  = pipe_id_exe;
    if (\$55 ) begin
      \$111  = o_pipe_id_exe;
      if (raw_hazard) begin
        \$111 [120] = 1'h0;
      end
    end
    if (\$59 ) begin
      \$111 [120] = 1'h0;
    end
    if (\$61 ) begin
      if (\$64 ) begin
        \$111 [120] = 1'h0;
      end else if (\$65 ) begin
        \$111 [120] = 1'h0;
      end else if (\$66 ) begin
        \$111 [120] = 1'h0;
      end
    end
    if (rst) begin
      \$111  = 121'h0000000000000000000000000000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$112  = pipe_exe_mem;
    if (\$56 ) begin
      \$112  = o_pipe_exe_mem;
    end
    if (\$61 ) begin
      if (\$64 ) begin
        \$112 [152] = 1'h0;
      end
    end
    if (rst) begin
      \$112  = 153'h000000000000000000000000000000000000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$113  = pipe_mem_wb;
    if (\$57 ) begin
      \$113  = o_pipe_mem_wb;
    end
    if (rst) begin
      \$113  = 77'h00000000000000000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$114  = privilege;
    if (\$61 ) begin
      if (\$64 ) begin
        \$114  = 2'h3;
      end else if (\$65 ) begin
        \$114  = 2'h3;
      end else if (\$66 ) begin
        \$114  = csr_mstatus[12:11];
      end
    end
    if (rst) begin
      \$114  = 2'h3;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    i_wb_dat = 32'd0;
    (* full_case = 32'd1 *)
    if (o_wb_cyc) begin
    end else begin
      i_wb_dat = \i_wb_dat$48 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    i_wb_ack = 1'h0;
    (* full_case = 32'd1 *)
    if (o_wb_cyc) begin
    end else begin
      i_wb_ack = \i_wb_ack$49 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \i_wb_dat$32  = 32'd0;
    if (o_wb_cyc) begin
      \i_wb_dat$32  = \i_wb_dat$48 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \i_wb_ack$33  = 1'h0;
    if (o_wb_cyc) begin
      \i_wb_ack$33  = \i_wb_ack$49 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (o_wb_cyc) begin
      o_wb_adr = \o_wb_adr$36 ;
    end else begin
      o_wb_adr = \o_wb_adr$50 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (o_wb_cyc) begin
      o_wb_dat = \o_wb_dat$38 ;
    end else begin
      o_wb_dat = \o_wb_dat$51 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (o_wb_cyc) begin
      o_wb_sel = \o_wb_sel$40 ;
    end else begin
      o_wb_sel = \o_wb_sel$52 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (o_wb_cyc) begin
      o_wb_cti = 3'h0;
    end else begin
      o_wb_cti = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (o_wb_cyc) begin
      o_wb_we = \o_wb_we$44 ;
    end else begin
      o_wb_we = \o_wb_we$54 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (o_wb_cyc) begin
      o_wb_stb = \o_wb_stb$46 ;
    end else begin
      o_wb_stb = \o_wb_stb$55 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (o_wb_cyc) begin
      \o_wb_cyc$47  = o_wb_cyc;
    end else begin
      \o_wb_cyc$47  = \o_wb_cyc$56 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    i_csr_data = 32'd0;
    casez (o_csr_addr)
      12'h340:
          i_csr_data = csr_mscratch;
      12'h305:
          i_csr_data = csr_mtvec;
      12'h304:
          i_csr_data = csr_mie;
      12'h344:
          i_csr_data = csr_mip;
      12'h341:
          i_csr_data = csr_mepc;
      12'h300:
          i_csr_data = csr_mstatus;
      12'h342:
          i_csr_data = csr_mcause;
      12'h343:
          i_csr_data = csr_mtval;
      12'hf11:
          i_csr_data = csr_mvendorid;
      12'h301:
          i_csr_data = csr_misa;
    endcase
  end
  assign \o_wb_cti$42  = 3'h0;
  assign \o_wb_cti$53  = 3'h0;
  assign i_pipe_if_id = pipe_if_id;
  assign i_rd1_idx = o_rs1_idx;
  assign i_rd2_idx = o_rs2_idx;
  assign o_rd1_data = i_rs1_data;
  assign o_rd2_data = i_rs2_data;
  assign i_pipe_id_exe = pipe_id_exe;
  assign i_pipe_exe_mem = pipe_exe_mem;
  assign i_cache_resp = \o_cpu_resp$59 ;
  assign i_wr_idx = pipe_mem_wb[43:39];
  assign i_wr_data = pipe_mem_wb[38:7];
  assign \pipe_if_id$iword  = pipe_if_id[31:0];
  assign \pipe_if_id$pc  = pipe_if_id[63:32];
  assign \pipe_if_id$valid  = pipe_if_id[64];
  assign \pipe_id_exe$rd  = pipe_id_exe[4:0];
  assign \pipe_id_exe$imm  = pipe_id_exe[16:5];
  assign \pipe_id_exe$op2  = pipe_id_exe[48:17];
  assign \pipe_id_exe$op1  = pipe_id_exe[80:49];
  assign \pipe_id_exe$opcode  = pipe_id_exe[87:81];
  assign \pipe_id_exe$pc  = pipe_id_exe[119:88];
  assign \pipe_id_exe$valid  = pipe_id_exe[120];
  assign \pipe_exe_mem$res  = pipe_exe_mem[31:0];
  assign \pipe_exe_mem$rd  = pipe_exe_mem[36:32];
  assign \pipe_exe_mem$imm  = pipe_exe_mem[48:37];
  assign \pipe_exe_mem$op2  = pipe_exe_mem[80:49];
  assign \pipe_exe_mem$op1  = pipe_exe_mem[112:81];
  assign \pipe_exe_mem$opcode  = pipe_exe_mem[119:113];
  assign \pipe_exe_mem$pc  = pipe_exe_mem[151:120];
  assign \pipe_exe_mem$valid  = pipe_exe_mem[152];
  assign \pipe_mem_wb$opcode  = pipe_mem_wb[6:0];
  assign \pipe_mem_wb$res  = pipe_mem_wb[38:7];
  assign \pipe_mem_wb$rd  = pipe_mem_wb[43:39];
  assign \pipe_mem_wb$valid  = pipe_mem_wb[76];
  assign o_trace_pc = pipe_mem_wb[75:44];
  assign o_trace_rd_idx = pipe_mem_wb[43:39];
  assign o_trace_rd_data = pipe_mem_wb[38:7];
  assign \pipe_mem_wb$pc  = pipe_mem_wb[75:44];
  assign \pipe_id_exe.rd  = pipe_id_exe[4:0];
  assign \pipe_id_exe.imm  = pipe_id_exe[16:5];
  assign \pipe_id_exe.op2  = pipe_id_exe[48:17];
  assign \pipe_id_exe.op1  = pipe_id_exe[80:49];
  assign \pipe_id_exe.opcode  = pipe_id_exe[87:81];
  assign \pipe_id_exe.pc  = pipe_id_exe[119:88];
  assign \pipe_id_exe.valid  = pipe_id_exe[120];
  assign \pipe_if_id.iword  = pipe_if_id[31:0];
  assign \pipe_if_id.pc  = pipe_if_id[63:32];
  assign \pipe_if_id.valid  = pipe_if_id[64];
  assign \o_cpu_resp.rdy  = o_cpu_resp[0];
  assign \o_cpu_resp.data  = o_cpu_resp[32:1];
  assign \o_pipe_id_exe.rd  = o_pipe_id_exe[4:0];
  assign \o_pipe_id_exe.imm  = o_pipe_id_exe[16:5];
  assign \o_pipe_id_exe.op2  = o_pipe_id_exe[48:17];
  assign \o_pipe_id_exe.op1  = o_pipe_id_exe[80:49];
  assign \o_pipe_id_exe.opcode  = o_pipe_id_exe[87:81];
  assign \o_pipe_id_exe.pc  = o_pipe_id_exe[119:88];
  assign \o_pipe_id_exe.valid  = o_pipe_id_exe[120];
  assign \pipe_exe_mem.res  = pipe_exe_mem[31:0];
  assign \pipe_exe_mem.rd  = pipe_exe_mem[36:32];
  assign \pipe_exe_mem.imm  = pipe_exe_mem[48:37];
  assign \pipe_exe_mem.op2  = pipe_exe_mem[80:49];
  assign \pipe_exe_mem.op1  = pipe_exe_mem[112:81];
  assign \pipe_exe_mem.opcode  = pipe_exe_mem[119:113];
  assign \pipe_exe_mem.pc  = pipe_exe_mem[151:120];
  assign \pipe_exe_mem.valid  = pipe_exe_mem[152];
  assign \o_pipe_exe_mem.res  = o_pipe_exe_mem[31:0];
  assign \o_pipe_exe_mem.rd  = o_pipe_exe_mem[36:32];
  assign \o_pipe_exe_mem.imm  = o_pipe_exe_mem[48:37];
  assign \o_pipe_exe_mem.op2  = o_pipe_exe_mem[80:49];
  assign \o_pipe_exe_mem.op1  = o_pipe_exe_mem[112:81];
  assign \o_pipe_exe_mem.opcode  = o_pipe_exe_mem[119:113];
  assign \o_pipe_exe_mem.pc  = o_pipe_exe_mem[151:120];
  assign \o_pipe_exe_mem.valid  = o_pipe_exe_mem[152];
  assign \pipe_mem_wb.opcode  = pipe_mem_wb[6:0];
  assign \pipe_mem_wb.res  = pipe_mem_wb[38:7];
  assign \pipe_mem_wb.rd  = pipe_mem_wb[43:39];
  assign \pipe_mem_wb.pc  = pipe_mem_wb[75:44];
  assign \pipe_mem_wb.valid  = pipe_mem_wb[76];
  assign \o_pipe_mem_wb.opcode  = o_pipe_mem_wb[6:0];
  assign \o_pipe_mem_wb.res  = o_pipe_mem_wb[38:7];
  assign \o_pipe_mem_wb.rd  = o_pipe_mem_wb[43:39];
  assign \o_pipe_mem_wb.pc  = o_pipe_mem_wb[75:44];
  assign \o_pipe_mem_wb.valid  = o_pipe_mem_wb[76];
  assign \i_cpu_req.addr  = i_cpu_req[31:0];
  assign \i_cpu_req.data  = i_cpu_req[63:32];
  assign \i_cpu_req.wsel  = i_cpu_req[67:64];
  assign \i_cpu_req.op  = i_cpu_req[71:68];
  assign \i_cpu_req.valid  = i_cpu_req[72];
  assign \i_cpu_req$58.addr  = \i_cpu_req$58 [31:0];
  assign \i_cpu_req$58.data  = \i_cpu_req$58 [63:32];
  assign \i_cpu_req$58.wsel  = \i_cpu_req$58 [67:64];
  assign \i_cpu_req$58.op  = \i_cpu_req$58 [71:68];
  assign \i_cpu_req$58.valid  = \i_cpu_req$58 [72];
  assign \o_cpu_resp$59.rdy  = \o_cpu_resp$59 [0];
  assign \o_cpu_resp$59.data  = \o_cpu_resp$59 [32:1];
  assign \i_pipe_if_id.iword  = pipe_if_id[31:0];
  assign \i_pipe_if_id.pc  = pipe_if_id[63:32];
  assign \i_pipe_if_id.valid  = pipe_if_id[64];
  assign \i_pipe_id_exe.rd  = pipe_id_exe[4:0];
  assign \i_pipe_id_exe.imm  = pipe_id_exe[16:5];
  assign \i_pipe_id_exe.op2  = pipe_id_exe[48:17];
  assign \i_pipe_id_exe.op1  = pipe_id_exe[80:49];
  assign \i_pipe_id_exe.opcode  = pipe_id_exe[87:81];
  assign \i_pipe_id_exe.pc  = pipe_id_exe[119:88];
  assign \i_pipe_id_exe.valid  = pipe_id_exe[120];
  assign \i_pipe_exe_mem.res  = pipe_exe_mem[31:0];
  assign \i_pipe_exe_mem.rd  = pipe_exe_mem[36:32];
  assign \i_pipe_exe_mem.imm  = pipe_exe_mem[48:37];
  assign \i_pipe_exe_mem.op2  = pipe_exe_mem[80:49];
  assign \i_pipe_exe_mem.op1  = pipe_exe_mem[112:81];
  assign \i_pipe_exe_mem.opcode  = pipe_exe_mem[119:113];
  assign \i_pipe_exe_mem.pc  = pipe_exe_mem[151:120];
  assign \i_pipe_exe_mem.valid  = pipe_exe_mem[152];
  assign \o_cache_req.addr  = o_cache_req[31:0];
  assign \o_cache_req.data  = o_cache_req[63:32];
  assign \o_cache_req.wsel  = o_cache_req[67:64];
  assign \o_cache_req.op  = o_cache_req[71:68];
  assign \o_cache_req.valid  = o_cache_req[72];
  assign \i_cache_resp.rdy  = \o_cpu_resp$59 [0];
  assign \i_cache_resp.data  = \o_cpu_resp$59 [32:1];
  assign \i_cpu_req$58 [72] = \$93 ;
  assign \i_cpu_req$58 [71:0] = o_cache_req[71:0];
  assign i_cpu_req[72] = 1'h1;
  assign i_cpu_req[71:68] = 4'h1;
  assign i_cpu_req[31:0] = PC;
  assign i_cpu_req[67:32] = 36'h000000000;
  assign \$68  = \$67 ;
  assign \$91  = \$90 ;
  assign \$92  = o_cpu_resp[0];
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:27" *)
(* generator = "Amaranth" *)
module \top.u_cpu.u_arf (rst, i_wr_we, o_rd1_data, o_rd2_data, \port$1284$7 , i_rd1_idx, i_rd2_idx, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$4  = 0;
  wire \$1 ;
  reg [31:0] \$10 ;
  reg [31:0] \$11 ;
  reg [31:0] \$12 ;
  reg [31:0] \$13 ;
  reg [31:0] \$14 ;
  reg [31:0] \$15 ;
  reg [31:0] \$16 ;
  reg [31:0] \$17 ;
  reg [31:0] \$18 ;
  reg [31:0] \$19 ;
  wire \$2 ;
  reg [31:0] \$20 ;
  reg [31:0] \$21 ;
  reg [31:0] \$22 ;
  reg [31:0] \$23 ;
  reg [31:0] \$24 ;
  reg [31:0] \$25 ;
  reg [31:0] \$26 ;
  reg [31:0] \$27 ;
  reg [31:0] \$28 ;
  reg [31:0] \$29 ;
  reg [31:0] \$3 ;
  reg [31:0] \$30 ;
  reg [31:0] \$31 ;
  reg [31:0] \$32 ;
  reg [31:0] \$33 ;
  reg [31:0] \$34 ;
  reg [31:0] \$4 ;
  reg [31:0] \$5 ;
  reg [31:0] \$6 ;
  reg [31:0] \$7 ;
  reg [31:0] \$8 ;
  reg [31:0] \$9 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$10  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$11  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$12  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$13  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$14  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$15  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$16  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$17  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$18  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$19  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$20  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$21  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$22  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$23  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$24  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$25  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$26  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$27  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$28  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$29  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$30  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$31  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$32  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$33  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$34  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$35  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$5  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$6  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$7  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$8  = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  reg [31:0] \$signal$9  = 32'd0;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:18" *)
  input [4:0] i_rd1_idx;
  wire [4:0] i_rd1_idx;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:20" *)
  input [4:0] i_rd2_idx;
  wire [4:0] i_rd2_idx;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:24" *)
  wire [31:0] i_wr_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:23" *)
  wire [4:0] i_wr_idx;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:22" *)
  input i_wr_we;
  wire i_wr_we;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:19" *)
  output [31:0] o_rd1_data;
  reg [31:0] o_rd1_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:21" *)
  output [31:0] o_rd2_data;
  reg [31:0] o_rd2_data;
  input [36:0] \port$1284$7 ;
  wire [36:0] \port$1284$7 ;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$34  <= \$33 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$35  <= \$34 ;
  assign \$1  = | (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:31" *) \port$1284$7 [36:32];
  assign \$2  = i_wr_we & (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:31" *) \$1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal  <= \$3 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$5  <= \$4 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$6  <= \$5 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$7  <= \$6 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$8  <= \$7 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$9  <= \$8 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$10  <= \$9 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$11  <= \$10 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$12  <= \$11 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$13  <= \$12 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$14  <= \$13 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$15  <= \$14 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$16  <= \$15 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$17  <= \$16 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$18  <= \$17 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$19  <= \$18 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$20  <= \$19 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$21  <= \$20 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$22  <= \$21 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$23  <= \$22 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$24  <= \$23 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$25  <= \$24 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$26  <= \$25 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$27  <= \$26 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$28  <= \$27 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$29  <= \$28 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$30  <= \$29 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$31  <= \$30 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$32  <= \$31 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/arf.py:29" *)
  always @(posedge clk)
    \$signal$33  <= \$32 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$34  = \$signal$35 ;
    if (\$2 ) begin
      (* full_case = 32'd1 *)
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            /* empty */;
        5'h1b:
            /* empty */;
        5'h1c:
            /* empty */;
        5'h1d:
            /* empty */;
        5'h1e:
            /* empty */;
        5'h1f:
            \$34  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$34  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    (* full_case = 32'd1 *)
    casez (i_rd1_idx)
      5'h00:
          o_rd1_data = \$signal ;
      5'h01:
          o_rd1_data = \$signal$5 ;
      5'h02:
          o_rd1_data = \$signal$6 ;
      5'h03:
          o_rd1_data = \$signal$7 ;
      5'h04:
          o_rd1_data = \$signal$8 ;
      5'h05:
          o_rd1_data = \$signal$9 ;
      5'h06:
          o_rd1_data = \$signal$10 ;
      5'h07:
          o_rd1_data = \$signal$11 ;
      5'h08:
          o_rd1_data = \$signal$12 ;
      5'h09:
          o_rd1_data = \$signal$13 ;
      5'h0a:
          o_rd1_data = \$signal$14 ;
      5'h0b:
          o_rd1_data = \$signal$15 ;
      5'h0c:
          o_rd1_data = \$signal$16 ;
      5'h0d:
          o_rd1_data = \$signal$17 ;
      5'h0e:
          o_rd1_data = \$signal$18 ;
      5'h0f:
          o_rd1_data = \$signal$19 ;
      5'h10:
          o_rd1_data = \$signal$20 ;
      5'h11:
          o_rd1_data = \$signal$21 ;
      5'h12:
          o_rd1_data = \$signal$22 ;
      5'h13:
          o_rd1_data = \$signal$23 ;
      5'h14:
          o_rd1_data = \$signal$24 ;
      5'h15:
          o_rd1_data = \$signal$25 ;
      5'h16:
          o_rd1_data = \$signal$26 ;
      5'h17:
          o_rd1_data = \$signal$27 ;
      5'h18:
          o_rd1_data = \$signal$28 ;
      5'h19:
          o_rd1_data = \$signal$29 ;
      5'h1a:
          o_rd1_data = \$signal$30 ;
      5'h1b:
          o_rd1_data = \$signal$31 ;
      5'h1c:
          o_rd1_data = \$signal$32 ;
      5'h1d:
          o_rd1_data = \$signal$33 ;
      5'h1e:
          o_rd1_data = \$signal$34 ;
      5'h1f:
          o_rd1_data = \$signal$35 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    (* full_case = 32'd1 *)
    casez (i_rd2_idx)
      5'h00:
          o_rd2_data = \$signal ;
      5'h01:
          o_rd2_data = \$signal$5 ;
      5'h02:
          o_rd2_data = \$signal$6 ;
      5'h03:
          o_rd2_data = \$signal$7 ;
      5'h04:
          o_rd2_data = \$signal$8 ;
      5'h05:
          o_rd2_data = \$signal$9 ;
      5'h06:
          o_rd2_data = \$signal$10 ;
      5'h07:
          o_rd2_data = \$signal$11 ;
      5'h08:
          o_rd2_data = \$signal$12 ;
      5'h09:
          o_rd2_data = \$signal$13 ;
      5'h0a:
          o_rd2_data = \$signal$14 ;
      5'h0b:
          o_rd2_data = \$signal$15 ;
      5'h0c:
          o_rd2_data = \$signal$16 ;
      5'h0d:
          o_rd2_data = \$signal$17 ;
      5'h0e:
          o_rd2_data = \$signal$18 ;
      5'h0f:
          o_rd2_data = \$signal$19 ;
      5'h10:
          o_rd2_data = \$signal$20 ;
      5'h11:
          o_rd2_data = \$signal$21 ;
      5'h12:
          o_rd2_data = \$signal$22 ;
      5'h13:
          o_rd2_data = \$signal$23 ;
      5'h14:
          o_rd2_data = \$signal$24 ;
      5'h15:
          o_rd2_data = \$signal$25 ;
      5'h16:
          o_rd2_data = \$signal$26 ;
      5'h17:
          o_rd2_data = \$signal$27 ;
      5'h18:
          o_rd2_data = \$signal$28 ;
      5'h19:
          o_rd2_data = \$signal$29 ;
      5'h1a:
          o_rd2_data = \$signal$30 ;
      5'h1b:
          o_rd2_data = \$signal$31 ;
      5'h1c:
          o_rd2_data = \$signal$32 ;
      5'h1d:
          o_rd2_data = \$signal$33 ;
      5'h1e:
          o_rd2_data = \$signal$34 ;
      5'h1f:
          o_rd2_data = \$signal$35 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$3  = \$signal ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            \$3  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$3  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$4  = \$signal$5 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            \$4  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$4  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$5  = \$signal$6 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            \$5  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$5  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$6  = \$signal$7 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            \$6  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$6  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$7  = \$signal$8 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            \$7  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$7  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$8  = \$signal$9 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            \$8  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$8  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$9  = \$signal$10 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            \$9  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$9  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$10  = \$signal$11 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            \$10  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$10  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$11  = \$signal$12 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            \$11  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$11  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$12  = \$signal$13 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            \$12  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$12  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$13  = \$signal$14 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            \$13  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$13  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$14  = \$signal$15 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            \$14  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$14  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$15  = \$signal$16 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            \$15  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$15  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$16  = \$signal$17 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            \$16  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$16  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$17  = \$signal$18 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            \$17  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$17  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$18  = \$signal$19 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            \$18  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$18  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$19  = \$signal$20 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            \$19  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$19  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$20  = \$signal$21 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            \$20  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$20  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$21  = \$signal$22 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            \$21  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$21  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$22  = \$signal$23 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            \$22  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$22  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$23  = \$signal$24 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            \$23  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$23  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$24  = \$signal$25 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            \$24  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$24  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$25  = \$signal$26 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            \$25  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$25  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$26  = \$signal$27 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            \$26  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$26  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$27  = \$signal$28 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            \$27  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$27  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$28  = \$signal$29 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            \$28  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$28  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$29  = \$signal$30 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            \$29  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$29  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$30  = \$signal$31 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            /* empty */;
        5'h1b:
            \$30  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$30  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$31  = \$signal$32 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            /* empty */;
        5'h1b:
            /* empty */;
        5'h1c:
            \$31  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$31  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$32  = \$signal$33 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            /* empty */;
        5'h1b:
            /* empty */;
        5'h1c:
            /* empty */;
        5'h1d:
            \$32  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$32  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$33  = \$signal$34 ;
    if (\$2 ) begin
      casez (\port$1284$7 [36:32])
        5'h00:
            /* empty */;
        5'h01:
            /* empty */;
        5'h02:
            /* empty */;
        5'h03:
            /* empty */;
        5'h04:
            /* empty */;
        5'h05:
            /* empty */;
        5'h06:
            /* empty */;
        5'h07:
            /* empty */;
        5'h08:
            /* empty */;
        5'h09:
            /* empty */;
        5'h0a:
            /* empty */;
        5'h0b:
            /* empty */;
        5'h0c:
            /* empty */;
        5'h0d:
            /* empty */;
        5'h0e:
            /* empty */;
        5'h0f:
            /* empty */;
        5'h10:
            /* empty */;
        5'h11:
            /* empty */;
        5'h12:
            /* empty */;
        5'h13:
            /* empty */;
        5'h14:
            /* empty */;
        5'h15:
            /* empty */;
        5'h16:
            /* empty */;
        5'h17:
            /* empty */;
        5'h18:
            /* empty */;
        5'h19:
            /* empty */;
        5'h1a:
            /* empty */;
        5'h1b:
            /* empty */;
        5'h1c:
            /* empty */;
        5'h1d:
            /* empty */;
        5'h1e:
            \$33  = \port$1284$7 [31:0];
      endcase
    end
    if (rst) begin
      \$33  = 32'd0;
    end
  end
  assign i_wr_idx = \port$1284$7 [36:32];
  assign i_wr_data = \port$1284$7 [31:0];
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:80" *)
(* generator = "Amaranth" *)
module \top.u_cpu.u_dcache (rst, i_wb_dat, i_wb_ack, i_cpu_req, o_cpu_resp, o_wb_cyc, o_wb_stb, o_wb_we, o_wb_sel, o_wb_adr, o_wb_dat, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$5  = 0;
  wire \$1 ;
  wire \$10 ;
  wire [31:0] \$11 ;
  wire \$12 ;
  wire [31:0] \$13 ;
  wire \$14 ;
  wire [31:0] \$15 ;
  wire \$16 ;
  wire [31:0] \$17 ;
  reg [24:0] \$18 ;
  wire \$19 ;
  reg \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  reg \$28 ;
  reg [24:0] \$29 ;
  reg [24:0] \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  reg \$34 ;
  reg \$35 ;
  wire \$36 ;
  wire [3:0] \$37 ;
  wire \$38 ;
  wire [3:0] \$39 ;
  wire \$4 ;
  wire \$40 ;
  reg [2:0] \$41 ;
  reg [26:0] \$42 ;
  reg [26:0] \$43 ;
  reg [26:0] \$44 ;
  reg [26:0] \$45 ;
  reg [31:0] \$46 ;
  reg [2:0] \$47 ;
  reg [31:0] \$48 ;
  wire \$5 ;
  wire [32:0] \$6 ;
  wire [31:0] \$7 ;
  wire [31:0] \$8 ;
  wire [31:0] \$9 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  reg [26:0] \$signal  = 27'h0000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  reg [26:0] \$signal$12  = 27'h0000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$12.dirty ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire [24:0] \$signal$12.tag ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$12.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  reg [26:0] \$signal$13  = 27'h0000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$13.dirty ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire [24:0] \$signal$13.tag ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$13.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  reg [26:0] \$signal$14  = 27'h0000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$14.dirty ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire [24:0] \$signal$14.tag ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$14.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal.dirty ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire [24:0] \$signal.tag ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:102" *)
  reg [2:0] addr_cntr = 3'h0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:112" *)
  reg [31:0] bypass_read_r = 32'd0;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:93" *)
  wire [31:0] cpu_addr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:93" *)
  wire [1:0] \cpu_addr.index ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:93" *)
  wire [4:0] \cpu_addr.offset ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:93" *)
  wire [24:0] \cpu_addr.tag ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:95" *)
  reg [31:0] cpu_addr_r = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:95" *)
  wire [1:0] \cpu_addr_r.index ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:95" *)
  wire [4:0] \cpu_addr_r.offset ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:95" *)
  wire [24:0] \cpu_addr_r.tag ;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  reg [2:0] fsm_state = 3'h0;
  (* init = 32'd0 *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:92" *)
  wire [31:0] i_cpu_addr_r;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  input [72:0] i_cpu_req;
  wire [72:0] i_cpu_req;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [31:0] \i_cpu_req.addr ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [31:0] \i_cpu_req.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [3:0] \i_cpu_req.op ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire \i_cpu_req.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [3:0] \i_cpu_req.wsel ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:77" *)
  input i_wb_ack;
  wire i_wb_ack;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:71" *)
  input [31:0] i_wb_dat;
  wire [31:0] i_wb_dat;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  reg [4:0] mem_r_addr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  reg [4:0] \mem_r_addr$19 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  reg [4:0] \mem_r_addr$23 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  reg [4:0] \mem_r_addr$27 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  wire [7:0] mem_r_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  wire [7:0] \mem_r_data$6 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  wire [7:0] \mem_r_data$7 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  wire [7:0] \mem_r_data$8 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [4:0] mem_w_addr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [4:0] \mem_w_addr$20 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [4:0] \mem_w_addr$24 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [4:0] \mem_w_addr$28 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [7:0] mem_w_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [7:0] \mem_w_data$21 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [7:0] \mem_w_data$25 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [7:0] \mem_w_data$29 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg mem_w_en;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg \mem_w_en$22 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg \mem_w_en$26 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg \mem_w_en$30 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  output [32:0] o_cpu_resp;
  reg [32:0] o_cpu_resp;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  wire [31:0] \o_cpu_resp.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  wire \o_cpu_resp.rdy ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:69" *)
  output [31:0] o_wb_adr;
  reg [31:0] o_wb_adr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:76" *)
  output o_wb_cyc;
  reg o_wb_cyc;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:70" *)
  output [31:0] o_wb_dat;
  reg [31:0] o_wb_dat;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:72" *)
  output [3:0] o_wb_sel;
  reg [3:0] o_wb_sel;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:75" *)
  output o_wb_stb;
  reg o_wb_stb;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:74" *)
  output o_wb_we;
  reg o_wb_we;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:107" *)
  wire [31:0] rdata32;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:109" *)
  reg [31:0] wdata32;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:85" *)
  reg [7:0] \U$0  [31:0];
  initial begin
    \U$0 [0] = 8'h00;
    \U$0 [1] = 8'h00;
    \U$0 [2] = 8'h00;
    \U$0 [3] = 8'h00;
    \U$0 [4] = 8'h00;
    \U$0 [5] = 8'h00;
    \U$0 [6] = 8'h00;
    \U$0 [7] = 8'h00;
    \U$0 [8] = 8'h00;
    \U$0 [9] = 8'h00;
    \U$0 [10] = 8'h00;
    \U$0 [11] = 8'h00;
    \U$0 [12] = 8'h00;
    \U$0 [13] = 8'h00;
    \U$0 [14] = 8'h00;
    \U$0 [15] = 8'h00;
    \U$0 [16] = 8'h00;
    \U$0 [17] = 8'h00;
    \U$0 [18] = 8'h00;
    \U$0 [19] = 8'h00;
    \U$0 [20] = 8'h00;
    \U$0 [21] = 8'h00;
    \U$0 [22] = 8'h00;
    \U$0 [23] = 8'h00;
    \U$0 [24] = 8'h00;
    \U$0 [25] = 8'h00;
    \U$0 [26] = 8'h00;
    \U$0 [27] = 8'h00;
    \U$0 [28] = 8'h00;
    \U$0 [29] = 8'h00;
    \U$0 [30] = 8'h00;
    \U$0 [31] = 8'h00;
  end
  always @(posedge clk) begin
    if (mem_w_en)
      \U$0 [mem_w_addr] <= mem_w_data;
  end
  assign mem_r_data = \U$0 [mem_r_addr];
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:85" *)
  reg [7:0] \U$2  [31:0];
  initial begin
    \U$2 [0] = 8'h00;
    \U$2 [1] = 8'h00;
    \U$2 [2] = 8'h00;
    \U$2 [3] = 8'h00;
    \U$2 [4] = 8'h00;
    \U$2 [5] = 8'h00;
    \U$2 [6] = 8'h00;
    \U$2 [7] = 8'h00;
    \U$2 [8] = 8'h00;
    \U$2 [9] = 8'h00;
    \U$2 [10] = 8'h00;
    \U$2 [11] = 8'h00;
    \U$2 [12] = 8'h00;
    \U$2 [13] = 8'h00;
    \U$2 [14] = 8'h00;
    \U$2 [15] = 8'h00;
    \U$2 [16] = 8'h00;
    \U$2 [17] = 8'h00;
    \U$2 [18] = 8'h00;
    \U$2 [19] = 8'h00;
    \U$2 [20] = 8'h00;
    \U$2 [21] = 8'h00;
    \U$2 [22] = 8'h00;
    \U$2 [23] = 8'h00;
    \U$2 [24] = 8'h00;
    \U$2 [25] = 8'h00;
    \U$2 [26] = 8'h00;
    \U$2 [27] = 8'h00;
    \U$2 [28] = 8'h00;
    \U$2 [29] = 8'h00;
    \U$2 [30] = 8'h00;
    \U$2 [31] = 8'h00;
  end
  always @(posedge clk) begin
    if (\mem_w_en$22 )
      \U$2 [\mem_w_addr$20 ] <= \mem_w_data$21 ;
  end
  assign \mem_r_data$6  = \U$2 [\mem_r_addr$19 ];
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:85" *)
  reg [7:0] \U$4  [31:0];
  initial begin
    \U$4 [0] = 8'h00;
    \U$4 [1] = 8'h00;
    \U$4 [2] = 8'h00;
    \U$4 [3] = 8'h00;
    \U$4 [4] = 8'h00;
    \U$4 [5] = 8'h00;
    \U$4 [6] = 8'h00;
    \U$4 [7] = 8'h00;
    \U$4 [8] = 8'h00;
    \U$4 [9] = 8'h00;
    \U$4 [10] = 8'h00;
    \U$4 [11] = 8'h00;
    \U$4 [12] = 8'h00;
    \U$4 [13] = 8'h00;
    \U$4 [14] = 8'h00;
    \U$4 [15] = 8'h00;
    \U$4 [16] = 8'h00;
    \U$4 [17] = 8'h00;
    \U$4 [18] = 8'h00;
    \U$4 [19] = 8'h00;
    \U$4 [20] = 8'h00;
    \U$4 [21] = 8'h00;
    \U$4 [22] = 8'h00;
    \U$4 [23] = 8'h00;
    \U$4 [24] = 8'h00;
    \U$4 [25] = 8'h00;
    \U$4 [26] = 8'h00;
    \U$4 [27] = 8'h00;
    \U$4 [28] = 8'h00;
    \U$4 [29] = 8'h00;
    \U$4 [30] = 8'h00;
    \U$4 [31] = 8'h00;
  end
  always @(posedge clk) begin
    if (\mem_w_en$26 )
      \U$4 [\mem_w_addr$24 ] <= \mem_w_data$25 ;
  end
  assign \mem_r_data$7  = \U$4 [\mem_r_addr$23 ];
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:85" *)
  reg [7:0] \U$6  [31:0];
  initial begin
    \U$6 [0] = 8'h00;
    \U$6 [1] = 8'h00;
    \U$6 [2] = 8'h00;
    \U$6 [3] = 8'h00;
    \U$6 [4] = 8'h00;
    \U$6 [5] = 8'h00;
    \U$6 [6] = 8'h00;
    \U$6 [7] = 8'h00;
    \U$6 [8] = 8'h00;
    \U$6 [9] = 8'h00;
    \U$6 [10] = 8'h00;
    \U$6 [11] = 8'h00;
    \U$6 [12] = 8'h00;
    \U$6 [13] = 8'h00;
    \U$6 [14] = 8'h00;
    \U$6 [15] = 8'h00;
    \U$6 [16] = 8'h00;
    \U$6 [17] = 8'h00;
    \U$6 [18] = 8'h00;
    \U$6 [19] = 8'h00;
    \U$6 [20] = 8'h00;
    \U$6 [21] = 8'h00;
    \U$6 [22] = 8'h00;
    \U$6 [23] = 8'h00;
    \U$6 [24] = 8'h00;
    \U$6 [25] = 8'h00;
    \U$6 [26] = 8'h00;
    \U$6 [27] = 8'h00;
    \U$6 [28] = 8'h00;
    \U$6 [29] = 8'h00;
    \U$6 [30] = 8'h00;
    \U$6 [31] = 8'h00;
  end
  always @(posedge clk) begin
    if (\mem_w_en$30 )
      \U$6 [\mem_w_addr$28 ] <= \mem_w_data$29 ;
  end
  assign \mem_r_data$8  = \U$6 [\mem_r_addr$27 ];
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  always @(posedge clk)
    fsm_state <= \$41 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  always @(posedge clk)
    \$signal  <= \$42 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  always @(posedge clk)
    \$signal$12  <= \$43 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  always @(posedge clk)
    \$signal$13  <= \$44 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  always @(posedge clk)
    \$signal$14  <= \$45 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:92" *)
  always @(posedge clk)
    cpu_addr_r <= \$46 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:102" *)
  always @(posedge clk)
    addr_cntr <= \$47 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:112" *)
  always @(posedge clk)
    bypass_read_r <= \$48 ;
  assign \$1  = i_cpu_req[31:28] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:118" *) 1'h1;
  assign \$4  = \$3  == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ast.py:2417" *) i_cpu_req[31:7];
  assign \$5  = \$2  & (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ast.py:2417" *) \$4 ;
  assign \$6  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } + (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:142" *) i_cpu_req[63:32];
  assign \$7  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } & (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:145" *) i_cpu_req[63:32];
  assign \$8  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } | (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:148" *) i_cpu_req[63:32];
  assign \$9  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } ^ (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:151" *) i_cpu_req[63:32];
  assign \$10  = $signed({ \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data }) < (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:155" *) $signed(i_cpu_req[63:32]);
  assign \$11  = \$10  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:155" *) { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } : i_cpu_req[63:32];
  assign \$12  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } < (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:159" *) i_cpu_req[63:32];
  assign \$13  = \$12  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:159" *) { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } : i_cpu_req[63:32];
  assign \$14  = $signed({ \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data }) > (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:163" *) $signed(i_cpu_req[63:32]);
  assign \$15  = \$14  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:163" *) { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } : i_cpu_req[63:32];
  assign \$16  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } > (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:167" *) i_cpu_req[63:32];
  assign \$17  = \$16  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:167" *) { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } : i_cpu_req[63:32];
  assign \$19  = ! (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) fsm_state;
  assign \$20  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 1'h1;
  assign \$21  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h2;
  assign \$22  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h3;
  assign \$23  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h4;
  assign \$24  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h5;
  assign \$25  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h6;
  assign \$26  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h7;
  assign \$27  = i_cpu_req[31:28] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:118" *) 1'h1;
  assign \$30  = \$29  == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ast.py:2417" *) i_cpu_req[31:7];
  assign \$31  = \$28  & (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ast.py:2417" *) \$30 ;
  assign \$32  = i_cpu_req[71:68] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:119" *) 1'h1;
  assign \$33  = i_cpu_req[71:68] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:121" *) 2'h2;
  assign \$36  = \$34  & (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ast.py:2417" *) \$35 ;
  assign \$37  = addr_cntr + (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:189" *) 1'h1;
  assign \$38  = addr_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:190" *) 3'h7;
  assign \$39  = addr_cntr + (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:210" *) 1'h1;
  assign \$40  = addr_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:211" *) 3'h7;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    wdata32 = i_cpu_req[63:32];
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              casez (i_cpu_req[71:68])
                4'h1:
                    /* empty */;
                4'h2:
                    /* empty */;
                4'h3:
                    /* empty */;
                4'h4:
                    wdata32 = \$6 [31:0];
                4'h5:
                    wdata32 = \$7 ;
                4'h6:
                    wdata32 = \$8 ;
                4'h7:
                    wdata32 = \$9 ;
                4'h8:
                    wdata32 = \$11 ;
                4'h9:
                    wdata32 = \$13 ;
                4'ha:
                    wdata32 = \$15 ;
                4'hb:
                    wdata32 = \$17 ;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    mem_r_addr = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              mem_r_addr = i_cpu_req[6:2];
            end
          end
      3'h3:
          mem_r_addr = { cpu_addr_r[6:5], addr_cntr };
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    mem_w_addr = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              mem_w_addr = i_cpu_req[6:2];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            mem_w_addr = { cpu_addr_r[6:5], addr_cntr };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    mem_w_data = 8'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              mem_w_data = wdata32[7:0];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            mem_w_data = i_wb_dat[7:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    mem_w_en = 1'h0;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              if (i_cpu_req[64]) begin
                mem_w_en = 1'h1;
              end
              casez (i_cpu_req[71:68])
                4'h1:
                    mem_w_en = 1'h0;
              endcase
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            mem_w_en = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_r_addr$19  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_r_addr$19  = i_cpu_req[6:2];
            end
          end
      3'h3:
          \mem_r_addr$19  = { cpu_addr_r[6:5], addr_cntr };
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_w_addr$20  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_addr$20  = i_cpu_req[6:2];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_addr$20  = { cpu_addr_r[6:5], addr_cntr };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_w_data$21  = 8'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_data$21  = wdata32[15:8];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_data$21  = i_wb_dat[15:8];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_w_en$22  = 1'h0;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              if (i_cpu_req[65]) begin
                \mem_w_en$22  = 1'h1;
              end
              casez (i_cpu_req[71:68])
                4'h1:
                    \mem_w_en$22  = 1'h0;
              endcase
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_en$22  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_r_addr$23  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_r_addr$23  = i_cpu_req[6:2];
            end
          end
      3'h3:
          \mem_r_addr$23  = { cpu_addr_r[6:5], addr_cntr };
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_w_addr$24  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_addr$24  = i_cpu_req[6:2];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_addr$24  = { cpu_addr_r[6:5], addr_cntr };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_w_data$25  = 8'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_data$25  = wdata32[23:16];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_data$25  = i_wb_dat[23:16];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_w_en$26  = 1'h0;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              if (i_cpu_req[66]) begin
                \mem_w_en$26  = 1'h1;
              end
              casez (i_cpu_req[71:68])
                4'h1:
                    \mem_w_en$26  = 1'h0;
              endcase
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_en$26  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_r_addr$27  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_r_addr$27  = i_cpu_req[6:2];
            end
          end
      3'h3:
          \mem_r_addr$27  = { cpu_addr_r[6:5], addr_cntr };
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_w_addr$28  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_addr$28  = i_cpu_req[6:2];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_addr$28  = { cpu_addr_r[6:5], addr_cntr };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_w_data$29  = 8'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_data$29  = wdata32[31:24];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_data$29  = i_wb_dat[31:24];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \mem_w_en$30  = 1'h0;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              if (i_cpu_req[67]) begin
                \mem_w_en$30  = 1'h1;
              end
              casez (i_cpu_req[71:68])
                4'h1:
                    \mem_w_en$30  = 1'h0;
              endcase
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_en$30  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    o_cpu_resp = 33'h000000000;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              o_cpu_resp[32:1] = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data };
              o_cpu_resp[0] = 1'h1;
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h1:
          /* empty */;
      3'h6:
        begin
          o_cpu_resp[32:1] = bypass_read_r;
          o_cpu_resp[0] = 1'h1;
        end
      3'h2:
          /* empty */;
      3'h7:
          o_cpu_resp[0] = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    o_wb_cyc = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_cyc = 1'h1;
      3'h4:
          o_wb_cyc = 1'h1;
      3'h5:
          /* empty */;
      3'h1:
          o_wb_cyc = 1'h1;
      3'h6:
          /* empty */;
      3'h2:
          o_wb_cyc = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    o_wb_stb = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_stb = 1'h1;
      3'h4:
          o_wb_stb = 1'h1;
      3'h5:
          o_wb_stb = 1'h0;
      3'h1:
          o_wb_stb = 1'h1;
      3'h6:
          /* empty */;
      3'h2:
          o_wb_stb = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    o_wb_we = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_we = 1'h1;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h1:
          o_wb_we = 1'h0;
      3'h6:
          /* empty */;
      3'h2:
          o_wb_we = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    o_wb_sel = 4'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_sel = 4'hf;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h1:
          o_wb_sel = 4'h0;
      3'h6:
          /* empty */;
      3'h2:
          o_wb_sel = i_cpu_req[67:64];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    o_wb_adr = 32'd0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_adr = { \$18 , cpu_addr_r[6:5], addr_cntr, 2'h0 };
      3'h4:
          o_wb_adr = { cpu_addr_r[31:5], addr_cntr, 2'h0 };
      3'h5:
          /* empty */;
      3'h1:
          o_wb_adr = i_cpu_req[31:0];
      3'h6:
          /* empty */;
      3'h2:
          o_wb_adr = i_cpu_req[31:0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    o_wb_dat = 32'd0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_dat = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data };
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h1:
          o_wb_dat = 32'd0;
      3'h6:
          /* empty */;
      3'h2:
          o_wb_dat = i_cpu_req[63:32];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$41  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            (* full_case = 32'd1 *)
            if (\$27 ) begin
              if (\$32 ) begin
                \$41  = 3'h1;
              end else if (\$33 ) begin
                \$41  = 3'h2;
              end
            end else if (\$31 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$36 ) begin
                \$41  = 3'h3;
              end else begin
                \$41  = 3'h4;
              end
            end
          end
      3'h3:
          if (i_wb_ack) begin
            if (\$38 ) begin
              \$41  = 3'h4;
            end
          end
      3'h4:
          if (i_wb_ack) begin
            \$41  = 3'h5;
          end
      3'h5:
          (* full_case = 32'd1 *)
          if (\$40 ) begin
            \$41  = 3'h0;
          end else begin
            \$41  = 3'h4;
          end
      3'h1:
          if (i_wb_ack) begin
            \$41  = 3'h6;
          end
      3'h6:
          \$41  = 3'h0;
      3'h2:
          if (i_wb_ack) begin
            \$41  = 3'h7;
          end
      3'h7:
          \$41  = 3'h0;
    endcase
    if (rst) begin
      \$41  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$42  = \$signal ;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$27 ) begin
            end else if (\$31 ) begin
              casez (i_cpu_req[71:68])
                4'h1:
                    /* empty */;
                4'h2:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h3:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h4:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h5:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h6:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h7:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h8:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h9:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'ha:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'hb:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
              endcase
            end
          end
      3'h3:
          if (i_wb_ack) begin
            if (\$38 ) begin
              casez (cpu_addr_r[6:5])
                2'h0:
                  begin
                    \$42 [1] = 1'h0;
                    \$42 [0] = 1'h0;
                  end
              endcase
            end
          end
      3'h4:
          /* empty */;
      3'h5:
          if (\$40 ) begin
            casez (cpu_addr_r[6:5])
              2'h0:
                begin
                  \$42 [26:2] = cpu_addr_r[31:7];
                  \$42 [0] = 1'h1;
                end
            endcase
          end
    endcase
    if (rst) begin
      \$42  = 27'h0000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$43  = \$signal$12 ;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$27 ) begin
            end else if (\$31 ) begin
              casez (i_cpu_req[71:68])
                4'h1:
                    /* empty */;
                4'h2:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h3:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h4:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h5:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h6:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h7:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h8:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h9:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'ha:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'hb:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
              endcase
            end
          end
      3'h3:
          if (i_wb_ack) begin
            if (\$38 ) begin
              casez (cpu_addr_r[6:5])
                2'h0:
                    /* empty */;
                2'h1:
                  begin
                    \$43 [1] = 1'h0;
                    \$43 [0] = 1'h0;
                  end
              endcase
            end
          end
      3'h4:
          /* empty */;
      3'h5:
          if (\$40 ) begin
            casez (cpu_addr_r[6:5])
              2'h0:
                  /* empty */;
              2'h1:
                begin
                  \$43 [26:2] = cpu_addr_r[31:7];
                  \$43 [0] = 1'h1;
                end
            endcase
          end
    endcase
    if (rst) begin
      \$43  = 27'h0000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$44  = \$signal$13 ;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$27 ) begin
            end else if (\$31 ) begin
              casez (i_cpu_req[71:68])
                4'h1:
                    /* empty */;
                4'h2:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h3:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h4:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h5:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h6:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h7:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h8:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h9:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'ha:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'hb:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
              endcase
            end
          end
      3'h3:
          if (i_wb_ack) begin
            if (\$38 ) begin
              casez (cpu_addr_r[6:5])
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                  begin
                    \$44 [1] = 1'h0;
                    \$44 [0] = 1'h0;
                  end
              endcase
            end
          end
      3'h4:
          /* empty */;
      3'h5:
          if (\$40 ) begin
            casez (cpu_addr_r[6:5])
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                begin
                  \$44 [26:2] = cpu_addr_r[31:7];
                  \$44 [0] = 1'h1;
                end
            endcase
          end
    endcase
    if (rst) begin
      \$44  = 27'h0000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$45  = \$signal$14 ;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$27 ) begin
            end else if (\$31 ) begin
              casez (i_cpu_req[71:68])
                4'h1:
                    /* empty */;
                4'h2:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h3:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h4:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h5:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h6:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h7:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h8:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h9:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'ha:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'hb:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
              endcase
            end
          end
      3'h3:
          if (i_wb_ack) begin
            if (\$38 ) begin
              (* full_case = 32'd1 *)
              casez (cpu_addr_r[6:5])
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                  begin
                    \$45 [1] = 1'h0;
                    \$45 [0] = 1'h0;
                  end
              endcase
            end
          end
      3'h4:
          /* empty */;
      3'h5:
          if (\$40 ) begin
            (* full_case = 32'd1 *)
            casez (cpu_addr_r[6:5])
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  /* empty */;
              2'h3:
                begin
                  \$45 [26:2] = cpu_addr_r[31:7];
                  \$45 [0] = 1'h1;
                end
            endcase
          end
    endcase
    if (rst) begin
      \$45  = 27'h0000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$46  = cpu_addr_r;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            (* full_case = 32'd1 *)
            if (\$27 ) begin
            end else if (\$31 ) begin
            end else begin
              \$46  = i_cpu_req[31:0];
            end
          end
    endcase
    if (rst) begin
      \$46  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$47  = addr_cntr;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            (* full_case = 32'd1 *)
            if (\$27 ) begin
            end else if (\$31 ) begin
            end else begin
              \$47  = 3'h0;
            end
          end
      3'h3:
          if (i_wb_ack) begin
            \$47  = \$37 [2:0];
          end
      3'h4:
          /* empty */;
      3'h5:
          \$47  = \$39 [2:0];
    endcase
    if (rst) begin
      \$47  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$48  = bypass_read_r;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h1:
          if (i_wb_ack) begin
            \$48  = i_wb_dat;
          end
    endcase
    if (rst) begin
      \$48  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$2  = \$signal [0];
      2'h1:
          \$2  = \$signal$12 [0];
      2'h2:
          \$2  = \$signal$13 [0];
      2'h3:
          \$2  = \$signal$14 [0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$3  = \$signal [26:2];
      2'h1:
          \$3  = \$signal$12 [26:2];
      2'h2:
          \$3  = \$signal$13 [26:2];
      2'h3:
          \$3  = \$signal$14 [26:2];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (cpu_addr_r[6:5])
      2'h0:
          \$18  = \$signal [26:2];
      2'h1:
          \$18  = \$signal$12 [26:2];
      2'h2:
          \$18  = \$signal$13 [26:2];
      2'h3:
          \$18  = \$signal$14 [26:2];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$28  = \$signal [0];
      2'h1:
          \$28  = \$signal$12 [0];
      2'h2:
          \$28  = \$signal$13 [0];
      2'h3:
          \$28  = \$signal$14 [0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$29  = \$signal [26:2];
      2'h1:
          \$29  = \$signal$12 [26:2];
      2'h2:
          \$29  = \$signal$13 [26:2];
      2'h3:
          \$29  = \$signal$14 [26:2];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$34  = \$signal [0];
      2'h1:
          \$34  = \$signal$12 [0];
      2'h2:
          \$34  = \$signal$13 [0];
      2'h3:
          \$34  = \$signal$14 [0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$35  = \$signal [1];
      2'h1:
          \$35  = \$signal$12 [1];
      2'h2:
          \$35  = \$signal$13 [1];
      2'h3:
          \$35  = \$signal$14 [1];
    endcase
  end
  assign cpu_addr = i_cpu_req[31:0];
  assign i_cpu_addr_r = cpu_addr_r;
  assign rdata32 = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data };
  assign \cpu_addr.offset  = i_cpu_req[4:0];
  assign \cpu_addr.index  = i_cpu_req[6:5];
  assign \cpu_addr.tag  = i_cpu_req[31:7];
  assign \i_cpu_req.addr  = i_cpu_req[31:0];
  assign \i_cpu_req.data  = i_cpu_req[63:32];
  assign \i_cpu_req.wsel  = i_cpu_req[67:64];
  assign \i_cpu_req.op  = i_cpu_req[71:68];
  assign \i_cpu_req.valid  = i_cpu_req[72];
  assign \cpu_addr_r.offset  = cpu_addr_r[4:0];
  assign \cpu_addr_r.index  = cpu_addr_r[6:5];
  assign \cpu_addr_r.tag  = cpu_addr_r[31:7];
  assign \$signal.valid  = \$signal [0];
  assign \$signal.dirty  = \$signal [1];
  assign \$signal.tag  = \$signal [26:2];
  assign \$signal$12.valid  = \$signal$12 [0];
  assign \$signal$12.dirty  = \$signal$12 [1];
  assign \$signal$12.tag  = \$signal$12 [26:2];
  assign \$signal$13.valid  = \$signal$13 [0];
  assign \$signal$13.dirty  = \$signal$13 [1];
  assign \$signal$13.tag  = \$signal$13 [26:2];
  assign \$signal$14.valid  = \$signal$14 [0];
  assign \$signal$14.dirty  = \$signal$14 [1];
  assign \$signal$14.tag  = \$signal$14 [26:2];
  assign \o_cpu_resp.rdy  = o_cpu_resp[0];
  assign \o_cpu_resp.data  = o_cpu_resp[32:1];
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:503" *)
(* generator = "Amaranth" *)
module \top.u_cpu.u_exe (rst, i_pipe_id_exe, i_csr_data, o_pipe_exe_mem, o_jump_pc, o_jump_pc_valid, o_csr_op, o_csr_addr, o_csr_data, o_multicycle_busy, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$6  = 0;
  wire [32:0] \$1 ;
  wire [33:0] \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire [12:0] \$13 ;
  wire [33:0] \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire [12:0] \$17 ;
  wire [33:0] \$18 ;
  wire \$19 ;
  wire [20:0] \$2 ;
  wire \$20 ;
  wire [12:0] \$21 ;
  wire [33:0] \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire [12:0] \$25 ;
  wire [33:0] \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire [12:0] \$29 ;
  wire [33:0] \$3 ;
  wire [33:0] \$30 ;
  wire [32:0] \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire [31:0] \$36 ;
  wire [31:0] \$37 ;
  wire [31:0] \$38 ;
  wire [62:0] \$39 ;
  wire [32:0] \$4 ;
  wire [31:0] \$40 ;
  wire [31:0] \$41 ;
  wire [32:0] \$42 ;
  wire [32:0] \$43 ;
  wire [62:0] \$44 ;
  wire \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire \$48 ;
  wire [31:0] \$49 ;
  wire [33:0] \$5 ;
  wire [31:0] \$50 ;
  wire [31:0] \$51 ;
  wire [31:0] \$52 ;
  wire [31:0] \$53 ;
  wire [63:0] \$54 ;
  wire [63:0] \$55 ;
  wire [63:0] \$56 ;
  wire [63:0] \$57 ;
  wire [32:0] \$58 ;
  wire [32:0] \$59 ;
  wire [32:0] \$6 ;
  wire \$60 ;
  wire \$61 ;
  wire \$62 ;
  wire [32:0] \$63 ;
  wire [32:0] \$64 ;
  wire [32:0] \$65 ;
  wire [32:0] \$66 ;
  wire \$7 ;
  wire \$8 ;
  wire [12:0] \$9 ;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:500" *)
  input [31:0] i_csr_data;
  wire [31:0] i_csr_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:152" *)
  reg [31:0] i_dividend;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:153" *)
  reg [31:0] i_divisor;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:151" *)
  reg i_en;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  input [120:0] i_pipe_id_exe;
  wire [120:0] i_pipe_id_exe;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [11:0] \i_pipe_id_exe$imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \i_pipe_id_exe$op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \i_pipe_id_exe$op2 ;
  (* enum_base_type = "Opcode" *)
  (* enum_value_0000001 = "LUI" *)
  (* enum_value_0000010 = "AUIPC" *)
  (* enum_value_0000011 = "JAL" *)
  (* enum_value_0000100 = "JALR" *)
  (* enum_value_0000101 = "BEQ" *)
  (* enum_value_0000110 = "BNE" *)
  (* enum_value_0000111 = "BLT" *)
  (* enum_value_0001000 = "BGE" *)
  (* enum_value_0001001 = "BLTU" *)
  (* enum_value_0001010 = "BGEU" *)
  (* enum_value_0001011 = "LB" *)
  (* enum_value_0001100 = "LH" *)
  (* enum_value_0001101 = "LW" *)
  (* enum_value_0001110 = "LBU" *)
  (* enum_value_0001111 = "LHU" *)
  (* enum_value_0010000 = "SB" *)
  (* enum_value_0010001 = "SH" *)
  (* enum_value_0010010 = "SW" *)
  (* enum_value_0010011 = "ADDI" *)
  (* enum_value_0010100 = "SLTI" *)
  (* enum_value_0010101 = "SLTIU" *)
  (* enum_value_0010110 = "XORI" *)
  (* enum_value_0010111 = "ORI" *)
  (* enum_value_0011000 = "ANDI" *)
  (* enum_value_0011001 = "SLLI" *)
  (* enum_value_0011010 = "SRLI" *)
  (* enum_value_0011011 = "SRAI" *)
  (* enum_value_0011100 = "ADD" *)
  (* enum_value_0011101 = "SUB" *)
  (* enum_value_0011110 = "SLL" *)
  (* enum_value_0011111 = "SLT" *)
  (* enum_value_0100000 = "SLTU" *)
  (* enum_value_0100001 = "XOR" *)
  (* enum_value_0100010 = "SRL" *)
  (* enum_value_0100011 = "SRA" *)
  (* enum_value_0100100 = "OR" *)
  (* enum_value_0100101 = "AND" *)
  (* enum_value_0100110 = "FENCE" *)
  (* enum_value_0100111 = "ECALL" *)
  (* enum_value_0101000 = "EBREAK" *)
  (* enum_value_0101001 = "LR_W" *)
  (* enum_value_0101010 = "SC_W" *)
  (* enum_value_0101011 = "AMOSWAP_W" *)
  (* enum_value_0101100 = "AMOADD_W" *)
  (* enum_value_0101101 = "AMOXOR_W" *)
  (* enum_value_0101110 = "AMOAND_W" *)
  (* enum_value_0101111 = "AMOOR_W" *)
  (* enum_value_0110000 = "AMOMIN_W" *)
  (* enum_value_0110001 = "AMOMAX_W" *)
  (* enum_value_0110010 = "AMOMINU_W" *)
  (* enum_value_0110011 = "AMOMAXU_W" *)
  (* enum_value_0110100 = "MUL" *)
  (* enum_value_0110101 = "MULH" *)
  (* enum_value_0110110 = "MULHSU" *)
  (* enum_value_0110111 = "MULHU" *)
  (* enum_value_0111000 = "DIV" *)
  (* enum_value_0111001 = "DIVU" *)
  (* enum_value_0111010 = "REM" *)
  (* enum_value_0111011 = "REMU" *)
  (* enum_value_0111100 = "CSRRW" *)
  (* enum_value_0111101 = "CSRRS" *)
  (* enum_value_0111110 = "CSRRC" *)
  (* enum_value_0111111 = "CSRRWI" *)
  (* enum_value_1000000 = "CSRRSI" *)
  (* enum_value_1000001 = "CSRRCI" *)
  (* enum_value_1000010 = "MRET" *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [6:0] \i_pipe_id_exe$opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \i_pipe_id_exe$pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [4:0] \i_pipe_id_exe$rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire \i_pipe_id_exe$valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [11:0] \i_pipe_id_exe.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [31:0] \i_pipe_id_exe.op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [31:0] \i_pipe_id_exe.op2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [6:0] \i_pipe_id_exe.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [31:0] \i_pipe_id_exe.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire [4:0] \i_pipe_id_exe.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:492" *)
  wire \i_pipe_id_exe.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:154" *)
  wire o_busy;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:498" *)
  output [11:0] o_csr_addr;
  reg [11:0] o_csr_addr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:499" *)
  output [31:0] o_csr_data;
  reg [31:0] o_csr_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:497" *)
  output [1:0] o_csr_op;
  reg [1:0] o_csr_op;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:495" *)
  output [31:0] o_jump_pc;
  reg [31:0] o_jump_pc;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:496" *)
  output o_jump_pc_valid;
  reg o_jump_pc_valid;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:154" *)
  output o_multicycle_busy;
  wire o_multicycle_busy;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  output [152:0] o_pipe_exe_mem;
  reg [152:0] o_pipe_exe_mem;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [11:0] \o_pipe_exe_mem$imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \o_pipe_exe_mem$op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \o_pipe_exe_mem$op2 ;
  (* enum_base_type = "Opcode" *)
  (* enum_value_0000001 = "LUI" *)
  (* enum_value_0000010 = "AUIPC" *)
  (* enum_value_0000011 = "JAL" *)
  (* enum_value_0000100 = "JALR" *)
  (* enum_value_0000101 = "BEQ" *)
  (* enum_value_0000110 = "BNE" *)
  (* enum_value_0000111 = "BLT" *)
  (* enum_value_0001000 = "BGE" *)
  (* enum_value_0001001 = "BLTU" *)
  (* enum_value_0001010 = "BGEU" *)
  (* enum_value_0001011 = "LB" *)
  (* enum_value_0001100 = "LH" *)
  (* enum_value_0001101 = "LW" *)
  (* enum_value_0001110 = "LBU" *)
  (* enum_value_0001111 = "LHU" *)
  (* enum_value_0010000 = "SB" *)
  (* enum_value_0010001 = "SH" *)
  (* enum_value_0010010 = "SW" *)
  (* enum_value_0010011 = "ADDI" *)
  (* enum_value_0010100 = "SLTI" *)
  (* enum_value_0010101 = "SLTIU" *)
  (* enum_value_0010110 = "XORI" *)
  (* enum_value_0010111 = "ORI" *)
  (* enum_value_0011000 = "ANDI" *)
  (* enum_value_0011001 = "SLLI" *)
  (* enum_value_0011010 = "SRLI" *)
  (* enum_value_0011011 = "SRAI" *)
  (* enum_value_0011100 = "ADD" *)
  (* enum_value_0011101 = "SUB" *)
  (* enum_value_0011110 = "SLL" *)
  (* enum_value_0011111 = "SLT" *)
  (* enum_value_0100000 = "SLTU" *)
  (* enum_value_0100001 = "XOR" *)
  (* enum_value_0100010 = "SRL" *)
  (* enum_value_0100011 = "SRA" *)
  (* enum_value_0100100 = "OR" *)
  (* enum_value_0100101 = "AND" *)
  (* enum_value_0100110 = "FENCE" *)
  (* enum_value_0100111 = "ECALL" *)
  (* enum_value_0101000 = "EBREAK" *)
  (* enum_value_0101001 = "LR_W" *)
  (* enum_value_0101010 = "SC_W" *)
  (* enum_value_0101011 = "AMOSWAP_W" *)
  (* enum_value_0101100 = "AMOADD_W" *)
  (* enum_value_0101101 = "AMOXOR_W" *)
  (* enum_value_0101110 = "AMOAND_W" *)
  (* enum_value_0101111 = "AMOOR_W" *)
  (* enum_value_0110000 = "AMOMIN_W" *)
  (* enum_value_0110001 = "AMOMAX_W" *)
  (* enum_value_0110010 = "AMOMINU_W" *)
  (* enum_value_0110011 = "AMOMAXU_W" *)
  (* enum_value_0110100 = "MUL" *)
  (* enum_value_0110101 = "MULH" *)
  (* enum_value_0110110 = "MULHSU" *)
  (* enum_value_0110111 = "MULHU" *)
  (* enum_value_0111000 = "DIV" *)
  (* enum_value_0111001 = "DIVU" *)
  (* enum_value_0111010 = "REM" *)
  (* enum_value_0111011 = "REMU" *)
  (* enum_value_0111100 = "CSRRW" *)
  (* enum_value_0111101 = "CSRRS" *)
  (* enum_value_0111110 = "CSRRC" *)
  (* enum_value_0111111 = "CSRRWI" *)
  (* enum_value_1000000 = "CSRRSI" *)
  (* enum_value_1000001 = "CSRRCI" *)
  (* enum_value_1000010 = "MRET" *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [6:0] \o_pipe_exe_mem$opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \o_pipe_exe_mem$pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [4:0] \o_pipe_exe_mem$rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \o_pipe_exe_mem$res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire \o_pipe_exe_mem$valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [11:0] \o_pipe_exe_mem.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [31:0] \o_pipe_exe_mem.op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [31:0] \o_pipe_exe_mem.op2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [6:0] \o_pipe_exe_mem.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [31:0] \o_pipe_exe_mem.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [4:0] \o_pipe_exe_mem.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire [31:0] \o_pipe_exe_mem.res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:493" *)
  wire \o_pipe_exe_mem.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:155" *)
  wire [31:0] o_quotient;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:156" *)
  wire [31:0] o_remainder;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  assign \$34  = i_pipe_id_exe[80:49] < (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:608" *) i_pipe_id_exe[48:17];
  assign \$35  = \$34  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:608" *) 1'h1 : 1'h0;
  assign \$36  = i_pipe_id_exe[80:49] ^ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:610" *) i_pipe_id_exe[48:17];
  assign \$37  = i_pipe_id_exe[80:49] | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:612" *) i_pipe_id_exe[48:17];
  assign \$38  = i_pipe_id_exe[80:49] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:614" *) i_pipe_id_exe[48:17];
  assign \$39  = i_pipe_id_exe[80:49] << (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:616" *) i_pipe_id_exe[21:17];
  assign \$40  = i_pipe_id_exe[80:49] >> (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:618" *) i_pipe_id_exe[21:17];
  assign \$41  = $signed(i_pipe_id_exe[80:49]) >>> (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:620" *) i_pipe_id_exe[21:17];
  assign \$42  = i_pipe_id_exe[80:49] + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:622" *) i_pipe_id_exe[48:17];
  assign \$43  = i_pipe_id_exe[80:49] - (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:624" *) i_pipe_id_exe[48:17];
  assign \$44  = i_pipe_id_exe[80:49] << (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:626" *) i_pipe_id_exe[21:17];
  assign \$45  = $signed(i_pipe_id_exe[80:49]) < (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:628" *) $signed(i_pipe_id_exe[48:17]);
  assign \$46  = \$45  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:628" *) 1'h1 : 1'h0;
  assign \$47  = i_pipe_id_exe[80:49] < (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:630" *) i_pipe_id_exe[48:17];
  assign \$48  = \$47  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:630" *) 1'h1 : 1'h0;
  assign \$49  = i_pipe_id_exe[80:49] ^ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:632" *) i_pipe_id_exe[48:17];
  assign \$50  = i_pipe_id_exe[80:49] >> (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:634" *) i_pipe_id_exe[21:17];
  assign \$51  = $signed(i_pipe_id_exe[80:49]) >>> (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:636" *) i_pipe_id_exe[21:17];
  assign \$52  = i_pipe_id_exe[80:49] | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:638" *) i_pipe_id_exe[48:17];
  assign \$53  = i_pipe_id_exe[80:49] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:640" *) i_pipe_id_exe[48:17];
  assign \$54  = i_pipe_id_exe[80:49] * (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:649" *) i_pipe_id_exe[48:17];
  assign \$55  = $signed(i_pipe_id_exe[80:49]) * (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:651" *) $signed(i_pipe_id_exe[48:17]);
  assign \$56  = i_pipe_id_exe[80:49] * (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:653" *) i_pipe_id_exe[48:17];
  assign \$57  = $signed(i_pipe_id_exe[80:49]) * (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:655" *) $signed({ 1'h0, i_pipe_id_exe[48:17] });
  assign \$58  = - (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:659" *) i_pipe_id_exe[80:49];
  assign \$59  = - (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:661" *) i_pipe_id_exe[48:17];
  assign \$60  = i_pipe_id_exe[80] ^ (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:662" *) i_pipe_id_exe[48];
  assign \$61  = | (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:662" *) i_pipe_id_exe[48:17];
  assign \$62  = \$60  & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:662" *) \$61 ;
  assign \$63  = - (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:663" *) o_quotient;
  assign \$64  = - (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:671" *) i_pipe_id_exe[80:49];
  assign \$65  = - (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:673" *) i_pipe_id_exe[48:17];
  assign \$66  = - (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:675" *) o_remainder;
  assign \$1  = i_pipe_id_exe[80:49] + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:536" *) i_pipe_id_exe[48:17];
  assign \$3  = $signed({ 1'h0, i_pipe_id_exe[119:88] }) + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:540" *) $signed(\$2 );
  assign \$4  = i_pipe_id_exe[119:88] + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:542" *) 3'h4;
  assign \$5  = $signed({ 1'h0, i_pipe_id_exe[80:49] }) + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:547" *) $signed(i_pipe_id_exe[16:5]);
  assign \$6  = i_pipe_id_exe[119:88] + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:549" *) 3'h4;
  assign \$7  = i_pipe_id_exe[80:49] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:552" *) i_pipe_id_exe[48:17];
  assign \$8  = i_pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:552" *) \$7 ;
  assign \$10  = $signed({ 1'h0, i_pipe_id_exe[119:88] }) + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:554" *) $signed(\$9 );
  assign \$11  = i_pipe_id_exe[80:49] != (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:558" *) i_pipe_id_exe[48:17];
  assign \$12  = i_pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:558" *) \$11 ;
  assign \$14  = $signed({ 1'h0, i_pipe_id_exe[119:88] }) + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:560" *) $signed(\$13 );
  assign \$15  = $signed(i_pipe_id_exe[80:49]) < (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:564" *) $signed(i_pipe_id_exe[48:17]);
  assign \$16  = i_pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:564" *) \$15 ;
  assign \$18  = $signed({ 1'h0, i_pipe_id_exe[119:88] }) + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:566" *) $signed(\$17 );
  assign \$19  = $signed(i_pipe_id_exe[80:49]) >= (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:570" *) $signed(i_pipe_id_exe[48:17]);
  assign \$20  = i_pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:570" *) \$19 ;
  assign \$22  = $signed({ 1'h0, i_pipe_id_exe[119:88] }) + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:572" *) $signed(\$21 );
  assign \$23  = i_pipe_id_exe[80:49] < (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:576" *) i_pipe_id_exe[48:17];
  assign \$24  = i_pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:576" *) \$23 ;
  assign \$26  = $signed({ 1'h0, i_pipe_id_exe[119:88] }) + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:578" *) $signed(\$25 );
  assign \$27  = i_pipe_id_exe[80:49] >= (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:582" *) i_pipe_id_exe[48:17];
  assign \$28  = i_pipe_id_exe[120] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:582" *) \$27 ;
  assign \$30  = $signed({ 1'h0, i_pipe_id_exe[119:88] }) + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:584" *) $signed(\$29 );
  assign \$31  = i_pipe_id_exe[80:49] + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:604" *) i_pipe_id_exe[48:17];
  assign \$32  = $signed(i_pipe_id_exe[80:49]) < (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:606" *) $signed(i_pipe_id_exe[48:17]);
  assign \$33  = \$32  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:606" *) 1'h1 : 1'h0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:511" *)
  \top.u_cpu.u_exe.u_div  u_div (
    .clk(clk),
    .i_dividend(i_dividend),
    .i_divisor(i_divisor),
    .i_en(i_en),
    .o_busy(o_multicycle_busy),
    .o_quotient(o_quotient),
    .o_remainder(o_remainder),
    .rst(rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    i_dividend = i_pipe_id_exe[80:49];
    casez (i_pipe_id_exe[87:81])
      7'h01:
          /* empty */;
      7'h02:
          /* empty */;
      7'h03:
          /* empty */;
      7'h04:
          /* empty */;
      7'h05:
          /* empty */;
      7'h06:
          /* empty */;
      7'h07:
          /* empty */;
      7'h08:
          /* empty */;
      7'h09:
          /* empty */;
      7'h0a:
          /* empty */;
      7'h0b:
          /* empty */;
      7'h0c:
          /* empty */;
      7'h0d:
          /* empty */;
      7'h0e:
          /* empty */;
      7'h0f:
          /* empty */;
      7'h10:
          /* empty */;
      7'h11:
          /* empty */;
      7'h12:
          /* empty */;
      7'h13:
          /* empty */;
      7'h14:
          /* empty */;
      7'h15:
          /* empty */;
      7'h16:
          /* empty */;
      7'h17:
          /* empty */;
      7'h18:
          /* empty */;
      7'h19:
          /* empty */;
      7'h1a:
          /* empty */;
      7'h1b:
          /* empty */;
      7'h1c:
          /* empty */;
      7'h1d:
          /* empty */;
      7'h1e:
          /* empty */;
      7'h1f:
          /* empty */;
      7'h20:
          /* empty */;
      7'h21:
          /* empty */;
      7'h22:
          /* empty */;
      7'h23:
          /* empty */;
      7'h24:
          /* empty */;
      7'h25:
          /* empty */;
      7'h26:
          /* empty */;
      7'h27:
          /* empty */;
      7'h28:
          /* empty */;
      7'h34:
          /* empty */;
      7'h35:
          /* empty */;
      7'h37:
          /* empty */;
      7'h36:
          /* empty */;
      7'h38:
          if (i_pipe_id_exe[80]) begin
            i_dividend = \$58 [31:0];
          end
      7'h39:
          /* empty */;
      7'h3a:
          if (i_pipe_id_exe[80]) begin
            i_dividend = \$64 [31:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    i_divisor = i_pipe_id_exe[48:17];
    casez (i_pipe_id_exe[87:81])
      7'h01:
          /* empty */;
      7'h02:
          /* empty */;
      7'h03:
          /* empty */;
      7'h04:
          /* empty */;
      7'h05:
          /* empty */;
      7'h06:
          /* empty */;
      7'h07:
          /* empty */;
      7'h08:
          /* empty */;
      7'h09:
          /* empty */;
      7'h0a:
          /* empty */;
      7'h0b:
          /* empty */;
      7'h0c:
          /* empty */;
      7'h0d:
          /* empty */;
      7'h0e:
          /* empty */;
      7'h0f:
          /* empty */;
      7'h10:
          /* empty */;
      7'h11:
          /* empty */;
      7'h12:
          /* empty */;
      7'h13:
          /* empty */;
      7'h14:
          /* empty */;
      7'h15:
          /* empty */;
      7'h16:
          /* empty */;
      7'h17:
          /* empty */;
      7'h18:
          /* empty */;
      7'h19:
          /* empty */;
      7'h1a:
          /* empty */;
      7'h1b:
          /* empty */;
      7'h1c:
          /* empty */;
      7'h1d:
          /* empty */;
      7'h1e:
          /* empty */;
      7'h1f:
          /* empty */;
      7'h20:
          /* empty */;
      7'h21:
          /* empty */;
      7'h22:
          /* empty */;
      7'h23:
          /* empty */;
      7'h24:
          /* empty */;
      7'h25:
          /* empty */;
      7'h26:
          /* empty */;
      7'h27:
          /* empty */;
      7'h28:
          /* empty */;
      7'h34:
          /* empty */;
      7'h35:
          /* empty */;
      7'h37:
          /* empty */;
      7'h36:
          /* empty */;
      7'h38:
          if (i_pipe_id_exe[48]) begin
            i_divisor = \$59 [31:0];
          end
      7'h39:
          /* empty */;
      7'h3a:
          if (i_pipe_id_exe[48]) begin
            i_divisor = \$65 [31:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    o_pipe_exe_mem[31:0] = 32'd0;
    casez (i_pipe_id_exe[87:81])
      7'h01:
          o_pipe_exe_mem[31:0] = i_pipe_id_exe[80:49];
      7'h02:
          o_pipe_exe_mem[31:0] = \$1 [31:0];
      7'h03:
          if (i_pipe_id_exe[120]) begin
            o_pipe_exe_mem[31:0] = \$4 [31:0];
          end
      7'h04:
          if (i_pipe_id_exe[120]) begin
            o_pipe_exe_mem[31:0] = \$6 [31:0];
          end
      7'h05:
          /* empty */;
      7'h06:
          /* empty */;
      7'h07:
          /* empty */;
      7'h08:
          /* empty */;
      7'h09:
          /* empty */;
      7'h0a:
          /* empty */;
      7'h0b:
          /* empty */;
      7'h0c:
          /* empty */;
      7'h0d:
          /* empty */;
      7'h0e:
          /* empty */;
      7'h0f:
          /* empty */;
      7'h10:
          /* empty */;
      7'h11:
          /* empty */;
      7'h12:
          /* empty */;
      7'h13:
          o_pipe_exe_mem[31:0] = \$31 [31:0];
      7'h14:
          o_pipe_exe_mem[31:0] = { 31'h00000000, \$33  };
      7'h15:
          o_pipe_exe_mem[31:0] = { 31'h00000000, \$35  };
      7'h16:
          o_pipe_exe_mem[31:0] = \$36 ;
      7'h17:
          o_pipe_exe_mem[31:0] = \$37 ;
      7'h18:
          o_pipe_exe_mem[31:0] = \$38 ;
      7'h19:
          o_pipe_exe_mem[31:0] = \$39 [31:0];
      7'h1a:
          o_pipe_exe_mem[31:0] = \$40 ;
      7'h1b:
          o_pipe_exe_mem[31:0] = \$41 ;
      7'h1c:
          o_pipe_exe_mem[31:0] = \$42 [31:0];
      7'h1d:
          o_pipe_exe_mem[31:0] = \$43 [31:0];
      7'h1e:
          o_pipe_exe_mem[31:0] = \$44 [31:0];
      7'h1f:
          o_pipe_exe_mem[31:0] = { 31'h00000000, \$46  };
      7'h20:
          o_pipe_exe_mem[31:0] = { 31'h00000000, \$48  };
      7'h21:
          o_pipe_exe_mem[31:0] = \$49 ;
      7'h22:
          o_pipe_exe_mem[31:0] = \$50 ;
      7'h23:
          o_pipe_exe_mem[31:0] = \$51 ;
      7'h24:
          o_pipe_exe_mem[31:0] = \$52 ;
      7'h25:
          o_pipe_exe_mem[31:0] = \$53 ;
      7'h26:
          /* empty */;
      7'h27:
          /* empty */;
      7'h28:
          /* empty */;
      7'h34:
          o_pipe_exe_mem[31:0] = \$54 [31:0];
      7'h35:
          o_pipe_exe_mem[31:0] = \$55 [63:32];
      7'h37:
          o_pipe_exe_mem[31:0] = \$56 [63:32];
      7'h36:
          o_pipe_exe_mem[31:0] = \$57 [63:32];
      7'h38:
          (* full_case = 32'd1 *)
          if (\$62 ) begin
            o_pipe_exe_mem[31:0] = \$63 [31:0];
          end else begin
            o_pipe_exe_mem[31:0] = o_quotient;
          end
      7'h39:
          o_pipe_exe_mem[31:0] = o_quotient;
      7'h3a:
          (* full_case = 32'd1 *)
          if (i_pipe_id_exe[80]) begin
            o_pipe_exe_mem[31:0] = \$66 [31:0];
          end else begin
            o_pipe_exe_mem[31:0] = o_remainder;
          end
      7'h3b:
          o_pipe_exe_mem[31:0] = o_remainder;
      7'h3c:
          o_pipe_exe_mem[31:0] = i_csr_data;
      7'h3d:
          o_pipe_exe_mem[31:0] = i_csr_data;
      7'h3e:
          o_pipe_exe_mem[31:0] = i_csr_data;
      7'h3f:
          o_pipe_exe_mem[31:0] = i_csr_data;
      7'h40:
          o_pipe_exe_mem[31:0] = i_csr_data;
      7'h41:
          o_pipe_exe_mem[31:0] = i_csr_data;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    o_jump_pc = 32'd0;
    casez (i_pipe_id_exe[87:81])
      7'h01:
          /* empty */;
      7'h02:
          /* empty */;
      7'h03:
          if (i_pipe_id_exe[120]) begin
            o_jump_pc = \$3 [31:0];
          end
      7'h04:
          if (i_pipe_id_exe[120]) begin
            o_jump_pc = { \$5 [31:1], 1'h0 };
          end
      7'h05:
          if (\$8 ) begin
            o_jump_pc = \$10 [31:0];
          end
      7'h06:
          if (\$12 ) begin
            o_jump_pc = \$14 [31:0];
          end
      7'h07:
          if (\$16 ) begin
            o_jump_pc = \$18 [31:0];
          end
      7'h08:
          if (\$20 ) begin
            o_jump_pc = \$22 [31:0];
          end
      7'h09:
          if (\$24 ) begin
            o_jump_pc = \$26 [31:0];
          end
      7'h0a:
          if (\$28 ) begin
            o_jump_pc = \$30 [31:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    o_jump_pc_valid = 1'h0;
    casez (i_pipe_id_exe[87:81])
      7'h01:
          /* empty */;
      7'h02:
          /* empty */;
      7'h03:
          if (i_pipe_id_exe[120]) begin
            o_jump_pc_valid = 1'h1;
          end
      7'h04:
          if (i_pipe_id_exe[120]) begin
            o_jump_pc_valid = 1'h1;
          end
      7'h05:
          if (\$8 ) begin
            o_jump_pc_valid = 1'h1;
          end
      7'h06:
          if (\$12 ) begin
            o_jump_pc_valid = 1'h1;
          end
      7'h07:
          if (\$16 ) begin
            o_jump_pc_valid = 1'h1;
          end
      7'h08:
          if (\$20 ) begin
            o_jump_pc_valid = 1'h1;
          end
      7'h09:
          if (\$24 ) begin
            o_jump_pc_valid = 1'h1;
          end
      7'h0a:
          if (\$28 ) begin
            o_jump_pc_valid = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    o_csr_op = 2'h0;
    casez (i_pipe_id_exe[87:81])
      7'h01:
          /* empty */;
      7'h02:
          /* empty */;
      7'h03:
          /* empty */;
      7'h04:
          /* empty */;
      7'h05:
          /* empty */;
      7'h06:
          /* empty */;
      7'h07:
          /* empty */;
      7'h08:
          /* empty */;
      7'h09:
          /* empty */;
      7'h0a:
          /* empty */;
      7'h0b:
          /* empty */;
      7'h0c:
          /* empty */;
      7'h0d:
          /* empty */;
      7'h0e:
          /* empty */;
      7'h0f:
          /* empty */;
      7'h10:
          /* empty */;
      7'h11:
          /* empty */;
      7'h12:
          /* empty */;
      7'h13:
          /* empty */;
      7'h14:
          /* empty */;
      7'h15:
          /* empty */;
      7'h16:
          /* empty */;
      7'h17:
          /* empty */;
      7'h18:
          /* empty */;
      7'h19:
          /* empty */;
      7'h1a:
          /* empty */;
      7'h1b:
          /* empty */;
      7'h1c:
          /* empty */;
      7'h1d:
          /* empty */;
      7'h1e:
          /* empty */;
      7'h1f:
          /* empty */;
      7'h20:
          /* empty */;
      7'h21:
          /* empty */;
      7'h22:
          /* empty */;
      7'h23:
          /* empty */;
      7'h24:
          /* empty */;
      7'h25:
          /* empty */;
      7'h26:
          /* empty */;
      7'h27:
          /* empty */;
      7'h28:
          /* empty */;
      7'h34:
          /* empty */;
      7'h35:
          /* empty */;
      7'h37:
          /* empty */;
      7'h36:
          /* empty */;
      7'h38:
          /* empty */;
      7'h39:
          /* empty */;
      7'h3a:
          /* empty */;
      7'h3b:
          /* empty */;
      7'h3c:
          o_csr_op = 2'h1;
      7'h3d:
          o_csr_op = 2'h2;
      7'h3e:
          o_csr_op = 2'h3;
      7'h3f:
          o_csr_op = 2'h1;
      7'h40:
          o_csr_op = 2'h2;
      7'h41:
          o_csr_op = 2'h3;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    o_csr_addr = 12'h000;
    casez (i_pipe_id_exe[87:81])
      7'h01:
          /* empty */;
      7'h02:
          /* empty */;
      7'h03:
          /* empty */;
      7'h04:
          /* empty */;
      7'h05:
          /* empty */;
      7'h06:
          /* empty */;
      7'h07:
          /* empty */;
      7'h08:
          /* empty */;
      7'h09:
          /* empty */;
      7'h0a:
          /* empty */;
      7'h0b:
          /* empty */;
      7'h0c:
          /* empty */;
      7'h0d:
          /* empty */;
      7'h0e:
          /* empty */;
      7'h0f:
          /* empty */;
      7'h10:
          /* empty */;
      7'h11:
          /* empty */;
      7'h12:
          /* empty */;
      7'h13:
          /* empty */;
      7'h14:
          /* empty */;
      7'h15:
          /* empty */;
      7'h16:
          /* empty */;
      7'h17:
          /* empty */;
      7'h18:
          /* empty */;
      7'h19:
          /* empty */;
      7'h1a:
          /* empty */;
      7'h1b:
          /* empty */;
      7'h1c:
          /* empty */;
      7'h1d:
          /* empty */;
      7'h1e:
          /* empty */;
      7'h1f:
          /* empty */;
      7'h20:
          /* empty */;
      7'h21:
          /* empty */;
      7'h22:
          /* empty */;
      7'h23:
          /* empty */;
      7'h24:
          /* empty */;
      7'h25:
          /* empty */;
      7'h26:
          /* empty */;
      7'h27:
          /* empty */;
      7'h28:
          /* empty */;
      7'h34:
          /* empty */;
      7'h35:
          /* empty */;
      7'h37:
          /* empty */;
      7'h36:
          /* empty */;
      7'h38:
          /* empty */;
      7'h39:
          /* empty */;
      7'h3a:
          /* empty */;
      7'h3b:
          /* empty */;
      7'h3c:
          o_csr_addr = i_pipe_id_exe[16:5];
      7'h3d:
          o_csr_addr = i_pipe_id_exe[16:5];
      7'h3e:
          o_csr_addr = i_pipe_id_exe[16:5];
      7'h3f:
          o_csr_addr = i_pipe_id_exe[16:5];
      7'h40:
          o_csr_addr = i_pipe_id_exe[16:5];
      7'h41:
          o_csr_addr = i_pipe_id_exe[16:5];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    o_csr_data = 32'd0;
    casez (i_pipe_id_exe[87:81])
      7'h01:
          /* empty */;
      7'h02:
          /* empty */;
      7'h03:
          /* empty */;
      7'h04:
          /* empty */;
      7'h05:
          /* empty */;
      7'h06:
          /* empty */;
      7'h07:
          /* empty */;
      7'h08:
          /* empty */;
      7'h09:
          /* empty */;
      7'h0a:
          /* empty */;
      7'h0b:
          /* empty */;
      7'h0c:
          /* empty */;
      7'h0d:
          /* empty */;
      7'h0e:
          /* empty */;
      7'h0f:
          /* empty */;
      7'h10:
          /* empty */;
      7'h11:
          /* empty */;
      7'h12:
          /* empty */;
      7'h13:
          /* empty */;
      7'h14:
          /* empty */;
      7'h15:
          /* empty */;
      7'h16:
          /* empty */;
      7'h17:
          /* empty */;
      7'h18:
          /* empty */;
      7'h19:
          /* empty */;
      7'h1a:
          /* empty */;
      7'h1b:
          /* empty */;
      7'h1c:
          /* empty */;
      7'h1d:
          /* empty */;
      7'h1e:
          /* empty */;
      7'h1f:
          /* empty */;
      7'h20:
          /* empty */;
      7'h21:
          /* empty */;
      7'h22:
          /* empty */;
      7'h23:
          /* empty */;
      7'h24:
          /* empty */;
      7'h25:
          /* empty */;
      7'h26:
          /* empty */;
      7'h27:
          /* empty */;
      7'h28:
          /* empty */;
      7'h34:
          /* empty */;
      7'h35:
          /* empty */;
      7'h37:
          /* empty */;
      7'h36:
          /* empty */;
      7'h38:
          /* empty */;
      7'h39:
          /* empty */;
      7'h3a:
          /* empty */;
      7'h3b:
          /* empty */;
      7'h3c:
          o_csr_data = i_pipe_id_exe[80:49];
      7'h3d:
          o_csr_data = i_pipe_id_exe[80:49];
      7'h3e:
          o_csr_data = i_pipe_id_exe[80:49];
      7'h3f:
          o_csr_data = i_pipe_id_exe[80:49];
      7'h40:
          o_csr_data = i_pipe_id_exe[80:49];
      7'h41:
          o_csr_data = i_pipe_id_exe[80:49];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    i_en = 1'h0;
    casez (i_pipe_id_exe[87:81])
      7'h01:
          /* empty */;
      7'h02:
          /* empty */;
      7'h03:
          /* empty */;
      7'h04:
          /* empty */;
      7'h05:
          /* empty */;
      7'h06:
          /* empty */;
      7'h07:
          /* empty */;
      7'h08:
          /* empty */;
      7'h09:
          /* empty */;
      7'h0a:
          /* empty */;
      7'h0b:
          /* empty */;
      7'h0c:
          /* empty */;
      7'h0d:
          /* empty */;
      7'h0e:
          /* empty */;
      7'h0f:
          /* empty */;
      7'h10:
          /* empty */;
      7'h11:
          /* empty */;
      7'h12:
          /* empty */;
      7'h13:
          /* empty */;
      7'h14:
          /* empty */;
      7'h15:
          /* empty */;
      7'h16:
          /* empty */;
      7'h17:
          /* empty */;
      7'h18:
          /* empty */;
      7'h19:
          /* empty */;
      7'h1a:
          /* empty */;
      7'h1b:
          /* empty */;
      7'h1c:
          /* empty */;
      7'h1d:
          /* empty */;
      7'h1e:
          /* empty */;
      7'h1f:
          /* empty */;
      7'h20:
          /* empty */;
      7'h21:
          /* empty */;
      7'h22:
          /* empty */;
      7'h23:
          /* empty */;
      7'h24:
          /* empty */;
      7'h25:
          /* empty */;
      7'h26:
          /* empty */;
      7'h27:
          /* empty */;
      7'h28:
          /* empty */;
      7'h34:
          /* empty */;
      7'h35:
          /* empty */;
      7'h37:
          /* empty */;
      7'h36:
          /* empty */;
      7'h38:
          i_en = i_pipe_id_exe[120];
      7'h39:
          i_en = i_pipe_id_exe[120];
      7'h3a:
          i_en = i_pipe_id_exe[120];
      7'h3b:
          i_en = i_pipe_id_exe[120];
    endcase
  end
  assign \i_pipe_id_exe$rd  = i_pipe_id_exe[4:0];
  assign \i_pipe_id_exe$imm  = i_pipe_id_exe[16:5];
  assign \i_pipe_id_exe$op2  = i_pipe_id_exe[48:17];
  assign \i_pipe_id_exe$op1  = i_pipe_id_exe[80:49];
  assign \i_pipe_id_exe$opcode  = i_pipe_id_exe[87:81];
  assign \i_pipe_id_exe$pc  = i_pipe_id_exe[119:88];
  assign \i_pipe_id_exe$valid  = i_pipe_id_exe[120];
  assign \o_pipe_exe_mem$res  = o_pipe_exe_mem[31:0];
  assign \o_pipe_exe_mem$rd  = o_pipe_exe_mem[36:32];
  assign \o_pipe_exe_mem$imm  = o_pipe_exe_mem[48:37];
  assign \o_pipe_exe_mem$op2  = o_pipe_exe_mem[80:49];
  assign \o_pipe_exe_mem$op1  = o_pipe_exe_mem[112:81];
  assign \o_pipe_exe_mem$opcode  = o_pipe_exe_mem[119:113];
  assign \o_pipe_exe_mem$pc  = o_pipe_exe_mem[151:120];
  assign \o_pipe_exe_mem$valid  = o_pipe_exe_mem[152];
  assign o_busy = o_multicycle_busy;
  assign \i_pipe_id_exe.rd  = i_pipe_id_exe[4:0];
  assign \i_pipe_id_exe.imm  = i_pipe_id_exe[16:5];
  assign \i_pipe_id_exe.op2  = i_pipe_id_exe[48:17];
  assign \i_pipe_id_exe.op1  = i_pipe_id_exe[80:49];
  assign \i_pipe_id_exe.opcode  = i_pipe_id_exe[87:81];
  assign \i_pipe_id_exe.pc  = i_pipe_id_exe[119:88];
  assign \i_pipe_id_exe.valid  = i_pipe_id_exe[120];
  assign \o_pipe_exe_mem.res  = o_pipe_exe_mem[31:0];
  assign \o_pipe_exe_mem.rd  = o_pipe_exe_mem[36:32];
  assign \o_pipe_exe_mem.imm  = o_pipe_exe_mem[48:37];
  assign \o_pipe_exe_mem.op2  = o_pipe_exe_mem[80:49];
  assign \o_pipe_exe_mem.op1  = o_pipe_exe_mem[112:81];
  assign \o_pipe_exe_mem.opcode  = o_pipe_exe_mem[119:113];
  assign \o_pipe_exe_mem.pc  = o_pipe_exe_mem[151:120];
  assign \o_pipe_exe_mem.valid  = o_pipe_exe_mem[152];
  always @*
    o_pipe_exe_mem[36:32] = i_pipe_id_exe[4:0];
  always @*
    o_pipe_exe_mem[80:49] = i_pipe_id_exe[48:17];
  always @*
    o_pipe_exe_mem[112:81] = i_pipe_id_exe[80:49];
  always @*
    o_pipe_exe_mem[48:37] = i_pipe_id_exe[16:5];
  always @*
    o_pipe_exe_mem[119:113] = i_pipe_id_exe[87:81];
  always @*
    o_pipe_exe_mem[151:120] = i_pipe_id_exe[119:88];
  always @*
    o_pipe_exe_mem[152] = i_pipe_id_exe[120];
  assign \$2  = { i_pipe_id_exe[68:49], 1'h0 };
  assign \$9  = { i_pipe_id_exe[16:5], 1'h0 };
  assign \$13  = { i_pipe_id_exe[16:5], 1'h0 };
  assign \$17  = { i_pipe_id_exe[16:5], 1'h0 };
  assign \$21  = { i_pipe_id_exe[16:5], 1'h0 };
  assign \$25  = { i_pipe_id_exe[16:5], 1'h0 };
  assign \$29  = { i_pipe_id_exe[16:5], 1'h0 };
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:159" *)
(* generator = "Amaranth" *)
module \top.u_cpu.u_exe.u_div (rst, i_dividend, i_divisor, i_en, o_busy, o_quotient, o_remainder, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$7  = 0;
  wire \$1 ;
  wire \$2 ;
  wire \$3 ;
  wire [5:0] \$4 ;
  wire \$5 ;
  wire \$6 ;
  reg [64:0] \$7 ;
  reg [4:0] \$8 ;
  reg [1:0] \$9 ;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:163" *)
  reg [4:0] cntr = 5'h00;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:152" *)
  input [31:0] i_dividend;
  wire [31:0] i_dividend;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:153" *)
  input [31:0] i_divisor;
  wire [31:0] i_divisor;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:151" *)
  input i_en;
  wire i_en;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:154" *)
  output o_busy;
  reg o_busy;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:155" *)
  output [31:0] o_quotient;
  wire [31:0] o_quotient;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:156" *)
  output [31:0] o_remainder;
  wire [31:0] o_remainder;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:161" *)
  reg [64:0] remainder = 65'h00000000000000000;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:162" *)
  wire [32:0] subtract;
  assign subtract = remainder[63:32] - (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:165" *) i_divisor;
  assign \$1  = ! (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) fsm_state;
  assign \$2  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 1'h1;
  assign \$3  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h2;
  assign \$4  = cntr + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:177" *) 1'h1;
  assign \$5  = $signed(subtract) >= (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:178" *) $signed(1'h0);
  assign \$6  = cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:183" *) 5'h1f;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:161" *)
  always @(posedge clk)
    remainder <= \$7 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:163" *)
  always @(posedge clk)
    cntr <= \$8 ;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  always @(posedge clk)
    fsm_state <= \$9 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    o_busy = 1'h0;
    casez (fsm_state)
      2'h0:
        begin
          o_busy = 1'h0;
          if (i_en) begin
            o_busy = 1'h1;
          end
        end
      2'h1:
          o_busy = 1'h1;
      2'h2:
          o_busy = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$7  = remainder;
    casez (fsm_state)
      2'h0:
          if (i_en) begin
            { \$7 [64:33], \$7 [0] } = 33'h000000000;
            \$7 [32:1] = i_dividend;
          end
      2'h1:
          (* full_case = 32'd1 *)
          if (\$5 ) begin
            \$7 [32:0] = { remainder[31:0], 1'h1 };
            \$7 [64:33] = subtract[31:0];
          end else begin
            \$7  = { remainder[63:0], 1'h0 };
          end
    endcase
    if (rst) begin
      \$7  = 65'h00000000000000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$8  = cntr;
    casez (fsm_state)
      2'h0:
          if (i_en) begin
            \$8  = 5'h00;
          end
      2'h1:
          \$8  = \$4 [4:0];
    endcase
    if (rst) begin
      \$8  = 5'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$9  = fsm_state;
    casez (fsm_state)
      2'h0:
          if (i_en) begin
            \$9  = 2'h1;
          end
      2'h1:
          if (\$6 ) begin
            \$9  = 2'h2;
          end
      2'h2:
          \$9  = 2'h0;
    endcase
    if (rst) begin
      \$9  = 2'h0;
    end
  end
  assign o_quotient = remainder[31:0];
  assign o_remainder = remainder[64:33];
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:80" *)
(* generator = "Amaranth" *)
module \top.u_cpu.u_icache (rst, i_wb_dat, i_wb_ack, i_cpu_req, o_cpu_resp, o_wb_cyc, o_wb_stb, o_wb_we, o_wb_sel, o_wb_adr, o_wb_dat, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$8  = 0;
  wire \$1 ;
  wire \$10 ;
  wire [31:0] \$11 ;
  wire \$12 ;
  wire [31:0] \$13 ;
  wire \$14 ;
  wire [31:0] \$15 ;
  wire \$16 ;
  wire [31:0] \$17 ;
  reg [24:0] \$18 ;
  wire \$19 ;
  reg \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  reg \$28 ;
  reg [24:0] \$29 ;
  reg [24:0] \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  reg \$34 ;
  reg \$35 ;
  wire \$36 ;
  wire [3:0] \$37 ;
  wire \$38 ;
  wire [3:0] \$39 ;
  wire \$4 ;
  wire \$40 ;
  reg [2:0] \$41 ;
  reg [26:0] \$42 ;
  reg [26:0] \$43 ;
  reg [26:0] \$44 ;
  reg [26:0] \$45 ;
  reg [31:0] \$46 ;
  reg [2:0] \$47 ;
  reg [31:0] \$48 ;
  wire \$5 ;
  wire [32:0] \$6 ;
  wire [31:0] \$7 ;
  wire [31:0] \$8 ;
  wire [31:0] \$9 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  reg [26:0] \$signal  = 27'h0000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  reg [26:0] \$signal$12  = 27'h0000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$12.dirty ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire [24:0] \$signal$12.tag ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$12.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  reg [26:0] \$signal$13  = 27'h0000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$13.dirty ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire [24:0] \$signal$13.tag ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$13.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  reg [26:0] \$signal$14  = 27'h0000000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$14.dirty ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire [24:0] \$signal$14.tag ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal$14.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal.dirty ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire [24:0] \$signal.tag ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  wire \$signal.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:102" *)
  reg [2:0] addr_cntr = 3'h0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:112" *)
  reg [31:0] bypass_read_r = 32'd0;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:93" *)
  wire [31:0] cpu_addr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:93" *)
  wire [1:0] \cpu_addr.index ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:93" *)
  wire [4:0] \cpu_addr.offset ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:93" *)
  wire [24:0] \cpu_addr.tag ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:95" *)
  reg [31:0] cpu_addr_r = 32'd0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:95" *)
  wire [1:0] \cpu_addr_r.index ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:95" *)
  wire [4:0] \cpu_addr_r.offset ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:95" *)
  wire [24:0] \cpu_addr_r.tag ;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  reg [2:0] fsm_state = 3'h0;
  (* init = 32'd0 *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:92" *)
  wire [31:0] i_cpu_addr_r;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  input [72:0] i_cpu_req;
  wire [72:0] i_cpu_req;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [31:0] \i_cpu_req.addr ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [31:0] \i_cpu_req.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [3:0] \i_cpu_req.op ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire \i_cpu_req.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:66" *)
  wire [3:0] \i_cpu_req.wsel ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:77" *)
  input i_wb_ack;
  wire i_wb_ack;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:71" *)
  input [31:0] i_wb_dat;
  wire [31:0] i_wb_dat;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  reg [4:0] mem_r_addr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  reg [4:0] \mem_r_addr$19 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  reg [4:0] \mem_r_addr$23 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  reg [4:0] \mem_r_addr$27 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  wire [7:0] mem_r_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  wire [7:0] \mem_r_data$6 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  wire [7:0] \mem_r_data$7 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:86" *)
  wire [7:0] \mem_r_data$8 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [4:0] mem_w_addr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [4:0] \mem_w_addr$20 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [4:0] \mem_w_addr$24 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [4:0] \mem_w_addr$28 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [7:0] mem_w_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [7:0] \mem_w_data$21 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [7:0] \mem_w_data$25 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg [7:0] \mem_w_data$29 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg mem_w_en;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg \mem_w_en$22 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg \mem_w_en$26 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:87" *)
  reg \mem_w_en$30 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  output [32:0] o_cpu_resp;
  reg [32:0] o_cpu_resp;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  wire [31:0] \o_cpu_resp.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:67" *)
  wire \o_cpu_resp.rdy ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:69" *)
  output [31:0] o_wb_adr;
  reg [31:0] o_wb_adr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:76" *)
  output o_wb_cyc;
  reg o_wb_cyc;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:70" *)
  output [31:0] o_wb_dat;
  reg [31:0] o_wb_dat;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:72" *)
  output [3:0] o_wb_sel;
  reg [3:0] o_wb_sel;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:75" *)
  output o_wb_stb;
  reg o_wb_stb;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:74" *)
  output o_wb_we;
  reg o_wb_we;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:107" *)
  wire [31:0] rdata32;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:109" *)
  reg [31:0] wdata32;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:85" *)
  reg [7:0] \U$0  [31:0];
  initial begin
    \U$0 [0] = 8'h00;
    \U$0 [1] = 8'h00;
    \U$0 [2] = 8'h00;
    \U$0 [3] = 8'h00;
    \U$0 [4] = 8'h00;
    \U$0 [5] = 8'h00;
    \U$0 [6] = 8'h00;
    \U$0 [7] = 8'h00;
    \U$0 [8] = 8'h00;
    \U$0 [9] = 8'h00;
    \U$0 [10] = 8'h00;
    \U$0 [11] = 8'h00;
    \U$0 [12] = 8'h00;
    \U$0 [13] = 8'h00;
    \U$0 [14] = 8'h00;
    \U$0 [15] = 8'h00;
    \U$0 [16] = 8'h00;
    \U$0 [17] = 8'h00;
    \U$0 [18] = 8'h00;
    \U$0 [19] = 8'h00;
    \U$0 [20] = 8'h00;
    \U$0 [21] = 8'h00;
    \U$0 [22] = 8'h00;
    \U$0 [23] = 8'h00;
    \U$0 [24] = 8'h00;
    \U$0 [25] = 8'h00;
    \U$0 [26] = 8'h00;
    \U$0 [27] = 8'h00;
    \U$0 [28] = 8'h00;
    \U$0 [29] = 8'h00;
    \U$0 [30] = 8'h00;
    \U$0 [31] = 8'h00;
  end
  always @(posedge clk) begin
    if (mem_w_en)
      \U$0 [mem_w_addr] <= mem_w_data;
  end
  assign mem_r_data = \U$0 [mem_r_addr];
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:85" *)
  reg [7:0] \U$2  [31:0];
  initial begin
    \U$2 [0] = 8'h00;
    \U$2 [1] = 8'h00;
    \U$2 [2] = 8'h00;
    \U$2 [3] = 8'h00;
    \U$2 [4] = 8'h00;
    \U$2 [5] = 8'h00;
    \U$2 [6] = 8'h00;
    \U$2 [7] = 8'h00;
    \U$2 [8] = 8'h00;
    \U$2 [9] = 8'h00;
    \U$2 [10] = 8'h00;
    \U$2 [11] = 8'h00;
    \U$2 [12] = 8'h00;
    \U$2 [13] = 8'h00;
    \U$2 [14] = 8'h00;
    \U$2 [15] = 8'h00;
    \U$2 [16] = 8'h00;
    \U$2 [17] = 8'h00;
    \U$2 [18] = 8'h00;
    \U$2 [19] = 8'h00;
    \U$2 [20] = 8'h00;
    \U$2 [21] = 8'h00;
    \U$2 [22] = 8'h00;
    \U$2 [23] = 8'h00;
    \U$2 [24] = 8'h00;
    \U$2 [25] = 8'h00;
    \U$2 [26] = 8'h00;
    \U$2 [27] = 8'h00;
    \U$2 [28] = 8'h00;
    \U$2 [29] = 8'h00;
    \U$2 [30] = 8'h00;
    \U$2 [31] = 8'h00;
  end
  always @(posedge clk) begin
    if (\mem_w_en$22 )
      \U$2 [\mem_w_addr$20 ] <= \mem_w_data$21 ;
  end
  assign \mem_r_data$6  = \U$2 [\mem_r_addr$19 ];
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:85" *)
  reg [7:0] \U$4  [31:0];
  initial begin
    \U$4 [0] = 8'h00;
    \U$4 [1] = 8'h00;
    \U$4 [2] = 8'h00;
    \U$4 [3] = 8'h00;
    \U$4 [4] = 8'h00;
    \U$4 [5] = 8'h00;
    \U$4 [6] = 8'h00;
    \U$4 [7] = 8'h00;
    \U$4 [8] = 8'h00;
    \U$4 [9] = 8'h00;
    \U$4 [10] = 8'h00;
    \U$4 [11] = 8'h00;
    \U$4 [12] = 8'h00;
    \U$4 [13] = 8'h00;
    \U$4 [14] = 8'h00;
    \U$4 [15] = 8'h00;
    \U$4 [16] = 8'h00;
    \U$4 [17] = 8'h00;
    \U$4 [18] = 8'h00;
    \U$4 [19] = 8'h00;
    \U$4 [20] = 8'h00;
    \U$4 [21] = 8'h00;
    \U$4 [22] = 8'h00;
    \U$4 [23] = 8'h00;
    \U$4 [24] = 8'h00;
    \U$4 [25] = 8'h00;
    \U$4 [26] = 8'h00;
    \U$4 [27] = 8'h00;
    \U$4 [28] = 8'h00;
    \U$4 [29] = 8'h00;
    \U$4 [30] = 8'h00;
    \U$4 [31] = 8'h00;
  end
  always @(posedge clk) begin
    if (\mem_w_en$26 )
      \U$4 [\mem_w_addr$24 ] <= \mem_w_data$25 ;
  end
  assign \mem_r_data$7  = \U$4 [\mem_r_addr$23 ];
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:85" *)
  reg [7:0] \U$6  [31:0];
  initial begin
    \U$6 [0] = 8'h00;
    \U$6 [1] = 8'h00;
    \U$6 [2] = 8'h00;
    \U$6 [3] = 8'h00;
    \U$6 [4] = 8'h00;
    \U$6 [5] = 8'h00;
    \U$6 [6] = 8'h00;
    \U$6 [7] = 8'h00;
    \U$6 [8] = 8'h00;
    \U$6 [9] = 8'h00;
    \U$6 [10] = 8'h00;
    \U$6 [11] = 8'h00;
    \U$6 [12] = 8'h00;
    \U$6 [13] = 8'h00;
    \U$6 [14] = 8'h00;
    \U$6 [15] = 8'h00;
    \U$6 [16] = 8'h00;
    \U$6 [17] = 8'h00;
    \U$6 [18] = 8'h00;
    \U$6 [19] = 8'h00;
    \U$6 [20] = 8'h00;
    \U$6 [21] = 8'h00;
    \U$6 [22] = 8'h00;
    \U$6 [23] = 8'h00;
    \U$6 [24] = 8'h00;
    \U$6 [25] = 8'h00;
    \U$6 [26] = 8'h00;
    \U$6 [27] = 8'h00;
    \U$6 [28] = 8'h00;
    \U$6 [29] = 8'h00;
    \U$6 [30] = 8'h00;
    \U$6 [31] = 8'h00;
  end
  always @(posedge clk) begin
    if (\mem_w_en$30 )
      \U$6 [\mem_w_addr$28 ] <= \mem_w_data$29 ;
  end
  assign \mem_r_data$8  = \U$6 [\mem_r_addr$27 ];
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  always @(posedge clk)
    fsm_state <= \$41 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  always @(posedge clk)
    \$signal  <= \$42 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  always @(posedge clk)
    \$signal$12  <= \$43 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  always @(posedge clk)
    \$signal$13  <= \$44 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:98" *)
  always @(posedge clk)
    \$signal$14  <= \$45 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:92" *)
  always @(posedge clk)
    cpu_addr_r <= \$46 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:102" *)
  always @(posedge clk)
    addr_cntr <= \$47 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:112" *)
  always @(posedge clk)
    bypass_read_r <= \$48 ;
  assign \$1  = i_cpu_req[31:28] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:118" *) 1'h1;
  assign \$4  = \$3  == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ast.py:2417" *) i_cpu_req[31:7];
  assign \$5  = \$2  & (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ast.py:2417" *) \$4 ;
  assign \$6  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } + (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:142" *) i_cpu_req[63:32];
  assign \$7  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } & (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:145" *) i_cpu_req[63:32];
  assign \$8  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } | (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:148" *) i_cpu_req[63:32];
  assign \$9  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } ^ (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:151" *) i_cpu_req[63:32];
  assign \$10  = $signed({ \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data }) < (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:155" *) $signed(i_cpu_req[63:32]);
  assign \$11  = \$10  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:155" *) { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } : i_cpu_req[63:32];
  assign \$12  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } < (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:159" *) i_cpu_req[63:32];
  assign \$13  = \$12  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:159" *) { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } : i_cpu_req[63:32];
  assign \$14  = $signed({ \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data }) > (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:163" *) $signed(i_cpu_req[63:32]);
  assign \$15  = \$14  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:163" *) { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } : i_cpu_req[63:32];
  assign \$16  = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } > (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:167" *) i_cpu_req[63:32];
  assign \$17  = \$16  ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:167" *) { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data } : i_cpu_req[63:32];
  assign \$19  = ! (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) fsm_state;
  assign \$20  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 1'h1;
  assign \$21  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h2;
  assign \$22  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h3;
  assign \$23  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h4;
  assign \$24  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h5;
  assign \$25  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h6;
  assign \$26  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h7;
  assign \$27  = i_cpu_req[31:28] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:118" *) 1'h1;
  assign \$30  = \$29  == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ast.py:2417" *) i_cpu_req[31:7];
  assign \$31  = \$28  & (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ast.py:2417" *) \$30 ;
  assign \$32  = i_cpu_req[71:68] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:119" *) 1'h1;
  assign \$33  = i_cpu_req[71:68] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:121" *) 2'h2;
  assign \$36  = \$34  & (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ast.py:2417" *) \$35 ;
  assign \$37  = addr_cntr + (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:189" *) 1'h1;
  assign \$38  = addr_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:190" *) 3'h7;
  assign \$39  = addr_cntr + (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:210" *) 1'h1;
  assign \$40  = addr_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/cache.py:211" *) 3'h7;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    wdata32 = i_cpu_req[63:32];
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              casez (i_cpu_req[71:68])
                4'h1:
                    /* empty */;
                4'h2:
                    /* empty */;
                4'h3:
                    /* empty */;
                4'h4:
                    wdata32 = \$6 [31:0];
                4'h5:
                    wdata32 = \$7 ;
                4'h6:
                    wdata32 = \$8 ;
                4'h7:
                    wdata32 = \$9 ;
                4'h8:
                    wdata32 = \$11 ;
                4'h9:
                    wdata32 = \$13 ;
                4'ha:
                    wdata32 = \$15 ;
                4'hb:
                    wdata32 = \$17 ;
              endcase
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    mem_r_addr = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              mem_r_addr = i_cpu_req[6:2];
            end
          end
      3'h3:
          mem_r_addr = { cpu_addr_r[6:5], addr_cntr };
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    mem_w_addr = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              mem_w_addr = i_cpu_req[6:2];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            mem_w_addr = { cpu_addr_r[6:5], addr_cntr };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    mem_w_data = 8'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              mem_w_data = wdata32[7:0];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            mem_w_data = i_wb_dat[7:0];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    mem_w_en = 1'h0;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              if (i_cpu_req[64]) begin
                mem_w_en = 1'h1;
              end
              casez (i_cpu_req[71:68])
                4'h1:
                    mem_w_en = 1'h0;
              endcase
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            mem_w_en = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_r_addr$19  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_r_addr$19  = i_cpu_req[6:2];
            end
          end
      3'h3:
          \mem_r_addr$19  = { cpu_addr_r[6:5], addr_cntr };
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_w_addr$20  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_addr$20  = i_cpu_req[6:2];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_addr$20  = { cpu_addr_r[6:5], addr_cntr };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_w_data$21  = 8'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_data$21  = wdata32[15:8];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_data$21  = i_wb_dat[15:8];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_w_en$22  = 1'h0;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              if (i_cpu_req[65]) begin
                \mem_w_en$22  = 1'h1;
              end
              casez (i_cpu_req[71:68])
                4'h1:
                    \mem_w_en$22  = 1'h0;
              endcase
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_en$22  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_r_addr$23  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_r_addr$23  = i_cpu_req[6:2];
            end
          end
      3'h3:
          \mem_r_addr$23  = { cpu_addr_r[6:5], addr_cntr };
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_w_addr$24  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_addr$24  = i_cpu_req[6:2];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_addr$24  = { cpu_addr_r[6:5], addr_cntr };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_w_data$25  = 8'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_data$25  = wdata32[23:16];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_data$25  = i_wb_dat[23:16];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_w_en$26  = 1'h0;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              if (i_cpu_req[66]) begin
                \mem_w_en$26  = 1'h1;
              end
              casez (i_cpu_req[71:68])
                4'h1:
                    \mem_w_en$26  = 1'h0;
              endcase
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_en$26  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_r_addr$27  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_r_addr$27  = i_cpu_req[6:2];
            end
          end
      3'h3:
          \mem_r_addr$27  = { cpu_addr_r[6:5], addr_cntr };
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_w_addr$28  = 5'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_addr$28  = i_cpu_req[6:2];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_addr$28  = { cpu_addr_r[6:5], addr_cntr };
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_w_data$29  = 8'h00;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              \mem_w_data$29  = wdata32[31:24];
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_data$29  = i_wb_dat[31:24];
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \mem_w_en$30  = 1'h0;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              if (i_cpu_req[67]) begin
                \mem_w_en$30  = 1'h1;
              end
              casez (i_cpu_req[71:68])
                4'h1:
                    \mem_w_en$30  = 1'h0;
              endcase
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          if (i_wb_ack) begin
            \mem_w_en$30  = 1'h1;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    o_cpu_resp = 33'h000000000;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$1 ) begin
            end else if (\$5 ) begin
              o_cpu_resp[32:1] = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data };
              o_cpu_resp[0] = 1'h1;
            end
          end
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h1:
          /* empty */;
      3'h6:
        begin
          o_cpu_resp[32:1] = bypass_read_r;
          o_cpu_resp[0] = 1'h1;
        end
      3'h2:
          /* empty */;
      3'h7:
          o_cpu_resp[0] = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    o_wb_cyc = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_cyc = 1'h1;
      3'h4:
          o_wb_cyc = 1'h1;
      3'h5:
          /* empty */;
      3'h1:
          o_wb_cyc = 1'h1;
      3'h6:
          /* empty */;
      3'h2:
          o_wb_cyc = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    o_wb_stb = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_stb = 1'h1;
      3'h4:
          o_wb_stb = 1'h1;
      3'h5:
          o_wb_stb = 1'h0;
      3'h1:
          o_wb_stb = 1'h1;
      3'h6:
          /* empty */;
      3'h2:
          o_wb_stb = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    o_wb_we = 1'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_we = 1'h1;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h1:
          o_wb_we = 1'h0;
      3'h6:
          /* empty */;
      3'h2:
          o_wb_we = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    o_wb_sel = 4'h0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_sel = 4'hf;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h1:
          o_wb_sel = 4'h0;
      3'h6:
          /* empty */;
      3'h2:
          o_wb_sel = i_cpu_req[67:64];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    o_wb_adr = 32'd0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_adr = { \$18 , cpu_addr_r[6:5], addr_cntr, 2'h0 };
      3'h4:
          o_wb_adr = { cpu_addr_r[31:5], addr_cntr, 2'h0 };
      3'h5:
          /* empty */;
      3'h1:
          o_wb_adr = i_cpu_req[31:0];
      3'h6:
          /* empty */;
      3'h2:
          o_wb_adr = i_cpu_req[31:0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    o_wb_dat = 32'd0;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          o_wb_dat = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data };
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h1:
          o_wb_dat = 32'd0;
      3'h6:
          /* empty */;
      3'h2:
          o_wb_dat = i_cpu_req[63:32];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$41  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            (* full_case = 32'd1 *)
            if (\$27 ) begin
              if (\$32 ) begin
                \$41  = 3'h1;
              end else if (\$33 ) begin
                \$41  = 3'h2;
              end
            end else if (\$31 ) begin
            end else begin
              (* full_case = 32'd1 *)
              if (\$36 ) begin
                \$41  = 3'h3;
              end else begin
                \$41  = 3'h4;
              end
            end
          end
      3'h3:
          if (i_wb_ack) begin
            if (\$38 ) begin
              \$41  = 3'h4;
            end
          end
      3'h4:
          if (i_wb_ack) begin
            \$41  = 3'h5;
          end
      3'h5:
          (* full_case = 32'd1 *)
          if (\$40 ) begin
            \$41  = 3'h0;
          end else begin
            \$41  = 3'h4;
          end
      3'h1:
          if (i_wb_ack) begin
            \$41  = 3'h6;
          end
      3'h6:
          \$41  = 3'h0;
      3'h2:
          if (i_wb_ack) begin
            \$41  = 3'h7;
          end
      3'h7:
          \$41  = 3'h0;
    endcase
    if (rst) begin
      \$41  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$42  = \$signal ;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$27 ) begin
            end else if (\$31 ) begin
              casez (i_cpu_req[71:68])
                4'h1:
                    /* empty */;
                4'h2:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h3:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h4:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h5:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h6:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h7:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h8:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'h9:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'ha:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
                4'hb:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          \$42 [1] = 1'h1;
                    endcase
              endcase
            end
          end
      3'h3:
          if (i_wb_ack) begin
            if (\$38 ) begin
              casez (cpu_addr_r[6:5])
                2'h0:
                  begin
                    \$42 [1] = 1'h0;
                    \$42 [0] = 1'h0;
                  end
              endcase
            end
          end
      3'h4:
          /* empty */;
      3'h5:
          if (\$40 ) begin
            casez (cpu_addr_r[6:5])
              2'h0:
                begin
                  \$42 [26:2] = cpu_addr_r[31:7];
                  \$42 [0] = 1'h1;
                end
            endcase
          end
    endcase
    if (rst) begin
      \$42  = 27'h0000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$43  = \$signal$12 ;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$27 ) begin
            end else if (\$31 ) begin
              casez (i_cpu_req[71:68])
                4'h1:
                    /* empty */;
                4'h2:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h3:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h4:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h5:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h6:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h7:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h8:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'h9:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'ha:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
                4'hb:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          \$43 [1] = 1'h1;
                    endcase
              endcase
            end
          end
      3'h3:
          if (i_wb_ack) begin
            if (\$38 ) begin
              casez (cpu_addr_r[6:5])
                2'h0:
                    /* empty */;
                2'h1:
                  begin
                    \$43 [1] = 1'h0;
                    \$43 [0] = 1'h0;
                  end
              endcase
            end
          end
      3'h4:
          /* empty */;
      3'h5:
          if (\$40 ) begin
            casez (cpu_addr_r[6:5])
              2'h0:
                  /* empty */;
              2'h1:
                begin
                  \$43 [26:2] = cpu_addr_r[31:7];
                  \$43 [0] = 1'h1;
                end
            endcase
          end
    endcase
    if (rst) begin
      \$43  = 27'h0000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$44  = \$signal$13 ;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$27 ) begin
            end else if (\$31 ) begin
              casez (i_cpu_req[71:68])
                4'h1:
                    /* empty */;
                4'h2:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h3:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h4:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h5:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h6:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h7:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h8:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'h9:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'ha:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
                4'hb:
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          \$44 [1] = 1'h1;
                    endcase
              endcase
            end
          end
      3'h3:
          if (i_wb_ack) begin
            if (\$38 ) begin
              casez (cpu_addr_r[6:5])
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                  begin
                    \$44 [1] = 1'h0;
                    \$44 [0] = 1'h0;
                  end
              endcase
            end
          end
      3'h4:
          /* empty */;
      3'h5:
          if (\$40 ) begin
            casez (cpu_addr_r[6:5])
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                begin
                  \$44 [26:2] = cpu_addr_r[31:7];
                  \$44 [0] = 1'h1;
                end
            endcase
          end
    endcase
    if (rst) begin
      \$44  = 27'h0000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$45  = \$signal$14 ;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            if (\$27 ) begin
            end else if (\$31 ) begin
              casez (i_cpu_req[71:68])
                4'h1:
                    /* empty */;
                4'h2:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h3:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h4:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h5:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h6:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h7:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h8:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'h9:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'ha:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
                4'hb:
                    (* full_case = 32'd1 *)
                    casez (i_cpu_req[6:5])
                      2'h0:
                          /* empty */;
                      2'h1:
                          /* empty */;
                      2'h2:
                          /* empty */;
                      2'h3:
                          \$45 [1] = 1'h1;
                    endcase
              endcase
            end
          end
      3'h3:
          if (i_wb_ack) begin
            if (\$38 ) begin
              (* full_case = 32'd1 *)
              casez (cpu_addr_r[6:5])
                2'h0:
                    /* empty */;
                2'h1:
                    /* empty */;
                2'h2:
                    /* empty */;
                2'h3:
                  begin
                    \$45 [1] = 1'h0;
                    \$45 [0] = 1'h0;
                  end
              endcase
            end
          end
      3'h4:
          /* empty */;
      3'h5:
          if (\$40 ) begin
            (* full_case = 32'd1 *)
            casez (cpu_addr_r[6:5])
              2'h0:
                  /* empty */;
              2'h1:
                  /* empty */;
              2'h2:
                  /* empty */;
              2'h3:
                begin
                  \$45 [26:2] = cpu_addr_r[31:7];
                  \$45 [0] = 1'h1;
                end
            endcase
          end
    endcase
    if (rst) begin
      \$45  = 27'h0000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$46  = cpu_addr_r;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            (* full_case = 32'd1 *)
            if (\$27 ) begin
            end else if (\$31 ) begin
            end else begin
              \$46  = i_cpu_req[31:0];
            end
          end
    endcase
    if (rst) begin
      \$46  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$47  = addr_cntr;
    casez (fsm_state)
      3'h0:
          if (i_cpu_req[72]) begin
            (* full_case = 32'd1 *)
            if (\$27 ) begin
            end else if (\$31 ) begin
            end else begin
              \$47  = 3'h0;
            end
          end
      3'h3:
          if (i_wb_ack) begin
            \$47  = \$37 [2:0];
          end
      3'h4:
          /* empty */;
      3'h5:
          \$47  = \$39 [2:0];
    endcase
    if (rst) begin
      \$47  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    \$48  = bypass_read_r;
    casez (fsm_state)
      3'h0:
          /* empty */;
      3'h3:
          /* empty */;
      3'h4:
          /* empty */;
      3'h5:
          /* empty */;
      3'h1:
          if (i_wb_ack) begin
            \$48  = i_wb_dat;
          end
    endcase
    if (rst) begin
      \$48  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$2  = \$signal [0];
      2'h1:
          \$2  = \$signal$12 [0];
      2'h2:
          \$2  = \$signal$13 [0];
      2'h3:
          \$2  = \$signal$14 [0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$3  = \$signal [26:2];
      2'h1:
          \$3  = \$signal$12 [26:2];
      2'h2:
          \$3  = \$signal$13 [26:2];
      2'h3:
          \$3  = \$signal$14 [26:2];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    casez (cpu_addr_r[6:5])
      2'h0:
          \$18  = \$signal [26:2];
      2'h1:
          \$18  = \$signal$12 [26:2];
      2'h2:
          \$18  = \$signal$13 [26:2];
      2'h3:
          \$18  = \$signal$14 [26:2];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$28  = \$signal [0];
      2'h1:
          \$28  = \$signal$12 [0];
      2'h2:
          \$28  = \$signal$13 [0];
      2'h3:
          \$28  = \$signal$14 [0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$29  = \$signal [26:2];
      2'h1:
          \$29  = \$signal$12 [26:2];
      2'h2:
          \$29  = \$signal$13 [26:2];
      2'h3:
          \$29  = \$signal$14 [26:2];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$34  = \$signal [0];
      2'h1:
          \$34  = \$signal$12 [0];
      2'h2:
          \$34  = \$signal$13 [0];
      2'h3:
          \$34  = \$signal$14 [0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    casez (i_cpu_req[6:5])
      2'h0:
          \$35  = \$signal [1];
      2'h1:
          \$35  = \$signal$12 [1];
      2'h2:
          \$35  = \$signal$13 [1];
      2'h3:
          \$35  = \$signal$14 [1];
    endcase
  end
  assign cpu_addr = i_cpu_req[31:0];
  assign i_cpu_addr_r = cpu_addr_r;
  assign rdata32 = { \mem_r_data$8 , \mem_r_data$7 , \mem_r_data$6 , mem_r_data };
  assign \cpu_addr.offset  = i_cpu_req[4:0];
  assign \cpu_addr.index  = i_cpu_req[6:5];
  assign \cpu_addr.tag  = i_cpu_req[31:7];
  assign \i_cpu_req.addr  = i_cpu_req[31:0];
  assign \i_cpu_req.data  = i_cpu_req[63:32];
  assign \i_cpu_req.wsel  = i_cpu_req[67:64];
  assign \i_cpu_req.op  = i_cpu_req[71:68];
  assign \i_cpu_req.valid  = i_cpu_req[72];
  assign \cpu_addr_r.offset  = cpu_addr_r[4:0];
  assign \cpu_addr_r.index  = cpu_addr_r[6:5];
  assign \cpu_addr_r.tag  = cpu_addr_r[31:7];
  assign \$signal.valid  = \$signal [0];
  assign \$signal.dirty  = \$signal [1];
  assign \$signal.tag  = \$signal [26:2];
  assign \$signal$12.valid  = \$signal$12 [0];
  assign \$signal$12.dirty  = \$signal$12 [1];
  assign \$signal$12.tag  = \$signal$12 [26:2];
  assign \$signal$13.valid  = \$signal$13 [0];
  assign \$signal$13.dirty  = \$signal$13 [1];
  assign \$signal$13.tag  = \$signal$13 [26:2];
  assign \$signal$14.valid  = \$signal$14 [0];
  assign \$signal$14.dirty  = \$signal$14 [1];
  assign \$signal$14.tag  = \$signal$14 [26:2];
  assign \o_cpu_resp.rdy  = o_cpu_resp[0];
  assign \o_cpu_resp.data  = o_cpu_resp[32:1];
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:203" *)
(* generator = "Amaranth" *)
module \top.u_cpu.u_id (i_rs2_data, i_pipe_if_id, o_rs1_idx, o_rs2_idx, o_pipe_id_exe, i_rs1_data);
  reg \$auto$verilog_backend.cc:2352:dump_module$9  = 0;
  wire [34:0] \$1 ;
  wire [34:0] \$2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:195" *)
  input [64:0] i_pipe_if_id;
  wire [64:0] i_pipe_if_id;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:195" *)
  wire [31:0] \i_pipe_if_id.iword ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:195" *)
  wire [31:0] \i_pipe_if_id.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:195" *)
  wire \i_pipe_if_id.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:198" *)
  input [31:0] i_rs1_data;
  wire [31:0] i_rs1_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:200" *)
  input [31:0] i_rs2_data;
  wire [31:0] i_rs2_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:218" *)
  wire [31:0] instr_b;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:218" *)
  wire [2:0] \instr_b.funct3 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:218" *)
  wire [5:0] \instr_b.imm_10_5 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:218" *)
  wire \instr_b.imm_11 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:218" *)
  wire \instr_b.imm_12 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:218" *)
  wire [3:0] \instr_b.imm_4_1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:218" *)
  wire [6:0] \instr_b.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:218" *)
  wire [4:0] \instr_b.rs1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:218" *)
  wire [4:0] \instr_b.rs2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:214" *)
  wire [31:0] instr_i;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:214" *)
  wire [2:0] \instr_i.funct3 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:214" *)
  wire [11:0] \instr_i.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:214" *)
  wire [6:0] \instr_i.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:214" *)
  wire [4:0] \instr_i.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:214" *)
  wire [4:0] \instr_i.rs1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:220" *)
  wire [31:0] instr_j;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:220" *)
  wire [9:0] \instr_j.imm_10_1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:220" *)
  wire \instr_j.imm_11 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:220" *)
  wire [7:0] \instr_j.imm_19_12 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:220" *)
  wire \instr_j.imm_20 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:220" *)
  wire [6:0] \instr_j.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:220" *)
  wire [4:0] \instr_j.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:210" *)
  wire [31:0] instr_r;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:210" *)
  wire [2:0] \instr_r.funct3 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:210" *)
  wire [6:0] \instr_r.funct7 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:210" *)
  wire [6:0] \instr_r.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:210" *)
  wire [4:0] \instr_r.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:210" *)
  wire [4:0] \instr_r.rs1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:210" *)
  wire [4:0] \instr_r.rs2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:216" *)
  wire [31:0] instr_s;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:216" *)
  wire [2:0] \instr_s.funct3 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:216" *)
  wire [6:0] \instr_s.imm_11_5 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:216" *)
  wire [4:0] \instr_s.imm_4_0 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:216" *)
  wire [6:0] \instr_s.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:216" *)
  wire [4:0] \instr_s.rs1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:216" *)
  wire [4:0] \instr_s.rs2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:212" *)
  wire [31:0] instr_u;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:212" *)
  wire [19:0] \instr_u.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:212" *)
  wire [6:0] \instr_u.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:212" *)
  wire [4:0] \instr_u.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  output [120:0] o_pipe_id_exe;
  reg [120:0] o_pipe_id_exe;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [11:0] \o_pipe_id_exe.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [31:0] \o_pipe_id_exe.op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [31:0] \o_pipe_id_exe.op2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [6:0] \o_pipe_id_exe.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [31:0] \o_pipe_id_exe.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire [4:0] \o_pipe_id_exe.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:196" *)
  wire \o_pipe_id_exe.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:197" *)
  output [4:0] o_rs1_idx;
  reg [4:0] o_rs1_idx;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:199" *)
  output [4:0] o_rs2_idx;
  reg [4:0] o_rs2_idx;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    o_rs1_idx = i_pipe_if_id[19:15];
    casez (i_pipe_if_id[6:0])
      7'h37:
          /* empty */;
      7'h17:
          /* empty */;
      7'h6f:
          /* empty */;
      7'h67:
          /* empty */;
      7'h13:
          /* empty */;
      7'h33:
          /* empty */;
      7'h03:
          /* empty */;
      7'h23:
          /* empty */;
      7'h0f:
          /* empty */;
      7'h63:
          /* empty */;
      7'h73:
          casez (i_pipe_if_id[14:12])
            3'h0:
                /* empty */;
            3'h1:
                o_rs1_idx = i_pipe_if_id[19:15];
            3'h2:
                o_rs1_idx = i_pipe_if_id[19:15];
            3'h3:
                o_rs1_idx = i_pipe_if_id[19:15];
            3'h5:
                o_rs1_idx = 5'h00;
            3'h6:
                o_rs1_idx = 5'h00;
            3'h7:
                o_rs1_idx = 5'h00;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    o_rs2_idx = i_pipe_if_id[24:20];
    casez (i_pipe_if_id[6:0])
      7'h37:
          /* empty */;
      7'h17:
          /* empty */;
      7'h6f:
          /* empty */;
      7'h67:
          /* empty */;
      7'h13:
          /* empty */;
      7'h33:
          /* empty */;
      7'h03:
          /* empty */;
      7'h23:
          /* empty */;
      7'h0f:
          /* empty */;
      7'h63:
          /* empty */;
      7'h73:
          casez (i_pipe_if_id[14:12])
            3'h0:
                /* empty */;
            3'h1:
                o_rs2_idx = 5'h00;
            3'h2:
                o_rs2_idx = 5'h00;
            3'h3:
                o_rs2_idx = 5'h00;
            3'h5:
                o_rs2_idx = 5'h00;
            3'h6:
                o_rs2_idx = 5'h00;
            3'h7:
                o_rs2_idx = 5'h00;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    o_pipe_id_exe[87:5] = 83'h000000000000000000000;
    o_pipe_id_exe[4:0] = 5'h00;
    casez (i_pipe_if_id[6:0])
      7'h37:
        begin
          o_pipe_id_exe[80:49] = \$1 [31:0];
          o_pipe_id_exe[48:17] = 32'd0;
          o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
          o_pipe_id_exe[87:81] = 7'h01;
        end
      7'h17:
        begin
          o_pipe_id_exe[80:49] = \$2 [31:0];
          o_pipe_id_exe[48:17] = i_pipe_if_id[63:32];
          o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
          o_pipe_id_exe[87:81] = 7'h02;
        end
      7'h6f:
        begin
          o_pipe_id_exe[80:49] = { 12'h000, i_pipe_if_id[31], i_pipe_if_id[19:12], i_pipe_if_id[20], i_pipe_if_id[30:21] };
          o_pipe_id_exe[48:17] = i_pipe_if_id[63:32];
          o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
          o_pipe_id_exe[87:81] = 7'h03;
        end
      7'h67:
        begin
          o_pipe_id_exe[80:49] = i_rs1_data;
          o_pipe_id_exe[16:5] = i_pipe_if_id[31:20];
          o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
          o_pipe_id_exe[87:81] = 7'h04;
        end
      7'h13:
        begin
          o_pipe_id_exe[80:49] = i_rs1_data;
          o_pipe_id_exe[48:17] = { i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31], i_pipe_if_id[31:20] };
          o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
          (* full_case = 32'd1 *)
          casez (i_pipe_if_id[14:12])
            3'h0:
                o_pipe_id_exe[87:81] = 7'h13;
            3'h2:
                o_pipe_id_exe[87:81] = 7'h14;
            3'h3:
                o_pipe_id_exe[87:81] = 7'h15;
            3'h4:
                o_pipe_id_exe[87:81] = 7'h16;
            3'h6:
                o_pipe_id_exe[87:81] = 7'h17;
            3'h7:
                o_pipe_id_exe[87:81] = 7'h18;
            3'h1:
                o_pipe_id_exe[87:81] = 7'h19;
            3'h5:
                (* full_case = 32'd1 *)
                if (i_pipe_if_id[30]) begin
                  o_pipe_id_exe[87:81] = 7'h1b;
                end else begin
                  o_pipe_id_exe[87:81] = 7'h1a;
                end
          endcase
        end
      7'h33:
        begin
          o_pipe_id_exe[80:49] = i_rs1_data;
          o_pipe_id_exe[48:17] = i_rs2_data;
          o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
          casez ({ i_pipe_if_id[31:25], i_pipe_if_id[14:12] })
            10'h000:
                o_pipe_id_exe[87:81] = 7'h1c;
            10'h100:
                o_pipe_id_exe[87:81] = 7'h1d;
            10'h001:
                o_pipe_id_exe[87:81] = 7'h1e;
            10'h002:
                o_pipe_id_exe[87:81] = 7'h1f;
            10'h003:
                o_pipe_id_exe[87:81] = 7'h20;
            10'h004:
                o_pipe_id_exe[87:81] = 7'h21;
            10'h005:
                o_pipe_id_exe[87:81] = 7'h22;
            10'h105:
                o_pipe_id_exe[87:81] = 7'h23;
            10'h006:
                o_pipe_id_exe[87:81] = 7'h24;
            10'h007:
                o_pipe_id_exe[87:81] = 7'h25;
            10'h008:
                o_pipe_id_exe[87:81] = 7'h34;
            10'h009:
                o_pipe_id_exe[87:81] = 7'h35;
            10'h00a:
                o_pipe_id_exe[87:81] = 7'h36;
            10'h00b:
                o_pipe_id_exe[87:81] = 7'h37;
            10'h00c:
                o_pipe_id_exe[87:81] = 7'h38;
            10'h00d:
                o_pipe_id_exe[87:81] = 7'h39;
            10'h00e:
                o_pipe_id_exe[87:81] = 7'h3a;
            10'h00f:
                o_pipe_id_exe[87:81] = 7'h3b;
          endcase
        end
      7'h03:
        begin
          o_pipe_id_exe[80:49] = i_rs1_data;
          o_pipe_id_exe[48:17] = 32'd0;
          o_pipe_id_exe[16:5] = i_pipe_if_id[31:20];
          o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
          casez (i_pipe_if_id[14:12])
            3'h0:
                o_pipe_id_exe[87:81] = 7'h0b;
            3'h1:
                o_pipe_id_exe[87:81] = 7'h0c;
            3'h2:
                o_pipe_id_exe[87:81] = 7'h0d;
            3'h4:
                o_pipe_id_exe[87:81] = 7'h0e;
            3'h5:
                o_pipe_id_exe[87:81] = 7'h0f;
          endcase
        end
      7'h23:
        begin
          o_pipe_id_exe[80:49] = i_rs1_data;
          o_pipe_id_exe[48:17] = i_rs2_data;
          o_pipe_id_exe[16:5] = { i_pipe_if_id[31:25], i_pipe_if_id[11:7] };
          o_pipe_id_exe[4:0] = 5'h00;
          casez (i_pipe_if_id[14:12])
            3'h0:
                o_pipe_id_exe[87:81] = 7'h10;
            3'h1:
                o_pipe_id_exe[87:81] = 7'h11;
            3'h2:
                o_pipe_id_exe[87:81] = 7'h12;
          endcase
        end
      7'h0f:
        begin
          o_pipe_id_exe[80:49] = 32'd0;
          o_pipe_id_exe[48:17] = 32'd0;
          o_pipe_id_exe[4:0] = 5'h00;
          o_pipe_id_exe[87:81] = 7'h26;
        end
      7'h63:
        begin
          o_pipe_id_exe[80:49] = i_rs1_data;
          o_pipe_id_exe[48:17] = i_rs2_data;
          o_pipe_id_exe[16:5] = { i_pipe_if_id[31], i_pipe_if_id[7], i_pipe_if_id[30:25], i_pipe_if_id[11:8] };
          o_pipe_id_exe[4:0] = 5'h00;
          casez (i_pipe_if_id[14:12])
            3'h0:
                o_pipe_id_exe[87:81] = 7'h05;
            3'h1:
                o_pipe_id_exe[87:81] = 7'h06;
            3'h4:
                o_pipe_id_exe[87:81] = 7'h07;
            3'h5:
                o_pipe_id_exe[87:81] = 7'h08;
            3'h6:
                o_pipe_id_exe[87:81] = 7'h09;
            3'h7:
                o_pipe_id_exe[87:81] = 7'h0a;
          endcase
        end
      7'h73:
        begin
          o_pipe_id_exe[80:49] = 32'd0;
          o_pipe_id_exe[48:17] = 32'd0;
          o_pipe_id_exe[4:0] = 5'h00;
          o_pipe_id_exe[87:81] = 7'h28;
          casez (i_pipe_if_id[14:12])
            3'h0:
                casez (i_pipe_if_id[31:20])
                  12'h000:
                      o_pipe_id_exe[87:81] = 7'h27;
                  12'h001:
                      o_pipe_id_exe[87:81] = 7'h28;
                  12'h302:
                      o_pipe_id_exe[87:81] = 7'h42;
                endcase
            3'h1:
              begin
                o_pipe_id_exe[87:81] = 7'h3c;
                o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
                o_pipe_id_exe[80:49] = i_rs1_data;
                o_pipe_id_exe[16:5] = i_pipe_if_id[31:20];
              end
            3'h2:
              begin
                o_pipe_id_exe[87:81] = 7'h3d;
                o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
                o_pipe_id_exe[80:49] = i_rs1_data;
                o_pipe_id_exe[16:5] = i_pipe_if_id[31:20];
              end
            3'h3:
              begin
                o_pipe_id_exe[87:81] = 7'h3e;
                o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
                o_pipe_id_exe[80:49] = i_rs1_data;
                o_pipe_id_exe[16:5] = i_pipe_if_id[31:20];
              end
            3'h5:
              begin
                o_pipe_id_exe[87:81] = 7'h3f;
                o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
                o_pipe_id_exe[80:49] = { 27'h0000000, i_pipe_if_id[19:15] };
                o_pipe_id_exe[16:5] = i_pipe_if_id[31:20];
              end
            3'h6:
              begin
                o_pipe_id_exe[87:81] = 7'h40;
                o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
                o_pipe_id_exe[80:49] = { 27'h0000000, i_pipe_if_id[19:15] };
                o_pipe_id_exe[16:5] = i_pipe_if_id[31:20];
              end
            3'h7:
              begin
                o_pipe_id_exe[87:81] = 7'h41;
                o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
                o_pipe_id_exe[80:49] = { 27'h0000000, i_pipe_if_id[19:15] };
                o_pipe_id_exe[16:5] = i_pipe_if_id[31:20];
              end
          endcase
        end
      7'h2f:
        begin
          o_pipe_id_exe[80:49] = i_rs1_data;
          o_pipe_id_exe[48:17] = i_rs2_data;
          o_pipe_id_exe[4:0] = i_pipe_if_id[11:7];
          casez ({ i_pipe_if_id[31:27], i_pipe_if_id[14:12] })
            8'h12:
                o_pipe_id_exe[87:81] = 7'h29;
            8'h1a:
                o_pipe_id_exe[87:81] = 7'h2a;
            8'h0a:
                o_pipe_id_exe[87:81] = 7'h2b;
            8'h02:
                o_pipe_id_exe[87:81] = 7'h2c;
            8'h22:
                o_pipe_id_exe[87:81] = 7'h2d;
            8'h62:
                o_pipe_id_exe[87:81] = 7'h2e;
            8'h42:
                o_pipe_id_exe[87:81] = 7'h2f;
            8'h82:
                o_pipe_id_exe[87:81] = 7'h30;
            8'ha2:
                o_pipe_id_exe[87:81] = 7'h31;
            8'hc2:
                o_pipe_id_exe[87:81] = 7'h32;
            8'he2:
                o_pipe_id_exe[87:81] = 7'h33;
          endcase
        end
    endcase
  end
  assign instr_r = i_pipe_if_id[31:0];
  assign instr_u = i_pipe_if_id[31:0];
  assign instr_i = i_pipe_if_id[31:0];
  assign instr_s = i_pipe_if_id[31:0];
  assign instr_b = i_pipe_if_id[31:0];
  assign instr_j = i_pipe_if_id[31:0];
  assign \instr_r.opcode  = i_pipe_if_id[6:0];
  assign \instr_r.rd  = i_pipe_if_id[11:7];
  assign \instr_r.funct3  = i_pipe_if_id[14:12];
  assign \instr_r.rs1  = i_pipe_if_id[19:15];
  assign \instr_r.rs2  = i_pipe_if_id[24:20];
  assign \instr_r.funct7  = i_pipe_if_id[31:25];
  assign \i_pipe_if_id.iword  = i_pipe_if_id[31:0];
  assign \i_pipe_if_id.pc  = i_pipe_if_id[63:32];
  assign \i_pipe_if_id.valid  = i_pipe_if_id[64];
  assign \instr_u.opcode  = i_pipe_if_id[6:0];
  assign \instr_u.rd  = i_pipe_if_id[11:7];
  assign \instr_u.imm  = i_pipe_if_id[31:12];
  assign \instr_i.opcode  = i_pipe_if_id[6:0];
  assign \instr_i.rd  = i_pipe_if_id[11:7];
  assign \instr_i.funct3  = i_pipe_if_id[14:12];
  assign \instr_i.rs1  = i_pipe_if_id[19:15];
  assign \instr_i.imm  = i_pipe_if_id[31:20];
  assign \instr_s.opcode  = i_pipe_if_id[6:0];
  assign \instr_s.imm_4_0  = i_pipe_if_id[11:7];
  assign \instr_s.funct3  = i_pipe_if_id[14:12];
  assign \instr_s.rs1  = i_pipe_if_id[19:15];
  assign \instr_s.rs2  = i_pipe_if_id[24:20];
  assign \instr_s.imm_11_5  = i_pipe_if_id[31:25];
  assign \instr_b.opcode  = i_pipe_if_id[6:0];
  assign \instr_b.imm_11  = i_pipe_if_id[7];
  assign \instr_b.imm_4_1  = i_pipe_if_id[11:8];
  assign \instr_b.funct3  = i_pipe_if_id[14:12];
  assign \instr_b.rs1  = i_pipe_if_id[19:15];
  assign \instr_b.rs2  = i_pipe_if_id[24:20];
  assign \instr_b.imm_10_5  = i_pipe_if_id[30:25];
  assign \instr_b.imm_12  = i_pipe_if_id[31];
  assign \instr_j.opcode  = i_pipe_if_id[6:0];
  assign \instr_j.rd  = i_pipe_if_id[11:7];
  assign \instr_j.imm_19_12  = i_pipe_if_id[19:12];
  assign \instr_j.imm_11  = i_pipe_if_id[20];
  assign \instr_j.imm_10_1  = i_pipe_if_id[30:21];
  assign \instr_j.imm_20  = i_pipe_if_id[31];
  assign \o_pipe_id_exe.rd  = o_pipe_id_exe[4:0];
  assign \o_pipe_id_exe.imm  = o_pipe_id_exe[16:5];
  assign \o_pipe_id_exe.op2  = o_pipe_id_exe[48:17];
  assign \o_pipe_id_exe.op1  = o_pipe_id_exe[80:49];
  assign \o_pipe_id_exe.opcode  = o_pipe_id_exe[87:81];
  assign \o_pipe_id_exe.pc  = o_pipe_id_exe[119:88];
  assign \o_pipe_id_exe.valid  = o_pipe_id_exe[120];
  always @*
    o_pipe_id_exe[120] = i_pipe_if_id[64];
  always @*
    o_pipe_id_exe[119:88] = i_pipe_if_id[63:32];
  assign \$1  = { 3'h0, i_pipe_if_id[31:12], 12'h000 };
  assign \$2  = { 3'h0, i_pipe_if_id[31:12], 12'h000 };
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:736" *)
(* generator = "Amaranth" *)
module \top.u_cpu.u_mem (rst, i_pipe_exe_mem, i_cache_resp, o_pipe_mem_wb, o_cache_req, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$10  = 0;
  wire [33:0] \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire [15:0] \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire [16:0] \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  reg [31:0] \$36 ;
  wire [5:0] \$38 ;
  wire [7:0] \$4 ;
  wire [5:0] \$42 ;
  wire [5:0] \$46 ;
  wire [5:0] \$49 ;
  wire [8:0] \$5 ;
  wire [15:0] \$6 ;
  wire [7:0] \$7 ;
  wire [3:0] \$8 ;
  wire [3:0] \$9 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:759" *)
  wire [31:0] addr;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:733" *)
  input [32:0] i_cache_resp;
  wire [32:0] i_cache_resp;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \i_cache_resp$data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire \i_cache_resp$rdy ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:733" *)
  wire [31:0] \i_cache_resp.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:733" *)
  wire \i_cache_resp.rdy ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  input [152:0] i_pipe_exe_mem;
  wire [152:0] i_pipe_exe_mem;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [11:0] \i_pipe_exe_mem$imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \i_pipe_exe_mem$op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \i_pipe_exe_mem$op2 ;
  (* enum_base_type = "Opcode" *)
  (* enum_value_0000001 = "LUI" *)
  (* enum_value_0000010 = "AUIPC" *)
  (* enum_value_0000011 = "JAL" *)
  (* enum_value_0000100 = "JALR" *)
  (* enum_value_0000101 = "BEQ" *)
  (* enum_value_0000110 = "BNE" *)
  (* enum_value_0000111 = "BLT" *)
  (* enum_value_0001000 = "BGE" *)
  (* enum_value_0001001 = "BLTU" *)
  (* enum_value_0001010 = "BGEU" *)
  (* enum_value_0001011 = "LB" *)
  (* enum_value_0001100 = "LH" *)
  (* enum_value_0001101 = "LW" *)
  (* enum_value_0001110 = "LBU" *)
  (* enum_value_0001111 = "LHU" *)
  (* enum_value_0010000 = "SB" *)
  (* enum_value_0010001 = "SH" *)
  (* enum_value_0010010 = "SW" *)
  (* enum_value_0010011 = "ADDI" *)
  (* enum_value_0010100 = "SLTI" *)
  (* enum_value_0010101 = "SLTIU" *)
  (* enum_value_0010110 = "XORI" *)
  (* enum_value_0010111 = "ORI" *)
  (* enum_value_0011000 = "ANDI" *)
  (* enum_value_0011001 = "SLLI" *)
  (* enum_value_0011010 = "SRLI" *)
  (* enum_value_0011011 = "SRAI" *)
  (* enum_value_0011100 = "ADD" *)
  (* enum_value_0011101 = "SUB" *)
  (* enum_value_0011110 = "SLL" *)
  (* enum_value_0011111 = "SLT" *)
  (* enum_value_0100000 = "SLTU" *)
  (* enum_value_0100001 = "XOR" *)
  (* enum_value_0100010 = "SRL" *)
  (* enum_value_0100011 = "SRA" *)
  (* enum_value_0100100 = "OR" *)
  (* enum_value_0100101 = "AND" *)
  (* enum_value_0100110 = "FENCE" *)
  (* enum_value_0100111 = "ECALL" *)
  (* enum_value_0101000 = "EBREAK" *)
  (* enum_value_0101001 = "LR_W" *)
  (* enum_value_0101010 = "SC_W" *)
  (* enum_value_0101011 = "AMOSWAP_W" *)
  (* enum_value_0101100 = "AMOADD_W" *)
  (* enum_value_0101101 = "AMOXOR_W" *)
  (* enum_value_0101110 = "AMOAND_W" *)
  (* enum_value_0101111 = "AMOOR_W" *)
  (* enum_value_0110000 = "AMOMIN_W" *)
  (* enum_value_0110001 = "AMOMAX_W" *)
  (* enum_value_0110010 = "AMOMINU_W" *)
  (* enum_value_0110011 = "AMOMAXU_W" *)
  (* enum_value_0110100 = "MUL" *)
  (* enum_value_0110101 = "MULH" *)
  (* enum_value_0110110 = "MULHSU" *)
  (* enum_value_0110111 = "MULHU" *)
  (* enum_value_0111000 = "DIV" *)
  (* enum_value_0111001 = "DIVU" *)
  (* enum_value_0111010 = "REM" *)
  (* enum_value_0111011 = "REMU" *)
  (* enum_value_0111100 = "CSRRW" *)
  (* enum_value_0111101 = "CSRRS" *)
  (* enum_value_0111110 = "CSRRC" *)
  (* enum_value_0111111 = "CSRRWI" *)
  (* enum_value_1000000 = "CSRRSI" *)
  (* enum_value_1000001 = "CSRRCI" *)
  (* enum_value_1000010 = "MRET" *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [6:0] \i_pipe_exe_mem$opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \i_pipe_exe_mem$pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [4:0] \i_pipe_exe_mem$rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \i_pipe_exe_mem$res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire \i_pipe_exe_mem$valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [11:0] \i_pipe_exe_mem.imm ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [31:0] \i_pipe_exe_mem.op1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [31:0] \i_pipe_exe_mem.op2 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [6:0] \i_pipe_exe_mem.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [31:0] \i_pipe_exe_mem.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [4:0] \i_pipe_exe_mem.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire [31:0] \i_pipe_exe_mem.res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:730" *)
  wire \i_pipe_exe_mem.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  output [72:0] o_cache_req;
  reg [72:0] o_cache_req;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \o_cache_req$addr ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \o_cache_req$data ;
  (* enum_base_type = "CacheOp" *)
  (* enum_value_0001 = "READ" *)
  (* enum_value_0010 = "WRITE" *)
  (* enum_value_0011 = "SWAP" *)
  (* enum_value_0100 = "ADD" *)
  (* enum_value_0101 = "AND" *)
  (* enum_value_0110 = "OR" *)
  (* enum_value_0111 = "XOR" *)
  (* enum_value_1000 = "MIN" *)
  (* enum_value_1001 = "MINU" *)
  (* enum_value_1010 = "MAX" *)
  (* enum_value_1011 = "MAXU" *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [3:0] \o_cache_req$op ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire \o_cache_req$valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [3:0] \o_cache_req$wsel ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  wire [31:0] \o_cache_req.addr ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  wire [31:0] \o_cache_req.data ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  wire [3:0] \o_cache_req.op ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  wire \o_cache_req.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:732" *)
  wire [3:0] \o_cache_req.wsel ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  output [76:0] o_pipe_mem_wb;
  reg [76:0] o_pipe_mem_wb;
  (* enum_base_type = "Opcode" *)
  (* enum_value_0000001 = "LUI" *)
  (* enum_value_0000010 = "AUIPC" *)
  (* enum_value_0000011 = "JAL" *)
  (* enum_value_0000100 = "JALR" *)
  (* enum_value_0000101 = "BEQ" *)
  (* enum_value_0000110 = "BNE" *)
  (* enum_value_0000111 = "BLT" *)
  (* enum_value_0001000 = "BGE" *)
  (* enum_value_0001001 = "BLTU" *)
  (* enum_value_0001010 = "BGEU" *)
  (* enum_value_0001011 = "LB" *)
  (* enum_value_0001100 = "LH" *)
  (* enum_value_0001101 = "LW" *)
  (* enum_value_0001110 = "LBU" *)
  (* enum_value_0001111 = "LHU" *)
  (* enum_value_0010000 = "SB" *)
  (* enum_value_0010001 = "SH" *)
  (* enum_value_0010010 = "SW" *)
  (* enum_value_0010011 = "ADDI" *)
  (* enum_value_0010100 = "SLTI" *)
  (* enum_value_0010101 = "SLTIU" *)
  (* enum_value_0010110 = "XORI" *)
  (* enum_value_0010111 = "ORI" *)
  (* enum_value_0011000 = "ANDI" *)
  (* enum_value_0011001 = "SLLI" *)
  (* enum_value_0011010 = "SRLI" *)
  (* enum_value_0011011 = "SRAI" *)
  (* enum_value_0011100 = "ADD" *)
  (* enum_value_0011101 = "SUB" *)
  (* enum_value_0011110 = "SLL" *)
  (* enum_value_0011111 = "SLT" *)
  (* enum_value_0100000 = "SLTU" *)
  (* enum_value_0100001 = "XOR" *)
  (* enum_value_0100010 = "SRL" *)
  (* enum_value_0100011 = "SRA" *)
  (* enum_value_0100100 = "OR" *)
  (* enum_value_0100101 = "AND" *)
  (* enum_value_0100110 = "FENCE" *)
  (* enum_value_0100111 = "ECALL" *)
  (* enum_value_0101000 = "EBREAK" *)
  (* enum_value_0101001 = "LR_W" *)
  (* enum_value_0101010 = "SC_W" *)
  (* enum_value_0101011 = "AMOSWAP_W" *)
  (* enum_value_0101100 = "AMOADD_W" *)
  (* enum_value_0101101 = "AMOXOR_W" *)
  (* enum_value_0101110 = "AMOAND_W" *)
  (* enum_value_0101111 = "AMOOR_W" *)
  (* enum_value_0110000 = "AMOMIN_W" *)
  (* enum_value_0110001 = "AMOMAX_W" *)
  (* enum_value_0110010 = "AMOMINU_W" *)
  (* enum_value_0110011 = "AMOMAXU_W" *)
  (* enum_value_0110100 = "MUL" *)
  (* enum_value_0110101 = "MULH" *)
  (* enum_value_0110110 = "MULHSU" *)
  (* enum_value_0110111 = "MULHU" *)
  (* enum_value_0111000 = "DIV" *)
  (* enum_value_0111001 = "DIVU" *)
  (* enum_value_0111010 = "REM" *)
  (* enum_value_0111011 = "REMU" *)
  (* enum_value_0111100 = "CSRRW" *)
  (* enum_value_0111101 = "CSRRS" *)
  (* enum_value_0111110 = "CSRRC" *)
  (* enum_value_0111111 = "CSRRWI" *)
  (* enum_value_1000000 = "CSRRSI" *)
  (* enum_value_1000001 = "CSRRCI" *)
  (* enum_value_1000010 = "MRET" *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [6:0] \o_pipe_mem_wb$opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \o_pipe_mem_wb$pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [4:0] \o_pipe_mem_wb$rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire [31:0] \o_pipe_mem_wb$res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/utils.py:31" *)
  wire \o_pipe_mem_wb$valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  wire [6:0] \o_pipe_mem_wb.opcode ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  wire [31:0] \o_pipe_mem_wb.pc ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  wire [4:0] \o_pipe_mem_wb.rd ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  wire [31:0] \o_pipe_mem_wb.res ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:731" *)
  wire \o_pipe_mem_wb.valid ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:761" *)
  reg [31:0] reserved_addr = 32'd0;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  assign \$1  = $signed({ 1'h0, i_pipe_exe_mem[112:81] }) + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:760" *) $signed(i_pipe_exe_mem[48:37]);
  assign \$38  = \$1 [1] * (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:774" *) 5'h10;
  assign \$2  = i_cache_resp[32:1] >> \$38 ;
  assign \$3  = $signed(1'h0) + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:774" *) $signed(\$2 );
  assign \$42  = \$1 [1:0] * (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:780" *) 4'h8;
  assign \$4  = i_cache_resp[32:1] >> \$42 ;
  assign \$5  = $signed(1'h0) + (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:780" *) $signed(\$4 );
  assign \$46  = \$1 [1] * (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:786" *) 5'h10;
  assign \$6  = i_cache_resp[32:1] >> \$46 ;
  assign \$49  = \$1 [1:0] * (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:792" *) 4'h8;
  assign \$7  = i_cache_resp[32:1] >> \$49 ;
  assign \$8  = \$1 [1] ? (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:810" *) 4'hc : 4'h3;
  assign \$9  = 1'h1 << (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:821" *) \$1 [1:0];
  assign \$10  = i_pipe_exe_mem[112:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:836" *) reserved_addr;
  assign \$11  = \$1 [31:0] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:802" *) reserved_addr;
  assign \$12  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:802" *) \$11 ;
  assign \$13  = \$1 [31:0] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:812" *) reserved_addr;
  assign \$14  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:812" *) \$13 ;
  assign \$15  = \$1 [31:0] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:823" *) reserved_addr;
  assign \$16  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:823" *) \$15 ;
  assign \$17  = i_pipe_exe_mem[112:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:836" *) reserved_addr;
  assign \$18  = i_pipe_exe_mem[112:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:856" *) reserved_addr;
  assign \$19  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:856" *) \$18 ;
  assign \$20  = i_pipe_exe_mem[112:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:867" *) reserved_addr;
  assign \$21  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:867" *) \$20 ;
  assign \$22  = i_pipe_exe_mem[112:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:878" *) reserved_addr;
  assign \$23  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:878" *) \$22 ;
  assign \$24  = i_pipe_exe_mem[112:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:889" *) reserved_addr;
  assign \$25  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:889" *) \$24 ;
  assign \$26  = i_pipe_exe_mem[112:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:900" *) reserved_addr;
  assign \$27  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:900" *) \$26 ;
  assign \$28  = i_pipe_exe_mem[112:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:911" *) reserved_addr;
  assign \$29  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:911" *) \$28 ;
  assign \$30  = i_pipe_exe_mem[112:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:922" *) reserved_addr;
  assign \$31  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:922" *) \$30 ;
  assign \$32  = i_pipe_exe_mem[112:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:933" *) reserved_addr;
  assign \$33  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:933" *) \$32 ;
  assign \$34  = i_pipe_exe_mem[112:81] == (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:944" *) reserved_addr;
  assign \$35  = i_pipe_exe_mem[152] & (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:944" *) \$34 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/cpu.py:761" *)
  always @(posedge clk)
    reserved_addr <= \$36 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    o_pipe_mem_wb[38:7] = i_pipe_exe_mem[31:0];
    casez (i_pipe_exe_mem[119:113])
      7'h0d:
          o_pipe_mem_wb[38:7] = i_cache_resp[32:1];
      7'h0c:
          o_pipe_mem_wb[38:7] = { \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3 [16], \$3  };
      7'h0b:
          o_pipe_mem_wb[38:7] = { \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5 [8], \$5  };
      7'h0f:
          o_pipe_mem_wb[38:7] = { 16'h0000, \$6  };
      7'h0e:
          o_pipe_mem_wb[38:7] = { 24'h000000, \$7  };
      7'h12:
          /* empty */;
      7'h11:
          /* empty */;
      7'h10:
          /* empty */;
      7'h29:
          o_pipe_mem_wb[38:7] = i_cache_resp[32:1];
      7'h2a:
        begin
          o_pipe_mem_wb[38:7] = 32'd1;
          if (\$10 ) begin
            o_pipe_mem_wb[38:7] = 32'd0;
          end
        end
      7'h2b:
          o_pipe_mem_wb[38:7] = i_cache_resp[32:1];
      7'h2c:
          o_pipe_mem_wb[38:7] = i_cache_resp[32:1];
      7'h2d:
          o_pipe_mem_wb[38:7] = i_cache_resp[32:1];
      7'h2e:
          o_pipe_mem_wb[38:7] = i_cache_resp[32:1];
      7'h2f:
          o_pipe_mem_wb[38:7] = i_cache_resp[32:1];
      7'h30:
          o_pipe_mem_wb[38:7] = i_cache_resp[32:1];
      7'h31:
          o_pipe_mem_wb[38:7] = i_cache_resp[32:1];
      7'h32:
          o_pipe_mem_wb[38:7] = i_cache_resp[32:1];
      7'h33:
          o_pipe_mem_wb[38:7] = i_cache_resp[32:1];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    o_cache_req[31:0] = 32'd0;
    o_cache_req[63:32] = 32'd0;
    o_cache_req[67:64] = 4'h0;
    o_cache_req[71:68] = 4'h1;
    o_cache_req[72] = 1'h0;
    casez (i_pipe_exe_mem[119:113])
      7'h0d:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = \$1 [31:0];
        end
      7'h0c:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = \$1 [31:0];
        end
      7'h0b:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = \$1 [31:0];
        end
      7'h0f:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = \$1 [31:0];
        end
      7'h0e:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = \$1 [31:0];
        end
      7'h12:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = \$1 [31:0];
          o_cache_req[71:68] = 4'h2;
          o_cache_req[63:32] = i_pipe_exe_mem[80:49];
          o_cache_req[67:64] = 4'hf;
        end
      7'h11:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = \$1 [31:0];
          o_cache_req[71:68] = 4'h2;
          o_cache_req[63:32] = { i_pipe_exe_mem[64:49], i_pipe_exe_mem[64:49] };
          o_cache_req[67:64] = \$8 ;
        end
      7'h10:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = \$1 [31:0];
          o_cache_req[71:68] = 4'h2;
          o_cache_req[63:32] = { i_pipe_exe_mem[56:49], i_pipe_exe_mem[56:49], i_pipe_exe_mem[56:49], i_pipe_exe_mem[56:49] };
          o_cache_req[67:64] = \$9 ;
        end
      7'h29:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = i_pipe_exe_mem[112:81];
        end
      7'h2a:
          if (\$10 ) begin
            o_cache_req[72] = i_pipe_exe_mem[152];
            o_cache_req[31:0] = i_pipe_exe_mem[112:81];
            o_cache_req[71:68] = 4'h2;
            o_cache_req[63:32] = i_pipe_exe_mem[80:49];
            o_cache_req[67:64] = 4'hf;
          end
      7'h2b:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = i_pipe_exe_mem[112:81];
          o_cache_req[71:68] = 4'h3;
          o_cache_req[63:32] = i_pipe_exe_mem[80:49];
          o_cache_req[67:64] = 4'hf;
        end
      7'h2c:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = i_pipe_exe_mem[112:81];
          o_cache_req[71:68] = 4'h4;
          o_cache_req[63:32] = i_pipe_exe_mem[80:49];
          o_cache_req[67:64] = 4'hf;
        end
      7'h2d:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = i_pipe_exe_mem[112:81];
          o_cache_req[71:68] = 4'h7;
          o_cache_req[63:32] = i_pipe_exe_mem[80:49];
          o_cache_req[67:64] = 4'hf;
        end
      7'h2e:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = i_pipe_exe_mem[112:81];
          o_cache_req[71:68] = 4'h5;
          o_cache_req[63:32] = i_pipe_exe_mem[80:49];
          o_cache_req[67:64] = 4'hf;
        end
      7'h2f:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = i_pipe_exe_mem[112:81];
          o_cache_req[71:68] = 4'h6;
          o_cache_req[63:32] = i_pipe_exe_mem[80:49];
          o_cache_req[67:64] = 4'hf;
        end
      7'h30:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = i_pipe_exe_mem[112:81];
          o_cache_req[71:68] = 4'h8;
          o_cache_req[63:32] = i_pipe_exe_mem[80:49];
          o_cache_req[67:64] = 4'hf;
        end
      7'h31:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = i_pipe_exe_mem[112:81];
          o_cache_req[71:68] = 4'ha;
          o_cache_req[63:32] = i_pipe_exe_mem[80:49];
          o_cache_req[67:64] = 4'hf;
        end
      7'h32:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = i_pipe_exe_mem[112:81];
          o_cache_req[71:68] = 4'h9;
          o_cache_req[63:32] = i_pipe_exe_mem[80:49];
          o_cache_req[67:64] = 4'hf;
        end
      7'h33:
        begin
          o_cache_req[72] = i_pipe_exe_mem[152];
          o_cache_req[31:0] = i_pipe_exe_mem[112:81];
          o_cache_req[71:68] = 4'hb;
          o_cache_req[63:32] = i_pipe_exe_mem[80:49];
          o_cache_req[67:64] = 4'hf;
        end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$10 ) begin end
    \$36  = reserved_addr;
    casez (i_pipe_exe_mem[119:113])
      7'h0d:
          /* empty */;
      7'h0c:
          /* empty */;
      7'h0b:
          /* empty */;
      7'h0f:
          /* empty */;
      7'h0e:
          /* empty */;
      7'h12:
          if (\$12 ) begin
            \$36  = 32'd0;
          end
      7'h11:
          if (\$14 ) begin
            \$36  = 32'd0;
          end
      7'h10:
          if (\$16 ) begin
            \$36  = 32'd0;
          end
      7'h29:
          if (i_pipe_exe_mem[152]) begin
            \$36  = i_pipe_exe_mem[112:81];
          end
      7'h2a:
          if (\$17 ) begin
            if (i_pipe_exe_mem[152]) begin
              \$36  = 32'd0;
            end
          end
      7'h2b:
          if (\$19 ) begin
            \$36  = 32'd0;
          end
      7'h2c:
          if (\$21 ) begin
            \$36  = 32'd0;
          end
      7'h2d:
          if (\$23 ) begin
            \$36  = 32'd0;
          end
      7'h2e:
          if (\$25 ) begin
            \$36  = 32'd0;
          end
      7'h2f:
          if (\$27 ) begin
            \$36  = 32'd0;
          end
      7'h30:
          if (\$29 ) begin
            \$36  = 32'd0;
          end
      7'h31:
          if (\$31 ) begin
            \$36  = 32'd0;
          end
      7'h32:
          if (\$33 ) begin
            \$36  = 32'd0;
          end
      7'h33:
          if (\$35 ) begin
            \$36  = 32'd0;
          end
    endcase
    if (rst) begin
      \$36  = 32'd0;
    end
  end
  assign \i_pipe_exe_mem$res  = i_pipe_exe_mem[31:0];
  assign \i_pipe_exe_mem$rd  = i_pipe_exe_mem[36:32];
  assign \i_pipe_exe_mem$imm  = i_pipe_exe_mem[48:37];
  assign \i_pipe_exe_mem$op2  = i_pipe_exe_mem[80:49];
  assign \i_pipe_exe_mem$op1  = i_pipe_exe_mem[112:81];
  assign \i_pipe_exe_mem$opcode  = i_pipe_exe_mem[119:113];
  assign \i_pipe_exe_mem$pc  = i_pipe_exe_mem[151:120];
  assign \i_pipe_exe_mem$valid  = i_pipe_exe_mem[152];
  assign \o_pipe_mem_wb$opcode  = o_pipe_mem_wb[6:0];
  assign \o_pipe_mem_wb$res  = o_pipe_mem_wb[38:7];
  assign \o_pipe_mem_wb$rd  = o_pipe_mem_wb[43:39];
  assign \o_pipe_mem_wb$pc  = o_pipe_mem_wb[75:44];
  assign \o_pipe_mem_wb$valid  = o_pipe_mem_wb[76];
  assign \o_cache_req$addr  = o_cache_req[31:0];
  assign \o_cache_req$data  = o_cache_req[63:32];
  assign \o_cache_req$wsel  = o_cache_req[67:64];
  assign \o_cache_req$op  = o_cache_req[71:68];
  assign \o_cache_req$valid  = o_cache_req[72];
  assign \i_cache_resp$rdy  = i_cache_resp[0];
  assign \i_cache_resp$data  = i_cache_resp[32:1];
  assign addr = \$1 [31:0];
  assign \i_pipe_exe_mem.res  = i_pipe_exe_mem[31:0];
  assign \i_pipe_exe_mem.rd  = i_pipe_exe_mem[36:32];
  assign \i_pipe_exe_mem.imm  = i_pipe_exe_mem[48:37];
  assign \i_pipe_exe_mem.op2  = i_pipe_exe_mem[80:49];
  assign \i_pipe_exe_mem.op1  = i_pipe_exe_mem[112:81];
  assign \i_pipe_exe_mem.opcode  = i_pipe_exe_mem[119:113];
  assign \i_pipe_exe_mem.pc  = i_pipe_exe_mem[151:120];
  assign \i_pipe_exe_mem.valid  = i_pipe_exe_mem[152];
  assign \o_pipe_mem_wb.opcode  = o_pipe_mem_wb[6:0];
  assign \o_pipe_mem_wb.res  = o_pipe_mem_wb[38:7];
  assign \o_pipe_mem_wb.rd  = o_pipe_mem_wb[43:39];
  assign \o_pipe_mem_wb.pc  = o_pipe_mem_wb[75:44];
  assign \o_pipe_mem_wb.valid  = o_pipe_mem_wb[76];
  assign \o_cache_req.addr  = o_cache_req[31:0];
  assign \o_cache_req.data  = o_cache_req[63:32];
  assign \o_cache_req.wsel  = o_cache_req[67:64];
  assign \o_cache_req.op  = o_cache_req[71:68];
  assign \o_cache_req.valid  = o_cache_req[72];
  assign \i_cache_resp.rdy  = i_cache_resp[0];
  assign \i_cache_resp.data  = i_cache_resp[32:1];
  always @*
    o_pipe_mem_wb[75:44] = i_pipe_exe_mem[151:120];
  always @*
    o_pipe_mem_wb[6:0] = i_pipe_exe_mem[119:113];
  always @*
    o_pipe_mem_wb[43:39] = i_pipe_exe_mem[36:32];
  always @*
    o_pipe_mem_wb[76] = i_pipe_exe_mem[152];
endmodule

(* src = "rtl/soc.py:44" *)
(* generator = "Amaranth" *)
module \top.u_sd_spi (clk, rst, i_en, i_clkdiv, i_data, shift, o_spi_mosi, o_spi_sclk, o_busy, i_spi_miso);
  reg \$auto$verilog_backend.cc:2352:dump_module$11  = 0;
  wire [6:0] \$1 ;
  reg [7:0] \$10 ;
  reg \$11 ;
  reg [2:0] \$12 ;
  reg [1:0] \$13 ;
  reg \$14 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire [3:0] \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  reg [5:0] \$9 ;
  (* src = "rtl/soc.py:50" *)
  reg [2:0] bit_cntr = 3'h0;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "rtl/soc.py:46" *)
  reg [5:0] counter = 6'h00;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "rtl/soc.py:33" *)
  input [5:0] i_clkdiv;
  wire [5:0] i_clkdiv;
  (* src = "rtl/soc.py:34" *)
  input [7:0] i_data;
  wire [7:0] i_data;
  (* src = "rtl/soc.py:36" *)
  input i_en;
  wire i_en;
  (* src = "rtl/soc.py:41" *)
  input i_spi_miso;
  wire i_spi_miso;
  (* src = "rtl/soc.py:37" *)
  output o_busy;
  reg o_busy;
  (* init = 8'h00 *)
  (* src = "rtl/soc.py:35" *)
  wire [7:0] o_data;
  (* src = "rtl/soc.py:40" *)
  output o_spi_mosi;
  reg o_spi_mosi = 1'h1;
  (* src = "rtl/soc.py:39" *)
  output o_spi_sclk;
  reg o_spi_sclk = 1'h0;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "rtl/soc.py:35" *)
  output [7:0] shift;
  reg [7:0] shift = 8'h00;
  assign \$1  = counter - (* src = "rtl/soc.py:47" *) 1'h1;
  assign \$2  = ! (* src = "rtl/soc.py:61" *) counter;
  assign \$3  = ! (* src = "rtl/soc.py:66" *) counter;
  assign \$4  = bit_cntr == (* src = "rtl/soc.py:68" *) 3'h7;
  assign \$5  = bit_cntr + (* src = "rtl/soc.py:71" *) 1'h1;
  assign \$6  = ! (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) fsm_state;
  assign \$7  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 1'h1;
  assign \$8  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h2;
  (* src = "rtl/soc.py:46" *)
  always @(posedge clk)
    counter <= \$9 ;
  (* src = "rtl/soc.py:49" *)
  always @(posedge clk)
    shift <= \$10 ;
  (* src = "rtl/soc.py:40" *)
  always @(posedge clk)
    o_spi_mosi <= \$11 ;
  (* src = "rtl/soc.py:50" *)
  always @(posedge clk)
    bit_cntr <= \$12 ;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  always @(posedge clk)
    fsm_state <= \$13 ;
  (* src = "rtl/soc.py:39" *)
  always @(posedge clk)
    o_spi_sclk <= \$14 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$9  = \$1 [5:0];
    casez (fsm_state)
      2'h0:
          if (i_en) begin
            \$9  = i_clkdiv;
          end
      2'h1:
          if (\$2 ) begin
            \$9  = i_clkdiv;
          end
      2'h2:
          if (\$3 ) begin
            \$9  = i_clkdiv;
          end
    endcase
    if (rst) begin
      \$9  = 6'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$10  = shift;
    casez (fsm_state)
      2'h0:
          if (i_en) begin
            \$10  = i_data;
          end
      2'h1:
          if (\$2 ) begin
            \$10  = { shift[6:0], i_spi_miso };
          end
    endcase
    if (rst) begin
      \$10  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$11  = o_spi_mosi;
    casez (fsm_state)
      2'h0:
          if (i_en) begin
            \$11  = i_data[7];
          end
      2'h1:
          /* empty */;
      2'h2:
          if (\$3 ) begin
            (* full_case = 32'd1 *)
            if (\$4 ) begin
            end else begin
              \$11  = shift[7];
            end
          end
    endcase
    if (rst) begin
      \$11  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$12  = bit_cntr;
    casez (fsm_state)
      2'h0:
          if (i_en) begin
            \$12  = 3'h0;
          end
      2'h1:
          /* empty */;
      2'h2:
          if (\$3 ) begin
            (* full_case = 32'd1 *)
            if (\$4 ) begin
            end else begin
              \$12  = \$5 [2:0];
            end
          end
    endcase
    if (rst) begin
      \$12  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$13  = fsm_state;
    casez (fsm_state)
      2'h0:
          if (i_en) begin
            \$13  = 2'h1;
          end
      2'h1:
          if (\$2 ) begin
            \$13  = 2'h2;
          end
      2'h2:
          if (\$3 ) begin
            (* full_case = 32'd1 *)
            if (\$4 ) begin
              \$13  = 2'h0;
            end else begin
              \$13  = 2'h1;
            end
          end
    endcase
    if (rst) begin
      \$13  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    \$14  = o_spi_sclk;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\$2 ) begin
            \$14  = 1'h1;
          end
      2'h2:
          if (\$3 ) begin
            \$14  = 1'h0;
          end
    endcase
    if (rst) begin
      \$14  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$11 ) begin end
    o_busy = 1'h1;
    casez (fsm_state)
      2'h0:
          o_busy = 1'h0;
    endcase
  end
  assign o_data = shift;
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:52" *)
(* generator = "Amaranth" *)
module \top.u_sdram (clk, rst, i_wb_stb, \port$1291$0 , i_wb_dat, i_wb_we, o_wb_ack, o_wb_dat, cmd, o_SDRAM_A, o_SDRAM_BA, o_SDRAM_DQM, o_SDRAM_DQ_OE, o_SDRAM_DQ, i_SDRAM_DQ);
  reg \$auto$verilog_backend.cc:2352:dump_module$12  = 0;
  wire [8:0] \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire [16:0] \$3 ;
  wire \$30 ;
  wire \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire \$36 ;
  reg [7:0] \$37 ;
  reg \$38 ;
  reg [15:0] \$39 ;
  wire \$4 ;
  reg \$40 ;
  reg [4:0] \$41 ;
  reg [1:0] \$42 ;
  reg [31:0] \$43 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:90" *)
  reg [1:0] bank = 2'h0;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:69" *)
  output [2:0] cmd;
  reg [2:0] cmd;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  reg [4:0] fsm_state = 5'h00;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:47" *)
  input [15:0] i_SDRAM_DQ;
  wire [15:0] i_SDRAM_DQ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:30" *)
  wire [31:0] i_wb_adr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:31" *)
  input [31:0] i_wb_dat;
  wire [31:0] i_wb_dat;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:35" *)
  input i_wb_stb;
  wire i_wb_stb;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:34" *)
  input i_wb_we;
  wire i_wb_we;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:66" *)
  reg [15:0] init_cntr = 16'h0000;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:44" *)
  output [12:0] o_SDRAM_A;
  reg [12:0] o_SDRAM_A;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:45" *)
  output [1:0] o_SDRAM_BA;
  reg [1:0] o_SDRAM_BA;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:42" *)
  wire o_SDRAM_CASn;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:40" *)
  wire o_SDRAM_CKE;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:48" *)
  output [15:0] o_SDRAM_DQ;
  reg [15:0] o_SDRAM_DQ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:46" *)
  output [1:0] o_SDRAM_DQM;
  reg [1:0] o_SDRAM_DQM;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:49" *)
  output o_SDRAM_DQ_OE;
  reg o_SDRAM_DQ_OE;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:43" *)
  wire o_SDRAM_RASn;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:41" *)
  wire o_SDRAM_WEn;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:38" *)
  output o_wb_ack;
  reg o_wb_ack = 1'h0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:37" *)
  output [31:0] o_wb_dat;
  reg [31:0] o_wb_dat = 32'd0;
  input [24:0] \port$1291$0 ;
  wire [24:0] \port$1291$0 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:57" *)
  reg [7:0] refresh_cntr = 8'h00;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:58" *)
  reg refresh_pend = 1'h0;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  assign \$1  = refresh_cntr + (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:59" *) 1'h1;
  assign \$2  = refresh_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:60" *) 7'h5f;
  assign \$3  = init_cntr + (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:67" *) 1'h1;
  assign \$4  = init_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:95" *) 15'h7fff;
  assign \$5  = init_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:99" *) 16'h8100;
  assign \$6  = init_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:104" *) 16'h8200;
  assign \$7  = init_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:109" *) 16'h8300;
  assign \$8  = init_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:114" *) 16'h8400;
  assign \$9  = init_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:119" *) 16'h8500;
  assign \$10  = init_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:99" *) 16'h8100;
  assign \$11  = init_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:104" *) 16'h8200;
  assign \$12  = init_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:109" *) 16'h8300;
  assign \$13  = init_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:114" *) 16'h8400;
  assign \$14  = ! (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) fsm_state;
  assign \$15  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 1'h1;
  assign \$16  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h2;
  assign \$17  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h3;
  assign \$18  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h4;
  assign \$19  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h5;
  assign \$20  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h6;
  assign \$21  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 3'h7;
  assign \$22  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 4'h8;
  assign \$23  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 4'h9;
  assign \$24  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 4'ha;
  assign \$25  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 4'hb;
  assign \$26  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 4'hc;
  assign \$27  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 4'hd;
  assign \$28  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 4'he;
  assign \$29  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 4'hf;
  assign \$30  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 5'h10;
  assign \$31  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 5'h11;
  assign \$32  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 5'h12;
  assign \$33  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 5'h13;
  assign \$34  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 5'h14;
  assign \$35  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 5'h15;
  assign \$36  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 5'h16;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:57" *)
  always @(posedge clk)
    refresh_cntr <= \$37 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:58" *)
  always @(posedge clk)
    refresh_pend <= \$38 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:66" *)
  always @(posedge clk)
    init_cntr <= \$39 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:38" *)
  always @(posedge clk)
    o_wb_ack <= \$40 ;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  always @(posedge clk)
    fsm_state <= \$41 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:90" *)
  always @(posedge clk)
    bank <= \$42 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/sdram.py:37" *)
  always @(posedge clk)
    o_wb_dat <= \$43 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$37  = \$1 [7:0];
    if (\$2 ) begin
      \$37  = 8'h00;
    end
    if (rst) begin
      \$37  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$38  = refresh_pend;
    if (\$2 ) begin
      \$38  = 1'h1;
    end
    casez (fsm_state)
      5'h00:
          /* empty */;
      5'h01:
          /* empty */;
      5'h02:
          /* empty */;
      5'h03:
          /* empty */;
      5'h04:
          /* empty */;
      5'h05:
          /* empty */;
      5'h06:
          if (refresh_pend) begin
            \$38  = 1'h0;
          end
    endcase
    if (rst) begin
      \$38  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$39  = \$3 [15:0];
    if (rst) begin
      \$39  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$40  = 1'h0;
    casez (fsm_state)
      5'h00:
          /* empty */;
      5'h01:
          /* empty */;
      5'h02:
          /* empty */;
      5'h03:
          /* empty */;
      5'h04:
          /* empty */;
      5'h05:
          /* empty */;
      5'h06:
          /* empty */;
      5'h08:
          /* empty */;
      5'h07:
          /* empty */;
      5'h0b:
          /* empty */;
      5'h0c:
          /* empty */;
      5'h0a:
          /* empty */;
      5'h0d:
          /* empty */;
      5'h0f:
          /* empty */;
      5'h0e:
          /* empty */;
      5'h10:
          /* empty */;
      5'h11:
          /* empty */;
      5'h12:
          \$40  = 1'h1;
      5'h09:
          /* empty */;
      5'h14:
          /* empty */;
      5'h15:
          \$40  = 1'h1;
    endcase
    if (rst) begin
      \$40  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$41  = fsm_state;
    casez (fsm_state)
      5'h00:
          if (\$4 ) begin
            \$41  = 5'h01;
          end
      5'h01:
          if (\$5 ) begin
            \$41  = 5'h02;
          end
      5'h02:
          if (\$6 ) begin
            \$41  = 5'h03;
          end
      5'h03:
          if (\$7 ) begin
            \$41  = 5'h04;
          end
      5'h04:
          if (\$8 ) begin
            \$41  = 5'h05;
          end
      5'h05:
          if (\$9 ) begin
            \$41  = 5'h06;
          end
      5'h06:
          if (refresh_pend) begin
            \$41  = 5'h07;
          end else if (i_wb_stb) begin
            \$41  = 5'h08;
          end
      5'h08:
          (* full_case = 32'd1 *)
          if (i_wb_we) begin
            \$41  = 5'h09;
          end else begin
            \$41  = 5'h0a;
          end
      5'h07:
          \$41  = 5'h0b;
      5'h0b:
          \$41  = 5'h0c;
      5'h0c:
          \$41  = 5'h06;
      5'h0a:
          \$41  = 5'h0d;
      5'h0d:
          \$41  = 5'h0e;
      5'h0f:
          \$41  = 5'h0e;
      5'h0e:
          \$41  = 5'h10;
      5'h10:
          \$41  = 5'h11;
      5'h11:
          \$41  = 5'h12;
      5'h12:
          \$41  = 5'h13;
      5'h09:
          \$41  = 5'h14;
      5'h14:
          \$41  = 5'h15;
      5'h15:
          \$41  = 5'h13;
      5'h13:
          \$41  = 5'h16;
      5'h16:
          \$41  = 5'h06;
    endcase
    if (rst) begin
      \$41  = 5'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$42  = bank;
    casez (fsm_state)
      5'h00:
          /* empty */;
      5'h01:
          /* empty */;
      5'h02:
          /* empty */;
      5'h03:
          /* empty */;
      5'h04:
          /* empty */;
      5'h05:
          /* empty */;
      5'h06:
          if (refresh_pend) begin
          end else if (i_wb_stb) begin
            \$42  = \port$1291$0 [23:22];
          end
    endcase
    if (rst) begin
      \$42  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    \$43  = o_wb_dat;
    casez (fsm_state)
      5'h00:
          /* empty */;
      5'h01:
          /* empty */;
      5'h02:
          /* empty */;
      5'h03:
          /* empty */;
      5'h04:
          /* empty */;
      5'h05:
          /* empty */;
      5'h06:
          /* empty */;
      5'h08:
          /* empty */;
      5'h07:
          /* empty */;
      5'h0b:
          /* empty */;
      5'h0c:
          /* empty */;
      5'h0a:
          /* empty */;
      5'h0d:
          /* empty */;
      5'h0f:
          /* empty */;
      5'h0e:
          \$43 [7:0] = i_SDRAM_DQ[15:8];
      5'h10:
          \$43 [15:8] = i_SDRAM_DQ[15:8];
      5'h11:
          \$43 [23:16] = i_SDRAM_DQ[15:8];
      5'h12:
          \$43 [31:24] = i_SDRAM_DQ[15:8];
    endcase
    if (rst) begin
      \$43  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    cmd = 3'h7;
    casez (fsm_state)
      5'h00:
          /* empty */;
      5'h01:
          if (\$10 ) begin
            cmd = 3'h2;
          end
      5'h02:
          if (\$11 ) begin
            cmd = 3'h1;
          end
      5'h03:
          if (\$12 ) begin
            cmd = 3'h1;
          end
      5'h04:
          if (\$13 ) begin
            cmd = 3'h0;
          end
      5'h05:
          /* empty */;
      5'h06:
          if (refresh_pend) begin
            cmd = 3'h1;
          end else if (i_wb_stb) begin
            cmd = 3'h3;
          end
      5'h08:
          (* full_case = 32'd1 *)
          if (i_wb_we) begin
            cmd = 3'h4;
          end else begin
            cmd = 3'h5;
          end
      5'h07:
          /* empty */;
      5'h0b:
          /* empty */;
      5'h0c:
          /* empty */;
      5'h0a:
          /* empty */;
      5'h0d:
          /* empty */;
      5'h0f:
          /* empty */;
      5'h0e:
          /* empty */;
      5'h10:
          /* empty */;
      5'h11:
          /* empty */;
      5'h12:
          /* empty */;
      5'h09:
          /* empty */;
      5'h14:
          /* empty */;
      5'h15:
          /* empty */;
      5'h13:
          /* empty */;
      5'h16:
          cmd = 3'h2;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    o_SDRAM_A = 13'h0000;
    casez (fsm_state)
      5'h00:
          /* empty */;
      5'h01:
          if (\$10 ) begin
            o_SDRAM_A[10] = 1'h1;
          end
      5'h02:
          /* empty */;
      5'h03:
          /* empty */;
      5'h04:
          if (\$13 ) begin
            o_SDRAM_A = 13'h0022;
          end
      5'h05:
          /* empty */;
      5'h06:
          if (refresh_pend) begin
          end else if (i_wb_stb) begin
            o_SDRAM_A = \port$1291$0 [21:9];
          end
      5'h08:
          o_SDRAM_A = { 4'h0, \port$1291$0 [8:0] };
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    o_SDRAM_BA = 2'h0;
    casez (fsm_state)
      5'h00:
          /* empty */;
      5'h01:
          /* empty */;
      5'h02:
          /* empty */;
      5'h03:
          /* empty */;
      5'h04:
          /* empty */;
      5'h05:
          /* empty */;
      5'h06:
          if (refresh_pend) begin
          end else if (i_wb_stb) begin
            o_SDRAM_BA = \port$1291$0 [23:22];
          end
      5'h08:
          o_SDRAM_BA = bank;
      5'h07:
          /* empty */;
      5'h0b:
          /* empty */;
      5'h0c:
          /* empty */;
      5'h0a:
          /* empty */;
      5'h0d:
          /* empty */;
      5'h0f:
          /* empty */;
      5'h0e:
          /* empty */;
      5'h10:
          /* empty */;
      5'h11:
          /* empty */;
      5'h12:
          /* empty */;
      5'h09:
          /* empty */;
      5'h14:
          /* empty */;
      5'h15:
          /* empty */;
      5'h13:
          /* empty */;
      5'h16:
          o_SDRAM_BA = bank;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    o_SDRAM_DQM = 2'h3;
    casez (fsm_state)
      5'h00:
          /* empty */;
      5'h01:
          /* empty */;
      5'h02:
          /* empty */;
      5'h03:
          /* empty */;
      5'h04:
          /* empty */;
      5'h05:
          /* empty */;
      5'h06:
          /* empty */;
      5'h08:
          if (i_wb_we) begin
            o_SDRAM_DQM = 2'h0;
          end
      5'h07:
          /* empty */;
      5'h0b:
          /* empty */;
      5'h0c:
          /* empty */;
      5'h0a:
          /* empty */;
      5'h0d:
          /* empty */;
      5'h0f:
          /* empty */;
      5'h0e:
          /* empty */;
      5'h10:
          /* empty */;
      5'h11:
          /* empty */;
      5'h12:
          /* empty */;
      5'h09:
          o_SDRAM_DQM = 2'h0;
      5'h14:
          o_SDRAM_DQM = 2'h0;
      5'h15:
          o_SDRAM_DQM = 2'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    o_SDRAM_DQ_OE = 1'h0;
    casez (fsm_state)
      5'h00:
          /* empty */;
      5'h01:
          /* empty */;
      5'h02:
          /* empty */;
      5'h03:
          /* empty */;
      5'h04:
          /* empty */;
      5'h05:
          /* empty */;
      5'h06:
          /* empty */;
      5'h08:
          if (i_wb_we) begin
            o_SDRAM_DQ_OE = 1'h1;
          end
      5'h07:
          /* empty */;
      5'h0b:
          /* empty */;
      5'h0c:
          /* empty */;
      5'h0a:
          /* empty */;
      5'h0d:
          /* empty */;
      5'h0f:
          /* empty */;
      5'h0e:
          /* empty */;
      5'h10:
          /* empty */;
      5'h11:
          /* empty */;
      5'h12:
          /* empty */;
      5'h09:
          o_SDRAM_DQ_OE = 1'h1;
      5'h14:
          o_SDRAM_DQ_OE = 1'h1;
      5'h15:
          o_SDRAM_DQ_OE = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$12 ) begin end
    o_SDRAM_DQ[15:8] = 8'h00;
    casez (fsm_state)
      5'h00:
          /* empty */;
      5'h01:
          /* empty */;
      5'h02:
          /* empty */;
      5'h03:
          /* empty */;
      5'h04:
          /* empty */;
      5'h05:
          /* empty */;
      5'h06:
          /* empty */;
      5'h08:
          if (i_wb_we) begin
            o_SDRAM_DQ[15:8] = i_wb_dat[7:0];
          end
      5'h07:
          /* empty */;
      5'h0b:
          /* empty */;
      5'h0c:
          /* empty */;
      5'h0a:
          /* empty */;
      5'h0d:
          /* empty */;
      5'h0f:
          /* empty */;
      5'h0e:
          /* empty */;
      5'h10:
          /* empty */;
      5'h11:
          /* empty */;
      5'h12:
          /* empty */;
      5'h09:
          o_SDRAM_DQ[15:8] = i_wb_dat[15:8];
      5'h14:
          o_SDRAM_DQ[15:8] = i_wb_dat[23:16];
      5'h15:
          o_SDRAM_DQ[15:8] = i_wb_dat[31:24];
    endcase
  end
  assign i_wb_adr = { 7'h00, \port$1291$0  };
  assign o_SDRAM_WEn = cmd[0];
  assign o_SDRAM_CASn = cmd[1];
  assign o_SDRAM_RASn = cmd[2];
  assign o_SDRAM_CKE = 1'h1;
  always @*
    o_SDRAM_DQ[7:0] = 8'h00;
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:117" *)
(* generator = "Amaranth" *)
module \top.u_uart (clk, rst, o_wb_ack, \port$1291$0 , i_wb_dat, i_wb_we, o_wb_dat, o_txd, i_rxd);
  reg \$auto$verilog_backend.cc:2352:dump_module$13  = 0;
  wire [30:0] \$1 ;
  wire [24:0] \$2 ;
  wire [30:0] \$3 ;
  reg \$4 ;
  reg [7:0] \$5 ;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:19" *)
  wire [7:0] i_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:20" *)
  reg i_en;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:113" *)
  input i_rxd;
  wire i_rxd;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:113" *)
  wire \i_rxd$3 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:103" *)
  wire [31:0] i_wb_adr;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:104" *)
  input [31:0] i_wb_dat;
  wire [31:0] i_wb_dat;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:108" *)
  wire i_wb_stb;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:107" *)
  input i_wb_we;
  wire i_wb_we;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:21" *)
  wire o_busy;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:62" *)
  wire [7:0] o_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:63" *)
  wire o_stb;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:22" *)
  output o_txd;
  wire o_txd;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:22" *)
  wire \o_txd$1 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:108" *)
  input o_wb_ack;
  wire o_wb_ack;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:110" *)
  output [31:0] o_wb_dat;
  reg [31:0] o_wb_dat;
  input [23:0] \port$1291$0 ;
  wire [23:0] \port$1291$0 ;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:131" *)
  reg [7:0] rx_byte = 8'h00;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:130" *)
  reg rx_byte_avail = 1'h0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:130" *)
  always @(posedge clk)
    rx_byte_avail <= \$4 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:131" *)
  always @(posedge clk)
    rx_byte <= \$5 ;
  assign \$1  = o_busy ? (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:145" *) 31'h00000000 : 31'h60606060;
  assign \$2  = rx_byte_avail ? (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:145" *) 25'h1010101 : 25'h0000000;
  assign \$3  = \$1  | (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:145" *) { 6'h00, \$2  };
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:119" *)
  \top.u_uart.u_uart_rx  u_uart_rx (
    .clk(clk),
    .i_rxd(i_rxd),
    .o_stb(o_stb),
    .rst(rst),
    .shift(o_data)
  );
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:120" *)
  \top.u_uart.u_uart_tx  u_uart_tx (
    .clk(clk),
    .i_data(i_wb_dat[7:0]),
    .i_en(i_en),
    .o_busy(o_busy),
    .o_txd(o_txd),
    .rst(rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    o_wb_dat = 32'd0;
    casez (\port$1291$0 )
      24'h000000:
          o_wb_dat = { 24'h000000, rx_byte };
      24'h000005:
          o_wb_dat = { 1'h0, \$3  };
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    \$4  = rx_byte_avail;
    if (o_stb) begin
      \$4  = 1'h1;
    end
    casez (\port$1291$0 )
      24'h000000:
          if (o_wb_ack) begin
            (* full_case = 32'd1 *)
            if (i_wb_we) begin
            end else begin
              \$4  = 1'h0;
            end
          end
    endcase
    if (rst) begin
      \$4  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    \$5  = rx_byte;
    if (o_stb) begin
      \$5  = o_data;
    end
    if (rst) begin
      \$5  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$13 ) begin end
    i_en = 1'h0;
    casez (\port$1291$0 )
      24'h000000:
          if (o_wb_ack) begin
            if (i_wb_we) begin
              i_en = 1'h1;
            end
          end
    endcase
  end
  assign \o_txd$1  = o_txd;
  assign \i_rxd$3  = i_rxd;
  assign i_data = i_wb_dat[7:0];
  assign i_wb_stb = o_wb_ack;
  assign i_wb_adr = { 8'h00, \port$1291$0  };
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:67" *)
(* generator = "Amaranth" *)
module \top.u_uart.u_uart_rx (clk, rst, shift, o_stb, i_rxd);
  reg \$auto$verilog_backend.cc:2352:dump_module$14  = 0;
  wire [8:0] \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  reg [7:0] \$13 ;
  reg [1:0] \$14 ;
  reg [7:0] \$15 ;
  reg [2:0] \$16 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire [3:0] \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:69" *)
  reg [2:0] bit_cntr = 3'h0;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:68" *)
  reg [7:0] counter = 8'h00;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:64" *)
  input i_rxd;
  wire i_rxd;
  (* init = 8'h00 *)
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:62" *)
  wire [7:0] o_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:63" *)
  output o_stb;
  reg o_stb;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:62" *)
  output [7:0] shift;
  reg [7:0] shift = 8'h00;
  assign \$1  = counter + (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:72" *) 1'h1;
  assign \$2  = ~ (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:77" *) i_rxd;
  assign \$3  = counter == (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:83" *) 7'h56;
  assign \$4  = counter == (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:87" *) 8'had;
  assign \$5  = bit_cntr + (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:88" *) 1'h1;
  assign \$6  = bit_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:89" *) 3'h7;
  assign \$7  = counter == (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:92" *) 8'had;
  assign \$8  = counter == (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:92" *) 8'had;
  assign \$9  = ! (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) fsm_state;
  assign \$10  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 1'h1;
  assign \$11  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h2;
  assign \$12  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h3;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:68" *)
  always @(posedge clk)
    counter <= \$13 ;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  always @(posedge clk)
    fsm_state <= \$14 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:70" *)
  always @(posedge clk)
    shift <= \$15 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:69" *)
  always @(posedge clk)
    bit_cntr <= \$16 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$14 ) begin end
    \$13  = \$1 [7:0];
    casez (fsm_state)
      2'h0:
          if (\$2 ) begin
            \$13  = 8'h00;
          end
      2'h1:
          if (\$3 ) begin
            \$13  = 8'h00;
          end
      2'h2:
          if (\$4 ) begin
            \$13  = 8'h00;
          end
    endcase
    if (rst) begin
      \$13  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$14 ) begin end
    \$14  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (\$2 ) begin
            \$14  = 2'h1;
          end
      2'h1:
        begin
          if (i_rxd) begin
            \$14  = 2'h0;
          end
          if (\$3 ) begin
            \$14  = 2'h2;
          end
        end
      2'h2:
          if (\$4 ) begin
            if (\$6 ) begin
              \$14  = 2'h3;
            end
          end
      2'h3:
          if (\$7 ) begin
            \$14  = 2'h0;
          end
    endcase
    if (rst) begin
      \$14  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$14 ) begin end
    \$15  = shift;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$4 ) begin
            \$15  = { i_rxd, shift[7:1] };
          end
    endcase
    if (rst) begin
      \$15  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$14 ) begin end
    \$16  = bit_cntr;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$4 ) begin
            \$16  = \$5 [2:0];
          end
    endcase
    if (rst) begin
      \$16  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$14 ) begin end
    o_stb = 1'h0;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          /* empty */;
      2'h3:
          if (\$8 ) begin
            if (i_rxd) begin
              o_stb = 1'h1;
            end
          end
    endcase
  end
  assign o_data = shift;
endmodule

(* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:25" *)
(* generator = "Amaranth" *)
module \top.u_uart.u_uart_tx (rst, i_data, i_en, o_txd, o_busy, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$15  = 0;
  wire [8:0] \$1 ;
  wire \$10 ;
  reg [7:0] \$11 ;
  reg [7:0] \$12 ;
  reg [1:0] \$13 ;
  reg [2:0] \$14 ;
  wire \$2 ;
  wire \$3 ;
  wire [3:0] \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:27" *)
  reg [2:0] bit_cntr = 3'h0;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input clk;
  wire clk;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:26" *)
  reg [7:0] counter = 8'h00;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:19" *)
  input [7:0] i_data;
  wire [7:0] i_data;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:20" *)
  input i_en;
  wire i_en;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:21" *)
  output o_busy;
  reg o_busy;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:22" *)
  output o_txd;
  reg o_txd;
  (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:28" *)
  reg [7:0] shift = 8'h00;
  assign \$1  = counter + (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:30" *) 1'h1;
  assign \$2  = counter == (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:41" *) 8'had;
  assign \$3  = counter == (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:46" *) 8'had;
  assign \$4  = bit_cntr + (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:47" *) 1'h1;
  assign \$5  = bit_cntr == (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:48" *) 3'h7;
  assign \$6  = counter == (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:51" *) 8'had;
  assign \$7  = ! (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) fsm_state;
  assign \$8  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 1'h1;
  assign \$9  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h2;
  assign \$10  = fsm_state == (* src = "/home/markus/.local/lib/python3.8/site-packages/amaranth/hdl/_dsl.py:490" *) 2'h3;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:26" *)
  always @(posedge clk)
    counter <= \$11 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:28" *)
  always @(posedge clk)
    shift <= \$12 ;
  (* src = "/usr/lib/python3.8/contextlib.py:120" *)
  always @(posedge clk)
    fsm_state <= \$13 ;
  (* src = "/home/markus/work/repos/zzz-rv/rtl/uart.py:27" *)
  always @(posedge clk)
    bit_cntr <= \$14 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$15 ) begin end
    \$11  = \$1 [7:0];
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (i_en) begin
            \$11  = 8'h00;
          end
      2'h1:
          if (\$2 ) begin
            \$11  = 8'h00;
          end
      2'h2:
          if (\$3 ) begin
            \$11  = 8'h00;
          end
      2'h3:
          if (\$6 ) begin
            \$11  = 8'h00;
          end
    endcase
    if (rst) begin
      \$11  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$15 ) begin end
    \$12  = shift;
    casez (fsm_state)
      2'h0:
          if (i_en) begin
            \$12  = i_data;
          end
      2'h1:
          /* empty */;
      2'h2:
          if (\$3 ) begin
            \$12  = { 1'h0, shift[7:1] };
          end
    endcase
    if (rst) begin
      \$12  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$15 ) begin end
    \$13  = fsm_state;
    (* full_case = 32'd1 *)
    casez (fsm_state)
      2'h0:
          if (i_en) begin
            \$13  = 2'h1;
          end
      2'h1:
          if (\$2 ) begin
            \$13  = 2'h2;
          end
      2'h2:
          if (\$3 ) begin
            if (\$5 ) begin
              \$13  = 2'h3;
            end
          end
      2'h3:
          if (\$6 ) begin
            \$13  = 2'h0;
          end
    endcase
    if (rst) begin
      \$13  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$15 ) begin end
    \$14  = bit_cntr;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (\$3 ) begin
            \$14  = \$4 [2:0];
          end
    endcase
    if (rst) begin
      \$14  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$15 ) begin end
    o_txd = 1'h1;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          o_txd = 1'h0;
      2'h2:
          o_txd = shift[0];
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$15 ) begin end
    o_busy = 1'h1;
    casez (fsm_state)
      2'h0:
          o_busy = 1'h0;
    endcase
  end
endmodule
